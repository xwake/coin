[1mdiff --git a/README b/README[m
[1mindex a7fc844..29984ab 100644[m
[1m--- a/README[m
[1m+++ b/README[m
[36m@@ -1,3 +1,5 @@[m
 ±ÒÈ¦½»Ò×ËùÐ¡¹¤¾ß[m
 [m
[31m-½»Ò×ËùÖ§³Ö£º±Ò°²[m
\ No newline at end of file[m
[32m+[m[32m½»Ò×ËùÖ§³Ö£º±Ò°²[m
[32m+[m
[32m+[m[32m....[m
\ No newline at end of file[m
[1mdiff --git a/blog.db.sqlite3 b/blog.db.sqlite3[m
[1mdeleted file mode 100644[m
[1mindex 74b753f..0000000[m
Binary files a/blog.db.sqlite3 and /dev/null differ
[1mdiff --git a/blog/__init__.py b/blog/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex fac0176..0000000[m
[1m--- a/blog/__init__.py[m
[1m+++ /dev/null[m
[36m@@ -1,4 +0,0 @@[m
[31m-import sys [m
[31m-sys.path.append("../")[m
[31m-[m
[31m-[m
[1mdiff --git a/blog/__init__.pyc b/blog/__init__.pyc[m
[1mdeleted file mode 100644[m
[1mindex fa4d671..0000000[m
Binary files a/blog/__init__.pyc and /dev/null differ
[1mdiff --git a/blog/admin.py b/blog/admin.py[m
[1mdeleted file mode 100644[m
[1mindex 8c38f3f..0000000[m
[1m--- a/blog/admin.py[m
[1m+++ /dev/null[m
[36m@@ -1,3 +0,0 @@[m
[31m-from django.contrib import admin[m
[31m-[m
[31m-# Register your models here.[m
[1mdiff --git a/blog/admin.pyc b/blog/admin.pyc[m
[1mdeleted file mode 100644[m
[1mindex a221933..0000000[m
Binary files a/blog/admin.pyc and /dev/null differ
[1mdiff --git a/blog/cron.py b/blog/cron.py[m
[1mdeleted file mode 100644[m
[1mindex 8a1e228..0000000[m
[1m--- a/blog/cron.py[m
[1m+++ /dev/null[m
[36m@@ -1,43 +0,0 @@[m
[31m-[m
[31m-import sys[m
[31m-sys.path.append("../")[m
[31m-from django_cron import cronScheduler, Job[m
[31m-[m
[31m-# This is a function I wrote to check a feedback email address[m
[31m-# and add it to our database. Replace with your own imports[m
[31m-#from MyMailFunctions import check_feedback_mailbox[m
[31m-from blog import sourcelink[m
[31m-[m
[31m-class CheckNews(Job):[m
[31m-    """[m
[31m-    Cron Job that checks the lgr users mailbox and adds any [m
[31m-    approved senders' attachments to the db[m
[31m-    """[m
[31m-[m
[31m-    # print '--class.checknews()'[m
[31m-    # run every 60 seconds (1 minutes)[m
[31m-    # run_every = 60*0.05 [m
[31m-    run_every = 60*0.1[m
[31m-        [m
[31m-    def job(self):[m
[31m-        # This will be executed every 5 minutes[m
[31m-        print '--class.checknews.job()'[m
[31m-        #sourcelink.test()[m
[31m-        sourcelink.dispatcher()[m
[31m-        #sourcelink.test()[m
[31m-[m
[31m-#print '--cronScheduler.register is start.'[m
[31m-#cronScheduler.register(CheckNews)[m
[31m-[m
[31m-[m
[31m-'''[m
[31m-from dateutil.tz import tzlocal[m
[31m-localtimezone = tzlocal.get_localzone()[m
[31m-print '--localtimezone:',localtimezone[m
[31m-'''[m
[31m-[m
[31m-#import time[m
[31m-#print '--',time.timezone[m
[31m-#print '--','Etc/GMT%+d' % (time.timezone / 3600)[m
[31m-#offsetHour = time.timezone / 3600[m
[31m-#return 'Etc/GMT%+d' % offsetHour[m
[1mdiff --git a/blog/cron.pyc b/blog/cron.pyc[m
[1mdeleted file mode 100644[m
[1mindex 69bfad0..0000000[m
Binary files a/blog/cron.pyc and /dev/null differ
[1mdiff --git a/blog/models.py b/blog/models.py[m
[1mdeleted file mode 100644[m
[1mindex 2a0f182..0000000[m
[1m--- a/blog/models.py[m
[1m+++ /dev/null[m
[36m@@ -1,93 +0,0 @@[m
[31m-from django.db import models[m
[31m-from django.contrib import admin[m
[31m-import datetime[m
[31m-[m
[31m-# Create your models here.[m
[31m-[m
[31m-class User(models.Model):[m
[31m-    username = models.CharField(max_length = 40)[m
[31m-    createtime = models.DateField(auto_now_add=True)[m
[31m-[m
[31m-class Catalog(models.Model):[m
[31m-    cname = models.CharField(max_length = 40)[m
[31m-    creater = models.ForeignKey(User,default='1')[m
[31m-    createtime = models.DateField(auto_now_add=True)[m
[31m-[m
[31m-[m
[31m-class BlogPost(models.Model):[m
[31m-  title = models.CharField(max_length = 150)[m
[31m-  body = models.TextField()[m
[31m-  timestamp = models.DateTimeField(auto_now_add=True)[m
[31m-[m
[31m-  class Meta:[m
[31m-        ordering = ('-timestamp',)[m
[31m-[m
[31m-class SourceLink(models.Model):[m
[31m-  title = models.CharField(max_length = 150)[m
[31m-  link = models.CharField(max_length = 300)[m
[31m-  targetregex = models.CharField(max_length = 300)[m
[31m-  key1 = models.CharField(max_length = 50,null=True,blank=True,default="")[m
[31m-  key2 = models.CharField(max_length = 50,null=True,blank=True,default="")[m
[31m-  key3 = models.CharField(max_length = 50,null=True,blank=True,default='')[m
[31m-  key4 = models.CharField(max_length = 50,null=True,blank=True,default='')[m
[31m-  key5 = models.CharField(max_length = 50,null=True,blank=True,default='')[m
[31m-  key6 = models.CharField(max_length = 50,null=True,blank=True,default='')[m
[31m-  key7 = models.CharField(max_length = 50,null=True,blank=True,default='')[m
[31m-  key8 = models.CharField(max_length = 50,null=True,blank=True,default='')[m
[31m-  key9 = models.CharField(max_length = 50,null=True,blank=True,default='')[m
[31m-  createtime = models.DateField(auto_now_add=True)[m
[31m-  updatetime = models.DateField(auto_now=True)[m
[31m-  creater = models.ForeignKey(User,default='1')[m
[31m-  catalog = models.ForeignKey(Catalog)[m
[31m-  status = models.IntegerField(max_length = 2)[m
[31m-[m
[31m-  class Meta:[m
[31m-        ordering = ('-createtime',)[m
[31m-[m
[31m-class UrlResult(models.Model):[m
[31m-  title = models.CharField(max_length = 150)[m
[31m-  link = models.CharField(max_length = 300)[m
[31m-  createtime = models.DateTimeField(auto_now_add=True,default=datetime.datetime.now())[m
[31m-  hashid = models.IntegerField()[m
[31m-  srclinkid = models.ForeignKey(SourceLink)[m
[31m-[m
[31m-  class Meta:[m
[31m-        ordering = ('-createtime',)[m
[31m-[m
[31m-[m
[31m-class BlogPostAdmin(admin.ModelAdmin):[m
[31m-  list_display = ('title','timestamp')[m
[31m-[m
[31m-class UserAdmin(admin.ModelAdmin):[m
[31m-    list_display = ('username','createtime')[m
[31m-[m
[31m-class CatalogAdmin(admin.ModelAdmin):[m
[31m-    list_display = ('cname','creater','createtime')[m
[31m-[m
[31m-class SourceLinkAdmin(admin.ModelAdmin):[m
[31m-  list_display = ('title','link','createtime','updatetime')[m
[31m-[m
[31m-class UrlResultAdmin(admin.ModelAdmin):[m
[31m-  list_display = ('title','link','createtime')[m
[31m-[m
[31m-[m
[31m-class TestTask(models.Model):[m
[31m-    ttname = models.CharField(max_length = 20)[m
[31m-    ttname2 = models.CharField(max_length = 20)[m
[31m-[m
[31m-    def printSome (self):[m
[31m-        print 'tasks.str is print...'[m
[31m-[m
[31m-    class Meta:[m
[31m-        ordering = ('-ttname',)[m
[31m-[m
[31m-class TestTaskAdmin(admin.ModelAdmin):[m
[31m-    list_display = ('ttname','ttname2')[m
[31m-[m
[31m-[m
[31m-admin.site.register(BlogPost,BlogPostAdmin)[m
[31m-admin.site.register(SourceLink,SourceLinkAdmin)[m
[31m-admin.site.register(UrlResult,UrlResultAdmin)[m
[31m-admin.site.register(User,UserAdmin)[m
[31m-admin.site.register(Catalog,CatalogAdmin)[m
[31m-admin.site.register(TestTask,TestTaskAdmin)[m
[1mdiff --git a/blog/models.pyc b/blog/models.pyc[m
[1mdeleted file mode 100644[m
[1mindex 641cd2b..0000000[m
Binary files a/blog/models.pyc and /dev/null differ
[1mdiff --git a/blog/proxy.py b/blog/proxy.py[m
[1mdeleted file mode 100644[m
[1mindex cc9749c..0000000[m
[1m--- a/blog/proxy.py[m
[1m+++ /dev/null[m
[36m@@ -1,56 +0,0 @@[m
[31m-# coding=gbk[m
[31m-[m
[31m-import sys[m
[31m-[m
[31m-proxy_array=[]          # ´úÀíÁÐ±í [m
[31m-db=None                 #Êý¾Ý¿âÈ«¾Ö¶ÔÏó[m
[31m-conn=None[m
[31m-#dbfile='../blog/proxy/proxier0224.db'     #Êý¾Ý¿âÎÄ¼þÃû[m
[31m-[m
[31m-def open_database():[m
[31m-    global db,conn,dbfile[m
[31m-[m
[31m-    try:[m
[31m-        from pysqlite2 import dbapi2 as sqlite[m
[31m-    except:[m
[31m-        print """[m
[31m-        ±¾³ÌÐòÊ¹ÓÃ sqlite ×öÊý¾Ý¿âÀ´±£´æÊý¾Ý£¬ÔËÐÐ±¾³ÌÐòÐèÒª pysqliteµÄÖ§³Ö[m
[31m-        python ·ÃÎÊ sqlite ÐèÒªµ½ÏÂÃæµØÖ·ÏÂÔØÕâ¸öÄ£¿é pysqlite,  272kb[m
[31m-        http://initd.org/tracker/pysqlite/wiki/pysqlite#Downloads[m
[31m-        ÏÂÔØ(Windows binaries for Python 2.x)[m
[31m-        """[m
[31m-        raise SystemExit[m
[31m-[m
[31m-    try:[m
[31m-        '''[m
[31m-        db = sqlite.connect(dbfile,isolation_level=None)    [m
[31m-        db.text_factory = str[m
[31m-        reload(sys)[m
[31m-        sys.setdefaultencoding('gbk')[m
[31m-        #db.create_function("unix_timestamp", 0, my_unix_timestamp)  [m
[31m-        conn  = db.cursor()[m
[31m-        '''[m
[31m-        from django.db import connection[m
[31m-        conn = connection.cursor()[m
[31m-    except:[m
[31m-        print "--blog/proxy.py > ²Ù×÷sqliteÊý¾Ý¿âÊ§°Ü£¬ÇëÈ·±£½Å±¾ËùÔÚÄ¿Â¼¾ßÓÐÐ´È¨ÏÞ"[m
[31m-        raise SystemExit[m
[31m-[m
[31m-[m
[31m-def find_proxy ():[m
[31m-    open_database()[m
[31m-[m
[31m-    sql = "select ip,port from proxier where active = 1 "[m
[31m-    conn.execute(sql)[m
[31m-    #print sql[m
[31m-    rows = conn.fetchall()   [m
[31m-    #conn.close()[m
[31m-    return rows[m
[31m-[m
[31m-[m
[31m-def UnitTest ():[m
[31m-    rows = find_proxy()[m
[31m-    print rows[0][m
[31m-[m
[31m-[m
[31m-#UnitTest()[m
\ No newline at end of file[m
[1mdiff --git a/blog/proxy.pyc b/blog/proxy.pyc[m
[1mdeleted file mode 100644[m
[1mindex 1418733..0000000[m
Binary files a/blog/proxy.pyc and /dev/null differ
[1mdiff --git a/blog/sourcelink.py b/blog/sourcelink.py[m
[1mdeleted file mode 100644[m
[1mindex b234dbf..0000000[m
[1m--- a/blog/sourcelink.py[m
[1m+++ /dev/null[m
[36m@@ -1,171 +0,0 @@[m
[31m-#coding=utf-8[m
[31m-[m
[31m-'''[m
[31m-2014.2.26[m
[31m-[m
[31m-1¡¢Ê¹ÓÃ´úÀí·þÎñÆ÷[m
[31m-2¡¢Ê¹ÓÃ¶àÏß³Ì£¬Ã¿Ïß³ÌÊ¹ÓÃ²»Í¬µÄ´úÀí·þÎñÆ÷[m
[31m-3¡¢×¥È¡½á¹ûÐ´ÈëÊý¾Ý¿â[m
[31m-'''[m
[31m-[m
[31m-from time import sleep[m
[31m-import os, sys, urllib2, re, threading, thread, time, datetime[m
[31m-import urllib2opener as prxurl2[m
[31m-[m
[31m-debug = 0[m
[31m-# ÎÄ¼þ´æ´¢Â·¾¶[m
[31m-[m
[31m-[m
[31m-db=None                 #Êý¾Ý¿âÈ«¾Ö¶ÔÏó[m
[31m-conn=None[m
[31m-cur_path = os.path.dirname(__file__)[m
[31m-#dbfile='../blog.db.sqlite3'     #Êý¾Ý¿âÎÄ¼þÃû[m
[31m-mutex = threading.Lock()[m
[31m-daemonSubTimeOut = 60     #×Ó×ÜÏß³Ì£¨ÊØ»¤£©µÄÉú´æÊ±ÏÞ£¬ËùÓÐ×ÓÏß³ÌÓÉËüµ÷ÓÃ£¬²¢ËæËü½áÊø£¬²»Ó°ÏìÖ÷Ïß³Ì[m
[31m-debug = 0[m
[31m-#ÊØ»¤×ÓÏß³Ì£¬ÓÐ¹æ¶¨µÄ½áÊøÊ±¼ä£¬ÈÃÆäËùÓÐËïÏß³ÌËæÖ®½áÊø[m
[31m-def daemonSub (tHandles,timeout=30):[m
[31m-    if debug:[m
[31m-        print '--sourcelink.py > daemonSub() is start.',threading.active_count(),'/',datetime.datetime.now()[m
[31m-    [m
[31m-    for thi in tHandles:[m
[31m-        thi.daemon = True[m
[31m-        thi.start()[m
[31m-[m
[31m-    if debug:[m
[31m-        print '--sourcelink.py > daemonSub() is finish.',threading.active_count(),'/',datetime.datetime.now()[m
[31m-[m
[31m-[m
[31m-def open_database():[m
[31m-    global db,conn,dbfile[m
[31m-[m
[31m-    try:[m
[31m-        from pysqlite2 import dbapi2 as sqlite[m
[31m-    except:[m
[31m-        print """[m
[31m-        ±¾³ÌÐòÊ¹ÓÃ sqlite ×öÊý¾Ý¿âÀ´±£´æÊý¾Ý£¬ÔËÐÐ±¾³ÌÐòÐèÒª pysqliteµÄÖ§³Ö[m
[31m-        python ·ÃÎÊ sqlite ÐèÒªµ½ÏÂÃæµØÖ·ÏÂÔØÕâ¸öÄ£¿é pysqlite,  272kb[m
[31m-        http://initd.org/tracker/pysqlite/wiki/pysqlite#Downloads[m
[31m-        ÏÂÔØ(Windows binaries for Python 2.x)[m
[31m-        """[m
[31m-        raise SystemExit[m
[31m-[m
[31m-    try:[m
[31m-        '''[m
[31m-        db = sqlite.connect(dbfile,isolation_level=None)   [m
[31m-        #print dir(db)[m
[31m-        db.text_factory = str[m
[31m-        #reload(sys)[m
[31m-        #sys.setdefaultencoding('utf-8')[m
[31m-        #db.create_function("unix_timestamp", 0, my_unix_timestamp)  [m
[31m-        conn  = db.cursor()[m
[31m-        '''[m
[31m-        reload(sys)[m
[31m-        sys.setdefaultencoding('utf-8')[m
[31m-[m
[31m-        from django.db import connection[m
[31m-        conn = connection.cursor()[m
[31m-    except:[m
[31m-        print "--sourcelink.py > ²Ù×÷sqliteÊý¾Ý¿âÊ§°Ü£¬ÇëÈ·±£½Å±¾ËùÔÚÄ¿Â¼¾ßÓÐÐ´È¨ÏÞ"[m
[31m-        raise SystemExit[m
[31m-[m
[31m-[m
[31m-def getSourceLink ():[m
[31m-    open_database()[m
[31m-[m
[31m-    sql = "select id,link,targetregex from blog_sourcelink where status = 1"[m
[31m-    conn.execute(sql)[m
[31m-    #print sql[m
[31m-    rows = conn.fetchall()   [m
[31m-    #conn.close()[m
[31m-    if debug:    print '--sourcelink.py > proc srclink.rows:',len(rows)[m
[31m-    return rows[m
[31m-[m
[31m-[m
[31m-#urlµ÷¶ÈÆ÷[m
[31m-def dispatcher():[m
[31m-    srclinks = getSourceLink()[m
[31m-    for link in srclinks:[m
[31m-        #print link[0],link[1][m
[31m-        if debug==1: print "thrcount:",threading.active_count()[m
[31m-        try:[m
[31m-            threads = [][m
[31m-            i = 0[m
[31m-            while threading.active_count() >= 30 and i < 5:[m
[31m-                sleep(2) [m
[31m-                if debug: print '    sleep 2 sec(a),',threading.active_count()[m
[31m-                i += 1[m
[31m-            else:[m
[31m-                t = threading.Thread(target = target, args = (link[0],link[1],link[2]))[m
[31m-                #t.start()[m
[31m-                #sleep(1)[m
[31m-                #t.join(30)[m
[31m-                threads.append((t))[m
[31m-[m
[31m-            daemonThread = threading.Thread(target = daemonSub, args = (threads,1))[m
[31m-            daemonThread.start()[m
[31m-            daemonThread.join(daemonSubTimeOut)    [m
[31m-            if debug: print '--sourcelink.py > daemonThread.alive:',daemonThread.is_alive(),'/',daemonThread.ident,threading.active_count(),datetime.datetime.now()[m
[31m-            tcount = 0[m
[31m-            fcount = 0[m
[31m-            for th in threads:[m
[31m-                if th.isAlive() == True:[m
[31m-                    tcount += 1[m
[31m-                else:[m
[31m-                    fcount += 1[m
[31m-                [m
[31m-            if debug: print '--sourcelink.py > alive:',tcount,'+',fcount,'=',len(threads)[m
[31m-            if debug: print '--sourcelink.py > ·ÖÅä¼ì²éÏß³ÌÍê³É'[m
[31m-        [m
[31m-        except Exception, e:[m
[31m-            print e[m
[31m-[m
[31m-[m
[31m-def target (id,url,pattern):[m
[31m-    #print url,pattern[m
[31m-    content = prxurl2.url_proxy_open( url )[m
[31m-    if debug==1: print pattern[m
[31m-    #if debug: print len(content)[m
[31m-    #print type(content)[m
[31m-    matchs = [][m
[31m-    if type(content) != type(None):[m
[31m-        matchs = re.findall(pattern, content)[m
[31m-    [m
[31m-    mutex.acquire()[m
[31m-    open_database()[m
[31m-    if debug==1: print len(matchs)[m
[31m-    newCount = 0 [m
[31m-    for match in matchs:[m
[31m-        #print item[m
[31m-        hashid = hash(match[1])[m
[31m-        #print hashid[m
[31m-        #print int(hashid) [m
[31m-        check = "select 1 from blog_urlresult where hashid = " + str(hashid) [m
[31m-        conn.execute(check)[m
[31m-        rows = conn.fetchall()[m
[31m-        if len(rows) <= 0 :[m
[31m-            #if debug: print match[1][m
[31m-            sql = "insert into blog_urlresult (srclinkid_id,link,title,createtime,hashid) values("+str(id)+",'"+match[0]+"','"+match[1]+"',datetime('now'),"+str(hashid)+")"[m
[31m-            sql = unicode(sql,"gbk")[m
[31m-            if debug: print sql[m
[31m-            conn.execute(sql)[m
[31m-            if debug: print 'db inserted'[m
[31m-            newCount += 1[m
[31m-[m
[31m-    if newCount > 0: [m
[31m-        print '--sourcelink.py > found news: ',newCount,url[m
[31m-    else:[m
[31m-        print '--sourcelink.py > no news,done.',url[m
[31m-            [m
[31m-    #conn.close()[m
[31m-    mutex.release()[m
[31m-    thread.exit()[m
[31m-        [m
[31m-[m
[31m-def test ():[m
[31m-    print '----sourcelink.test()--'[m
[31m-    [m
[31m-            [m
[31m-if __name__ =="__main__":[m
[31m-    dispatcher()    [m
[31m-    if debug==1: print "thrcount:",threading.active_count()[m
[1mdiff --git a/blog/sourcelink.pyc b/blog/sourcelink.pyc[m
[1mdeleted file mode 100644[m
[1mindex 75d6943..0000000[m
Binary files a/blog/sourcelink.pyc and /dev/null differ
[1mdiff --git a/blog/templates/archive.html b/blog/templates/archive.html[m
[1mdeleted file mode 100644[m
[1mindex 40ee45c..0000000[m
[1m--- a/blog/templates/archive.html[m
[1m+++ /dev/null[m
[36m@@ -1,8 +0,0 @@[m
[31m-{% extends "base.html" %}[m
[31m-  {% block content %}[m
[31m-  {% for post in posts %}[m
[31m-  <h2>{{  post.title }}</h2>[m
[31m-  <p>{{ post.timestamp | date:"1,F jS"}}</p>[m
[31m-  <p>{{ post.body }}</p>[m
[31m-  {% endfor %}[m
[31m-  {% endblock %}[m
[1mdiff --git a/blog/templates/base.html b/blog/templates/base.html[m
[1mdeleted file mode 100644[m
[1mindex 35cd568..0000000[m
[1m--- a/blog/templates/base.html[m
[1m+++ /dev/null[m
[36m@@ -1,18 +0,0 @@[m
[31m-<html>[m
[31m-<head>[m
[31m-	<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />[m
[31m-</head>[m
[31m-  <style type="text/css">[m
[31m-    body{color:#efd;padding:0 5em;margin:0}[m
[31m-    h1{padding:2em 1em;background:#675}[m
[31m-    h2{color:#bf8;border-top:1px dotted #fff;margin-top:2em}[m
[31m-    p{margin:1em 0}[m
[31m-[m
[31m-  </style>[m
[31m- [m
[31m-  <body>[m
[31m-    <h1>my blog</h1>[m
[31m-    {% block content %}[m
[31m-    {% endblock %}[m
[31m-  </body>[m
[31m-</html>[m
[1mdiff --git a/blog/templates/urls.html b/blog/templates/urls.html[m
[1mdeleted file mode 100644[m
[1mindex 2538540..0000000[m
[1m--- a/blog/templates/urls.html[m
[1m+++ /dev/null[m
[36m@@ -1,6 +0,0 @@[m
[31m-{% extends "base.html" %}[m
[31m-  {% block content %}[m
[31m-  {% for url in urls %}[m
[31m-	<li><a href="{{url.link}}">{{url.title}}</a>[m
[31m-  {% endfor %}[m
[31m-  {% endblock %}[m
[1mdiff --git a/blog/urllib2opener.py b/blog/urllib2opener.py[m
[1mdeleted file mode 100644[m
[1mindex cb5a7ef..0000000[m
[1m--- a/blog/urllib2opener.py[m
[1m+++ /dev/null[m
[36m@@ -1,50 +0,0 @@[m
[31m-#coding=gbk[m
[31m-import proxy as prx[m
[31m-import sys,random[m
[31m-import urllib2[m
[31m-[m
[31m-proxy_urls = [][m
[31m-debug = 1[m
[31m-def url_proxy_open( url ):[m
[31m-    global proxy_urls[m
[31m-    #Ëæ»ú·ÖÅäÒ»¸ö´úÀí·þÎñÆ÷[m
[31m-    if len(proxy_urls) == 0 :[m
[31m-        proxy_urls = prx.find_proxy()[m
[31m-    [m
[31m-    if len(proxy_urls) == 0 :[m
[31m-        return[m
[31m-    [m
[31m-    ramdom_indexs = range( 0,len(proxy_urls) )[m
[31m-    ramdom_idx = random.sample(ramdom_indexs, 1)[m
[31m-    ramdom_proxy = proxy_urls[ramdom_idx[0]][m
[31m-    proxy_url = ramdom_proxy[0]+':'+str(ramdom_proxy[1])[m
[31m-    #print proxy_url[m
[31m-[m
[31m-    proxy_support = urllib2.ProxyHandler({"http": proxy_url})[m
[31m-    opener = urllib2.build_opener(proxy_support, urllib2.HTTPHandler)[m
[31m-    if debug:[m
[31m-        print  '--urllib2opener.py > ',url[m
[31m-    r = urllib2.Request( url )[m
[31m-    [m
[31m-    r.add_header("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1) Gecko/20090624 Firefox/3.5" )[m
[31m-    #r.add_header("Accept", "text/plain" )[m
[31m-    #r.add_header("Accept-Language","zh-cn")   [m
[31m-    #r.add_header("Content-Type","text/html; charset=gb2312")[m
[31m-    content = ''[m
[31m-    try:[m
[31m-        content = opener.open(r).read()[m
[31m-        if debug:[m
[31m-            print '--urllib2opener.py > content.len:',len(content)[m
[31m-    except urllib2.HTTPError, e:  [m
[31m-        #print "Error Code:", e.code, [m
[31m-        #print '   ,url:', proxy_url [m
[31m-        pass[m
[31m-    except urllib2.URLError, e:  [m
[31m-        #print "Error Code:", e, [m
[31m-        #print '    ,url:', proxy_url [m
[31m-        pass[m
[31m-    except Exception,e:[m
[31m-        #print "Error Reason:",e.code, [m
[31m-        #print '    ,url:', proxy_url [m
[31m-        pass[m
[31m-    return content[m
\ No newline at end of file[m
[1mdiff --git a/blog/urllib2opener.pyc b/blog/urllib2opener.pyc[m
[1mdeleted file mode 100644[m
[1mindex 27a843e..0000000[m
Binary files a/blog/urllib2opener.pyc and /dev/null differ
[1mdiff --git a/blog/urls.py b/blog/urls.py[m
[1mdeleted file mode 100644[m
[1mindex 86ab5f9..0000000[m
[1m--- a/blog/urls.py[m
[1m+++ /dev/null[m
[36m@@ -1,25 +0,0 @@[m
[31m-from django.conf.urls import *[m
[31m-from blog.views import archive[m
[31m-from blog.views import celery[m
[31m-from blog.views import urlresult[m
[31m-from blog.models import TestTask[m
[31m-urlpatterns = patterns('', [m
[31m-    url(r'^$',archive),[m
[31m-    url(r'^celery',celery),[m
[31m-    url(r'^urls',urlresult),[m
[31m-    #url(r'^test',testtask),[m
[31m-)[m
[31m-[m
[31m-[m
[31m-[m
[31m-import django_cron,threading[m
[31m-django_cron.autodiscover()[m
[31m-#print '--django_cron is start.'[m
[31m-[m
[31m-from django_cron import cronScheduler[m
[31m-#cronScheduler.execute()[m
[31m-[m
[31m-t = threading.Thread(target = cronScheduler.execute(), args = ())[m
[31m-t.start()[m
[31m-t.join(10)[m
[31m-#print '--blog.urls.py > join finish'[m
\ No newline at end of file[m
[1mdiff --git a/blog/urls.pyc b/blog/urls.pyc[m
[1mdeleted file mode 100644[m
[1mindex 2fa9d05..0000000[m
Binary files a/blog/urls.pyc and /dev/null differ
[1mdiff --git a/blog/views.py b/blog/views.py[m
[1mdeleted file mode 100644[m
[1mindex 9a884de..0000000[m
[1m--- a/blog/views.py[m
[1m+++ /dev/null[m
[36m@@ -1,59 +0,0 @@[m
[31m-#coding=gbk[m
[31m-from django.shortcuts import render[m
[31m-from django.template import loader,Context[m
[31m-from django.http import HttpResponse[m
[31m-from blog.models import BlogPost[m
[31m-from blog.models import UrlResult[m
[31m-[m
[31m-# Create your views here.[m
[31m- [m
[31m-def archive(request):[m
[31m-    posts = BlogPost.objects.all()[m
[31m-    t = loader.get_template("archive.html")[m
[31m-    c = Context({'posts':posts})[m
[31m-    return HttpResponse(t.render(c))[m
[31m-[m
[31m-def urlresult(request):[m
[31m-    urls = UrlResult.objects.all()[m
[31m-    t = loader.get_template("urls.html")[m
[31m-    c = Context({'urls':urls})[m
[31m-    return HttpResponse(t.render(c))[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-#print '\n----------------------------------------------views.py start---'[m
[31m-#f = getattr(TestTask(),'printSome')[m
[31m-#print 'TestTask().printSome.im_self.pk:',TestTask().printSome.im_self.pk[m
[31m-[m
[31m-#djangotasks.register_task(TestTask.printSome, "dd") #valid[m
[31m-#print '\n------register done'[m
[31m-[m
[31m-[m
[31m-'''[m
[31m-#¿ÉÔË¶¯£¬µ«·½·¨ÄÚµÄÄÚÈÝºÃÏñÃ»±»µ÷ÓÃ[m
[31m-import djangotasks[m
[31m-from blog.models import TestTask[m
[31m-from hyz import apihelper[m
[31m-tp = TestTask().printSome[m
[31m-tp.im_self.pk = 1[m
[31m-djangotasks.register_task(tp, "dd")[m
[31m-task = djangotasks.task_for_object( tp )[m
[31m-djangotasks.run_task(task)[m
[31m-'''[m
[31m-#print '\n----------------------------------------------views.py end---'[m
[31m-[m
[31m-[m
[31m-def celery(request):[m
[31m-    import sys[m
[31m-    sys.path.append("../celerytest")[m
[31m-    print sys.path[m
[31m-    #from tasks import add[m
[31m-    #r = add.delay(3,5) [m
[31m-    #r.wait()[m
[31m-[m
[31m-    posts = BlogPost.objects.all()[m
[31m-    t = loader.get_template("archive.html")[m
[31m-    c = Context({'posts':posts})[m
[31m-[m
[31m-    return HttpResponse(t.render(c))[m
\ No newline at end of file[m
[1mdiff --git a/blog/views.pyc b/blog/views.pyc[m
[1mdeleted file mode 100644[m
[1mindex b813904..0000000[m
Binary files a/blog/views.pyc and /dev/null differ
[1mdiff --git a/checknews_cron/__init__.py b/checknews_cron/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex e69de29..0000000[m
[1mdiff --git a/checknews_cron/__init__.pyc b/checknews_cron/__init__.pyc[m
[1mdeleted file mode 100644[m
[1mindex b6fa3c0..0000000[m
Binary files a/checknews_cron/__init__.pyc and /dev/null differ
[1mdiff --git a/checknews_cron/admin.py b/checknews_cron/admin.py[m
[1mdeleted file mode 100644[m
[1mindex 8c38f3f..0000000[m
[1m--- a/checknews_cron/admin.py[m
[1m+++ /dev/null[m
[36m@@ -1,3 +0,0 @@[m
[31m-from django.contrib import admin[m
[31m-[m
[31m-# Register your models here.[m
[1mdiff --git a/checknews_cron/admin.pyc b/checknews_cron/admin.pyc[m
[1mdeleted file mode 100644[m
[1mindex bc38c34..0000000[m
Binary files a/checknews_cron/admin.pyc and /dev/null differ
[1mdiff --git "a/checknews_cron/cron(\345\206\262\347\252\201\346\227\266\347\232\204\346\226\207\344\273\266\345\244\207\344\273\2752014-03-05 21-24-00).py" "b/checknews_cron/cron(\345\206\262\347\252\201\346\227\266\347\232\204\346\226\207\344\273\266\345\244\207\344\273\2752014-03-05 21-24-00).py"[m
[1mdeleted file mode 100644[m
[1mindex 2025621..0000000[m
[1m--- "a/checknews_cron/cron(\345\206\262\347\252\201\346\227\266\347\232\204\346\226\207\344\273\266\345\244\207\344\273\2752014-03-05 21-24-00).py"[m	
[1m+++ /dev/null[m
[36m@@ -1,46 +0,0 @@[m
[31m-# coding=gbk[m
[31m-# encoding = utf-8[m
[31m-import sys[m
[31m-sys.path.append("../")[m
[31m-from django_cron import cronScheduler, Job[m
[31m-[m
[31m-# This is a function I wrote to check a feedback email address[m
[31m-# and add it to our database. Replace with your own imports[m
[31m-#from MyMailFunctions import check_feedback_mailbox[m
[31m-from blog import sourcelink[m
[31m-debug = 0[m
[31m-class CheckNews(Job):[m
[31m-    """[m
[31m-    Cron Job that checks the lgr users mailbox and adds any [m
[31m-    approved senders' attachments to the db[m
[31m-    """[m
[31m-[m
[31m-    # print '--class.checknews()'[m
[31m-    # run every 60 seconds (1 minutes)[m
[31m-    # run_every = 60*30     #30·ÖÖÓ¼ì²éÒ»´Î [m
[31m-    run_every = 60*0.1      [m
[31m-[m
[31m-    def job(self):[m
[31m-        # This will be executed every 5 minutes[m
[31m-        if debug: print '--checknews_cron.cron.py > job() is start'[m
[31m-        #sourcelink.test()[m
[31m-        sourcelink.dispatcher()[m
[31m-        #sourcelink.test()[m
[31m-        if debug: print '--checknews_cron.cron.py > job() is finished'[m
[31m-[m
[31m-[m
[31m-#print '--cronScheduler.register is start.'[m
[31m-cronScheduler.register(CheckNews)[m
[31m-#cronScheduler.execute()[m
[31m-[m
[31m-'''[m
[31m-from dateutil.tz import tzlocal[m
[31m-localtimezone = tzlocal.get_localzone()[m
[31m-print '--localtimezone:',localtimezone[m
[31m-'''[m
[31m-[m
[31m-#import time[m
[31m-#print '--',time.timezone[m
[31m-#print '--','Etc/GMT%+d' % (time.timezone / 3600)[m
[31m-#offsetHour = time.timezone / 3600[m
[31m-#return 'Etc/GMT%+d' % offsetHour[m
[1mdiff --git "a/checknews_cron/cron(\345\206\262\347\252\201\346\227\266\347\232\204\346\226\207\344\273\266\345\244\207\344\273\2752014-03-05 21-24-00).pyc" "b/checknews_cron/cron(\345\206\262\347\252\201\346\227\266\347\232\204\346\226\207\344\273\266\345\244\207\344\273\2752014-03-05 21-24-00).pyc"[m
[1mdeleted file mode 100644[m
[1mindex 45cf86d..0000000[m
Binary files "a/checknews_cron/cron(\345\206\262\347\252\201\346\227\266\347\232\204\346\226\207\344\273\266\345\244\207\344\273\2752014-03-05 21-24-00).pyc" and /dev/null differ
[1mdiff --git a/checknews_cron/cron.py b/checknews_cron/cron.py[m
[1mdeleted file mode 100644[m
[1mindex d20c8f4..0000000[m
[1m--- a/checknews_cron/cron.py[m
[1m+++ /dev/null[m
[36m@@ -1,46 +0,0 @@[m
[31m-# coding=gbk[m
[31m-# encoding = utf-8[m
[31m-import sys[m
[31m-sys.path.append("../")[m
[31m-from django_cron import cronScheduler, Job[m
[31m-[m
[31m-# This is a function I wrote to check a feedback email address[m
[31m-# and add it to our database. Replace with your own imports[m
[31m-#from MyMailFunctions import check_feedback_mailbox[m
[31m-from blog import sourcelink[m
[31m-debug = 0[m
[31m-class CheckNews(Job):[m
[31m-    """[m
[31m-    Cron Job that checks the lgr users mailbox and adds any [m
[31m-    approved senders' attachments to the db[m
[31m-    """[m
[31m-[m
[31m-    # print '--class.checknews()'[m
[31m-    # run every 60 seconds (1 minutes)[m
[31m-    # run_every = 60*30     #30·ÖÖÓ¼ì²éÒ»´Î [m
[31m-    run_every = 60*10      [m
[31m-[m
[31m-    def job(self):[m
[31m-        # This will be executed every 5 minutes[m
[31m-        if debug: print '--checknews_cron.cron.py > job() is start'[m
[31m-        #sourcelink.test()[m
[31m-        sourcelink.dispatcher()[m
[31m-        #sourcelink.test()[m
[31m-        if debug: print '--checknews_cron.cron.py > job() is finished'[m
[31m-[m
[31m-[m
[31m-#print '--cronScheduler.register is start.'[m
[31m-cronScheduler.register(CheckNews)[m
[31m-#cronScheduler.execute()[m
[31m-[m
[31m-'''[m
[31m-from dateutil.tz import tzlocal[m
[31m-localtimezone = tzlocal.get_localzone()[m
[31m-print '--localtimezone:',localtimezone[m
[31m-'''[m
[31m-[m
[31m-#import time[m
[31m-#print '--',time.timezone[m
[31m-#print '--','Etc/GMT%+d' % (time.timezone / 3600)[m
[31m-#offsetHour = time.timezone / 3600[m
[31m-#return 'Etc/GMT%+d' % offsetHour[m
[1mdiff --git a/checknews_cron/cron.pyc b/checknews_cron/cron.pyc[m
[1mdeleted file mode 100644[m
[1mindex b91a689..0000000[m
Binary files a/checknews_cron/cron.pyc and /dev/null differ
[1mdiff --git a/checknews_cron/models.py b/checknews_cron/models.py[m
[1mdeleted file mode 100644[m
[1mindex 71a8362..0000000[m
[1m--- a/checknews_cron/models.py[m
[1m+++ /dev/null[m
[36m@@ -1,3 +0,0 @@[m
[31m-from django.db import models[m
[31m-[m
[31m-# Create your models here.[m
[1mdiff --git a/checknews_cron/models.pyc b/checknews_cron/models.pyc[m
[1mdeleted file mode 100644[m
[1mindex 05e98ce..0000000[m
Binary files a/checknews_cron/models.pyc and /dev/null differ
[1mdiff --git a/checknews_cron/tests.py b/checknews_cron/tests.py[m
[1mdeleted file mode 100644[m
[1mindex 7ce503c..0000000[m
[1m--- a/checknews_cron/tests.py[m
[1m+++ /dev/null[m
[36m@@ -1,3 +0,0 @@[m
[31m-from django.test import TestCase[m
[31m-[m
[31m-# Create your tests here.[m
[1mdiff --git a/checknews_cron/views.py b/checknews_cron/views.py[m
[1mdeleted file mode 100644[m
[1mindex 91ea44a..0000000[m
[1m--- a/checknews_cron/views.py[m
[1m+++ /dev/null[m
[36m@@ -1,3 +0,0 @@[m
[31m-from django.shortcuts import render[m
[31m-[m
[31m-# Create your views here.[m
[1mdiff --git a/django_cron/README.txt b/django_cron/README.txt[m
[1mdeleted file mode 100644[m
[1mindex cb0320b..0000000[m
[1m--- a/django_cron/README.txt[m
[1m+++ /dev/null[m
[36m@@ -1,54 +0,0 @@[m
[31m-= How to install djang-cron =[m
[31m-[m
[31m-1. Put 'django_cron' into your python path[m
[31m-[m
[31m-2. Add 'django_cron' to INSTALLED_APPS in your settings.py file[m
[31m-[m
[31m-3. Add the following code to the beginning of your urls.py file (just after the imports): [m
[31m-[m
[31m-	import django_cron[m
[31m-	django_cron.autodiscover()[m
[31m-[m
[31m-[m
[31m-4. Create a file called 'cron.py' inside each installed app that you want to add a recurring job to. The app must be installed via the INSTALLED_APPS in your settings.py or the autodiscover will not find it.[m
[31m-[m
[31m-=== Important note ===[m
[31m-[m
[31m-If you are using mod_python, you need to make sure your server is set up to server more than one request per instance, Otherwise it will kill django-cron before the tasks get started. The specific line to look for is in your 'httpd.conf' file:[m
[31m-[m
[31m-[m
[31m-	# THIS IS BAD!!! IT WILL CRIPPLE DJANGO-CRON[m
[31m-	MaxRequestsPerChild 1[m
[31m-[m
[31m-	[m
[31m-Change it to a value that is large enough that your cron jobs will get run at least once per instance. We're working on resolving this issue without dictating your server config. [m
[31m-[m
[31m-In the meantime, django_cron is best used to execute tasks that occur relatively often (at least once an hour). Try setting MaxRequestsPerChild to 50, 100, or 200[m
[31m-[m
[31m-	# Depending on traffic, and your server config, a number between 50 and 500 is probably good[m
[31m-	# Note: the higher this number, the more memory django is likely to use. Be careful on shared hosting[m
[31m-	MaxRequestsPerChild 100[m
[31m-[m
[31m-[m
[31m-== Example cron.py ==[m
[31m-[m
[31m-from django_cron import cronScheduler, Job[m
[31m-[m
[31m-# This is a function I wrote to check a feedback email address[m
[31m-# and add it to our database. Replace with your own imports[m
[31m-from MyMailFunctions import check_feedback_mailbox[m
[31m-[m
[31m-class CheckMail(Job):[m
[31m-	"""[m
[31m-	Cron Job that checks the lgr users mailbox and adds any [m
[31m-	approved senders' attachments to the db[m
[31m-	"""[m
[31m-[m
[31m-	# run every 300 seconds (5 minutes)[m
[31m-	run_every = 300[m
[31m-		[m
[31m-	def job(self):[m
[31m-		# This will be executed every 5 minutes[m
[31m-		check_feedback_mailbox()[m
[31m-[m
[31m-cronScheduler.register(CheckMail)[m
[1mdiff --git a/django_cron/__init__.py b/django_cron/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex b9a5fc5..0000000[m
[1m--- a/django_cron/__init__.py[m
[1m+++ /dev/null[m
[36m@@ -1,69 +0,0 @@[m
[31m-"""[m
[31m-Copyright (c) 2007-2008, Dj Gilcrease[m
[31m-All rights reserved.[m
[31m-[m
[31m-Permission is hereby granted, free of charge, to any person obtaining a copy[m
[31m-of this software and associated documentation files (the "Software"), to deal[m
[31m-in the Software without restriction, including without limitation the rights[m
[31m-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[31m-copies of the Software, and to permit persons to whom the Software is[m
[31m-furnished to do so, subject to the following conditions:[m
[31m-[m
[31m-The above copyright notice and this permission notice shall be included in[m
[31m-all copies or substantial portions of the Software.[m
[31m-[m
[31m-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[31m-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[31m-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[31m-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[31m-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[31m-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[31m-THE SOFTWARE.[m
[31m-"""[m
[31m-from threading import Timer[m
[31m-[m
[31m-from django.conf import settings[m
[31m-[m
[31m-from base import Job, cronScheduler[m
[31m-[m
[31m-polling_frequency = getattr(settings, "CRON_POLLING_FREQUENCY", 300)[m
[31m-[m
[31m-def autodiscover():[m
[31m-	"""[m
[31m-	Auto-discover INSTALLED_APPS cron.py modules and fail silently when[m
[31m-	not present. This forces an import on them to register any cron jobs they[m
[31m-	may want.[m
[31m-	"""[m
[31m-	import imp[m
[31m-	from django.conf import settings[m
[31m-[m
[31m-	for app in settings.INSTALLED_APPS:[m
[31m-		# For each app, we need to look for an cron.py inside that app's[m
[31m-		# package. We can't use os.path here -- recall that modules may be[m
[31m-		# imported different ways (think zip files) -- so we need to get[m
[31m-		# the app's __path__ and look for cron.py on that path.[m
[31m-[m
[31m-		# Step 1: find out the app's __path__ Import errors here will (and[m
[31m-		# should) bubble up, but a missing __path__ (which is legal, but weird)[m
[31m-		# fails silently -- apps that do weird things with __path__ might[m
[31m-		# need to roll their own cron registration.[m
[31m-		try:[m
[31m-			app_path = __import__(app, {}, {}, [app.split('.')[-1]]).__path__[m
[31m-		except AttributeError:[m
[31m-			continue[m
[31m-[m
[31m-		# Step 2: use imp.find_module to find the app's admin.py. For some[m
[31m-		# reason imp.find_module raises ImportError if the app can't be found[m
[31m-		# but doesn't actually try to import the module. So skip this app if[m
[31m-		# its admin.py doesn't exist[m
[31m-		try:[m
[31m-			imp.find_module('cron', app_path)[m
[31m-		except ImportError:[m
[31m-			continue[m
[31m-[m
[31m-		# Step 3: import the app's cron file. If this has errors we want them[m
[31m-		# to bubble up.[m
[31m-		__import__("%s.cron" % app)[m
[31m-		[m
[31m-	# Step 4: once we find all the cron jobs, start the cronScheduler[m
[31m-	Timer(polling_frequency, cronScheduler.execute).start()[m
\ No newline at end of file[m
[1mdiff --git a/django_cron/__init__.pyc b/django_cron/__init__.pyc[m
[1mdeleted file mode 100644[m
[1mindex 9195dab..0000000[m
Binary files a/django_cron/__init__.pyc and /dev/null differ
[1mdiff --git a/django_cron/base.orgi.py b/django_cron/base.orgi.py[m
[1mdeleted file mode 100644[m
[1mindex dbf0c3e..0000000[m
[1m--- a/django_cron/base.orgi.py[m
[1m+++ /dev/null[m
[36m@@ -1,127 +0,0 @@[m
[31m-"""[m
[31m-Copyright (c) 2007-2008, Dj Gilcrease[m
[31m-All rights reserved.[m
[31m-[m
[31m-Permission is hereby granted, free of charge, to any person obtaining a copy[m
[31m-of this software and associated documentation files (the "Software"), to deal[m
[31m-in the Software without restriction, including without limitation the rights[m
[31m-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[31m-copies of the Software, and to permit persons to whom the Software is[m
[31m-furnished to do so, subject to the following conditions:[m
[31m-[m
[31m-The above copyright notice and this permission notice shall be included in[m
[31m-all copies or substantial portions of the Software.[m
[31m-[m
[31m-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[31m-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[31m-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[31m-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[31m-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[31m-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[31m-THE SOFTWARE.[m
[31m-"""[m
[31m-import cPickle[m
[31m-from threading import Timer[m
[31m-from datetime import datetime[m
[31m-[m
[31m-from django.dispatch import dispatcher[m
[31m-from django.conf import settings[m
[31m-[m
[31m-from signals import cron_done[m
[31m-import models[m
[31m-[m
[31m-# how often to check if jobs are ready to be run (in seconds)[m
[31m-# in reality if you have a multithreaded server, it may get checked[m
[31m-# more often that this number suggests, so keep an eye on it...[m
[31m-# default value: 300 seconds == 5 min[m
[31m-polling_frequency = getattr(settings, "CRON_POLLING_FREQUENCY", 300)[m
[31m-[m
[31m-class Job(object):[m
[31m-	# 86400 seconds == 24 hours[m
[31m-	run_every = 86400[m
[31m-[m
[31m-	def run(self, *args, **kwargs):  [m
[31m-		self.job()[m
[31m-		cron_done.send(sender=self, *args, **kwargs)[m
[31m-		[m
[31m-	def job(self):[m
[31m-		"""[m
[31m-		Should be overridden (this way is cleaner, but the old way - overriding run() - will still work)[m
[31m-		"""[m
[31m-		pass[m
[31m-[m
[31m-class CronScheduler(object):[m
[31m-	def register(self, job_class, *args, **kwargs):[m
[31m-		"""[m
[31m-		Register the given Job with the scheduler class[m
[31m-		"""[m
[31m-		[m
[31m-		job_instance = job_class()[m
[31m-		[m
[31m-		if not isinstance(job_instance, Job):[m
[31m-			raise TypeError("You can only register a Job not a %r" % job_class)[m
[31m-[m
[31m-		job, created = models.Job.objects.get_or_create(name=str(job_instance.__class__))[m
[31m-		if created:[m
[31m-			job.instance = cPickle.dumps(job_instance)[m
[31m-		job.args = cPickle.dumps(args)[m
[31m-		job.kwargs = cPickle.dumps(kwargs)[m
[31m-		job.run_frequency = job_instance.run_every[m
[31m-		job.save()[m
[31m-[m
[31m-	def execute(self):[m
[31m-		"""[m
[31m-		Queue all Jobs for execution[m
[31m-		"""[m
[31m-		status, created = models.Cron.objects.get_or_create(pk=1)[m
[31m-		[m
[31m-		# This is important for 2 reasons:[m
[31m-		#     1. It keeps us for running more than one instance of the[m
[31m-		#        same job at a time[m
[31m-		#     2. It reduces the number of polling threads because they[m
[31m-		#        get killed off if they happen to check while another[m
[31m-		#        one is already executing a job (only occurs with[m
[31m-		#		 multi-threaded servers)[m
[31m-		if status.executing:[m
[31m-			return[m
[31m-[m
[31m-		status.executing = True[m
[31m-		try:[m
[31m-			status.save()[m
[31m-		except:[m
[31m-			# this will fail if you're debugging, so we want it[m
[31m-			# to fail silently and start the timer again so we [m
[31m-			# can pick up where we left off once debugging is done[m
[31m-			Timer(polling_frequency, self.execute).start()[m
[31m-			return[m
[31m-			[m
[31m-		jobs = models.Job.objects.all()[m
[31m-		for job in jobs:[m
[31m-			if job.queued:[m
[31m-				time_delta = datetime.now() - job.last_run[m
[31m-				if (time_delta.seconds + 86400*time_delta.days) > job.run_frequency:[m
[31m-					inst = cPickle.loads(str(job.instance))[m
[31m-					args = cPickle.loads(str(job.args))[m
[31m-					kwargs = cPickle.loads(str(job.kwargs))[m
[31m-					[m
[31m-					try:[m
[31m-						inst.run(*args, **kwargs)[m
[31m-						job.last_run = datetime.now()[m
[31m-						job.save()[m
[31m-						[m
[31m-					except Exception:[m
[31m-						# if the job throws an error, just remove it from[m
[31m-						# the queue. That way we can find/fix the error and[m
[31m-						# requeue the job manually[m
[31m-						job.queued = False[m
[31m-						job.save()[m
[31m-[m
[31m-		status.executing = False[m
[31m-		status.save()[m
[31m-		[m
[31m-		# Set up for this function to run again[m
[31m-		Timer(polling_frequency, self.execute).start()[m
[31m-[m
[31m-[m
[31m-cronScheduler = CronScheduler()[m
[31m-[m
[1mdiff --git a/django_cron/base.py b/django_cron/base.py[m
[1mdeleted file mode 100644[m
[1mindex bea01b3..0000000[m
[1m--- a/django_cron/base.py[m
[1m+++ /dev/null[m
[36m@@ -1,168 +0,0 @@[m
[31m-#coding=gbk[m
[31m-"""[m
[31m-Copyright (c) 2007-2008, Dj Gilcrease[m
[31m-All rights reserved.[m
[31m-[m
[31m-Permission is hereby granted, free of charge, to any person obtaining a copy[m
[31m-of this software and associated documentation files (the "Software"), to deal[m
[31m-in the Software without restriction, including without limitation the rights[m
[31m-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[31m-copies of the Software, and to permit persons to whom the Software is[m
[31m-furnished to do so, subject to the following conditions:[m
[31m-[m
[31m-The above copyright notice and this permission notice shall be included in[m
[31m-all copies or substantial portions of the Software.[m
[31m-[m
[31m-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[31m-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[31m-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[31m-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[31m-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[31m-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[31m-THE SOFTWARE.[m
[31m-"""[m
[31m-import cPickle[m
[31m-from threading import Timer[m
[31m-from datetime import datetime[m
[31m-import pytz[m
[31m-[m
[31m-from django.dispatch import dispatcher[m
[31m-from django.conf import settings[m
[31m-[m
[31m-from signals import cron_done[m
[31m-import models[m
[31m-[m
[31m-# how often to check if jobs are ready to be run (in seconds)[m
[31m-# in reality if you have a multithreaded server, it may get checked[m
[31m-# more often that this number suggests, so keep an eye on it...[m
[31m-# default value: 300 seconds == 5 min[m
[31m-polling_frequency = getattr(settings, "CRON_POLLING_FREQUENCY", 60*0.5)[m
[31m-debug = 1[m
[31m-[m
[31m-class Job(object):[m
[31m-    # 86400 seconds == 24 hours[m
[31m-    run_every = 86400[m
[31m-[m
[31m-    def run(self, *args, **kwargs):  [m
[31m-        self.job()[m
[31m-        cron_done.send(sender=self, *args, **kwargs)[m
[31m-        [m
[31m-    def job(self):[m
[31m-        """[m
[31m-        Should be overridden (this way is cleaner, but the old way - overriding run() - will still work)[m
[31m-        """[m
[31m-        pass[m
[31m-[m
[31m-class CronScheduler(object):[m
[31m-    def register(self, job_class, *args, **kwargs):[m
[31m-        """[m
[31m-        Register the given Job with the scheduler class[m
[31m-        """[m
[31m-        [m
[31m-        job_instance = job_class()[m
[31m-        [m
[31m-        if not isinstance(job_instance, Job):[m
[31m-            raise TypeError("You can only register a Job not a %r" % job_class)[m
[31m-[m
[31m-        job, created = models.Job.objects.get_or_create(name=str(job_instance.__class__))[m
[31m-        if created:[m
[31m-            job.instance = cPickle.dumps(job_instance)[m
[31m-        job.args = cPickle.dumps(args)[m
[31m-        job.kwargs = cPickle.dumps(kwargs)[m
[31m-        job.run_frequency = job_instance.run_every[m
[31m-        job.save()[m
[31m-[m
[31m-    def execute(self):[m
[31m-        """[m
[31m-        Queue all Jobs for execution[m
[31m-        """[m
[31m-        #print '--base.py > execute() is running...'[m
[31m-        status, created = models.Cron.objects.get_or_create(pk=1)[m
[31m-        [m
[31m-        # This is important for 2 reasons:[m
[31m-        #     1. It keeps us for running more than one instance of the[m
[31m-        #        same job at a time[m
[31m-        #     2. It reduces the number of polling threads because they[m
[31m-        #        get killed off if they happen to check while another[m
[31m-        #        one is already executing a job (only occurs with[m
[31m-        #         multi-threaded servers)[m
[31m-        if debug and status.executing==True :print '--base.py > status.executing:',status.executing,datetime.now()[m
[31m-        if status.executing:[m
[31m-            #print '--base.py > status.executing is True, return >>'[m
[31m-            return[m
[31m-[m
[31m-        status.executing = True[m
[31m-        try:[m
[31m-            status.save()[m
[31m-            pass[m
[31m-        except:[m
[31m-            # this will fail if you're debugging, so we want it[m
[31m-            # to fail silently and start the timer again so we [m
[31m-            # can pick up where we left off once debugging is done[m
[31m-            Timer(polling_frequency, self.execute).start()[m
[31m-            print '--base.py > status.save() exception'[m
[31m-            return[m
[31m-            [m
[31m-        jobs = models.Job.objects.all()[m
[31m-        #if debug: print '--base.py > len.jobs', len(jobs)[m
[31m-        for job in jobs:[m
[31m-            [m
[31m-            if debug and job.queued == 0: print '--          job.queued:',job.queued[m
[31m-            if job.queued:[m
[31m-[m
[31m-                # ´Ë´¦µÄÊ±¼ä¸ñÊ½(offset-native & offset-aware)ÓÐ¼«´óÓ°Ïì£¬Óësettings.pyµÄÉèÖÃ¸ß¶ÈÏà¹Ø¡£[m
[31m-[m
[31m-                #print '\ndatetime.now():',datetime.now()[m
[31m-                #print 'datetime.now(pytz.utc):',datetime.now(pytz.utc)[m
[31m-                #print 'job.last_run:',job.last_run[m
[31m-                #print dir(pytz.utc)[m
[31m-[m
[31m-                #USE_TZ = True£¨Á½Õß¶¼ÊÇoffset-aware£¬´øÊ±ÇøÐÅÏ¢)[m
[31m-                #time_delta = datetime.now(pytz.utc) - job.last_run[m
[31m-[m
[31m-                #USE_TZ = False£¨Á½Õß¶¼ÊÇoffset-native£¬²»´øÊ±ÇøÐÅÏ¢)[m
[31m-                time_delta = datetime.now() - job.last_run[m
[31m-                #print '--time_delta:',(time_delta.seconds + 86400*time_delta.days) [m
[31m-                #print '--', job.run_frequency[m
[31m-                if (time_delta.seconds + 86400*time_delta.days) > job.run_frequency:[m
[31m-                #if 1>0 :[m
[31m-                    if debug: print '\n--base.py > job start'[m
[31m-                    inst = cPickle.loads(str(job.instance))[m
[31m-                    args = cPickle.loads(str(job.args))[m
[31m-                    kwargs = cPickle.loads(str(job.kwargs))[m
[31m-                    [m
[31m-                    inst.run(*args, **kwargs)[m
[31m-                    job.last_run = datetime.now()[m
[31m-                    job.save()[m
[31m-[m
[31m-                    '''[m
[31m-                    try:[m
[31m-                        inst.run(*args, **kwargs)[m
[31m-                        job.last_run = datetime.now()[m
[31m-                        job.save()[m
[31m-                        [m
[31m-                    except Exception,e:[m
[31m-                        # if the job throws an error, just remove it from[m
[31m-                        # the queue. That way we can find/fix the error and[m
[31m-                        # requeue the job manually[m
[31m-                        print dir(e)[m
[31m-                        print e.__doc__[m
[31m-                        print '--run error'[m
[31m-                        #job.queued = False[m
[31m-                        job.save()[m
[31m-                        '''[m
[31m-                else:[m
[31m-                    if debug:[m
[31m-                        #print '--base.py > pass. time_delta:',(time_delta.seconds + 86400*time_delta.days) ,'/job.run_frequency:', job.run_frequency[m
[31m-                        pass[m
[31m-[m
[31m-[m
[31m-        status.executing = False[m
[31m-        status.save()[m
[31m-        [m
[31m-        # Set up for this function to run again[m
[31m-        Timer(polling_frequency, self.execute).start()[m
[31m-[m
[31m-[m
[31m-cronScheduler = CronScheduler()[m
[31m-[m
[1mdiff --git a/django_cron/base.pyc b/django_cron/base.pyc[m
[1mdeleted file mode 100644[m
[1mindex d53390e..0000000[m
Binary files a/django_cron/base.pyc and /dev/null differ
[1mdiff --git a/django_cron/models.py b/django_cron/models.py[m
[1mdeleted file mode 100644[m
[1mindex cfa6640..0000000[m
[1m--- a/django_cron/models.py[m
[1m+++ /dev/null[m
[36m@@ -1,39 +0,0 @@[m
[31m-"""[m
[31m-Copyright (c) 2007-2008, Dj Gilcrease[m
[31m-All rights reserved.[m
[31m-[m
[31m-Permission is hereby granted, free of charge, to any person obtaining a copy[m
[31m-of this software and associated documentation files (the "Software"), to deal[m
[31m-in the Software without restriction, including without limitation the rights[m
[31m-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[31m-copies of the Software, and to permit persons to whom the Software is[m
[31m-furnished to do so, subject to the following conditions:[m
[31m-[m
[31m-The above copyright notice and this permission notice shall be included in[m
[31m-all copies or substantial portions of the Software.[m
[31m-[m
[31m-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[31m-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[31m-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[31m-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[31m-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[31m-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[31m-THE SOFTWARE.[m
[31m-"""[m
[31m-from django.db import models[m
[31m-from datetime import datetime[m
[31m-[m
[31m-class Job(models.Model):[m
[31m-    name = models.CharField(max_length=100)[m
[31m-    [m
[31m-    # time between job runs (in seconds) // default: 1 day[m
[31m-    run_frequency = models.PositiveIntegerField(default=86400)[m
[31m-    last_run = models.DateTimeField(default=datetime.now())[m
[31m-    [m
[31m-    instance = models.TextField()[m
[31m-    args = models.TextField()[m
[31m-    kwargs = models.TextField()[m
[31m-    queued = models.BooleanField(default=True)[m
[31m-[m
[31m-class Cron(models.Model):[m
[31m-    executing = models.BooleanField(default=False)[m
\ No newline at end of file[m
[1mdiff --git a/django_cron/models.pyc b/django_cron/models.pyc[m
[1mdeleted file mode 100644[m
[1mindex 47344cb..0000000[m
Binary files a/django_cron/models.pyc and /dev/null differ
[1mdiff --git a/django_cron/signals.py b/django_cron/signals.py[m
[1mdeleted file mode 100644[m
[1mindex a836638..0000000[m
[1m--- a/django_cron/signals.py[m
[1m+++ /dev/null[m
[36m@@ -1,26 +0,0 @@[m
[31m-"""[m
[31m-Copyright (c) 2007-2008, Dj Gilcrease[m
[31m-All rights reserved.[m
[31m-[m
[31m-Permission is hereby granted, free of charge, to any person obtaining a copy[m
[31m-of this software and associated documentation files (the "Software"), to deal[m
[31m-in the Software without restriction, including without limitation the rights[m
[31m-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[31m-copies of the Software, and to permit persons to whom the Software is[m
[31m-furnished to do so, subject to the following conditions:[m
[31m-[m
[31m-The above copyright notice and this permission notice shall be included in[m
[31m-all copies or substantial portions of the Software.[m
[31m-[m
[31m-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[31m-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[31m-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[31m-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[31m-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[31m-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN[m
[31m-THE SOFTWARE.[m
[31m-"""[m
[31m-from django.dispatch import Signal[m
[31m-[m
[31m-cron_queued = Signal()[m
[31m-cron_done = Signal(providing_args=["job"])[m
\ No newline at end of file[m
[1mdiff --git a/django_cron/signals.pyc b/django_cron/signals.pyc[m
[1mdeleted file mode 100644[m
[1mindex 669fc8d..0000000[m
Binary files a/django_cron/signals.pyc and /dev/null differ
[1mdiff --git a/djangotasks/__init__.py b/djangotasks/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex c9460b2..0000000[m
[1m--- a/djangotasks/__init__.py[m
[1m+++ /dev/null[m
[36m@@ -1,95 +0,0 @@[m
[31m-#[m
[31m-# Copyright (c) 2010 by nexB, Inc. http://www.nexb.com/ - All rights reserved.[m
[31m-# [m
[31m-# Redistribution and use in source and binary forms, with or without modification,[m
[31m-# are permitted provided that the following conditions are met:[m
[31m-# [m
[31m-#     1. Redistributions of source code must retain the above copyright notice,[m
[31m-#        this list of conditions and the following disclaimer.[m
[31m-#    [m
[31m-#     2. Redistributions in binary form must reproduce the above copyright[m
[31m-#        notice, this list of conditions and the following disclaimer in the[m
[31m-#        documentation and/or other materials provided with the distribution.[m
[31m-# [m
[31m-#     3. Neither the names of Django, nexB, Django-tasks nor the names of the contributors may be used[m
[31m-#        to endorse or promote products derived from this software without[m
[31m-#        specific prior written permission.[m
[31m-# [m
[31m-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND[m
[31m-# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED[m
[31m-# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE[m
[31m-# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR[m
[31m-# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES[m
[31m-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;[m
[31m-# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON[m
[31m-# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT[m
[31m-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS[m
[31m-# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.[m
[31m-[m
[31m-[m
[31m-#[m
[31m-# Public API to use DjangoTasks.[m
[31m-#[m
[31m-# The functions below should be sufficient to work with djangotasks.[m
[31m-# Please enter bugs on http://code.google.com/p/django-tasks if you need anything more.[m
[31m-# This API is still work-in-progress: it may still change, although it is probably quite stable.[m
[31m-# [m
[31m-#[m
[31m-[m
[31m-[m
[31m-# The Task model is public, to load tasks and read their status, log, pid, timings...[m
[31m-from djangotasks.models import Task[m
[31m-[m
[31m-[m
[31m-def register_task(method, documentation, *required_methods):[m
[31m-    ''' Register a method of a model class as a task that can be executed asynchronously[m
[31m-[m
[31m-    The method must be an unbound method of a model class.[m
[31m-    '''[m
[31m-    Task.objects.register_task(method, documentation, *required_methods)[m
[31m-[m
[31m-[m
[31m-def tasks_for_object(object):[m
[31m-    ''' Return all the tasks that are registered for this model object.[m
[31m-[m
[31m-    The returned tasks can then be used for display information... or to be started.[m
[31m-    '''[m
[31m-    return Task.objects.tasks_for_object(object.__class__, object.pk)[m
[31m-[m
[31m-[m
[31m-def task_for_object(object_method):[m
[31m-    ''' Return the task for this object method.[m
[31m-[m
[31m-    The parameter must be the method of a bound object, not an unbound class method.[m
[31m-    This is a shortcut to calling tasks_for_object and selecting the task for the method[m
[31m-    '''[m
[31m-    return Task.objects.task_for_object(object_method.im_class, object_method.im_self.pk, object_method.im_func.__name__)[m
[31m-[m
[31m-[m
[31m-def task_for_function(function):[m
[31m-    ''' Create (or find, if has been created already) a task for this function. [m
[31m-[m
[31m-    Any package-level function that does not take any parameters can be run as a asynchronously. [m
[31m-    [m
[31m-    Contrary to model objects methods, functions do not need to be registered in order to be available as tasks.'''[m
[31m-    return Task.objects.task_for_function(function)[m
[31m-[m
[31m-[m
[31m-def run_task(task):[m
[31m-    ''' Runs the task. [m
[31m-    [m
[31m-    The task will be re-run (and the previous one archived) if it has already run. [m
[31m-    In that case, the object returned by run_task will be the new task.'''[m
[31m-    return Task.objects.run_task(task.pk)[m
[31m-[m
[31m-[m
[31m-def cancel_task(task):[m
[31m-    '''Cancels the task.[m
[31m-[m
[31m-    '''[m
[31m-    return Task.objects.cancel_task(task.pk)[m
[31m-[m
[31m-[m
[31m-def current_task():[m
[31m-    ''' In the proces that's executing a task, the task being executed. None in all other cases.'''[m
[31m-    return Task.objects.current_task[m
[1mdiff --git a/djangotasks/__init__.pyc b/djangotasks/__init__.pyc[m
[1mdeleted file mode 100644[m
[1mindex a0e45d3..0000000[m
Binary files a/djangotasks/__init__.pyc and /dev/null differ
[1mdiff --git a/djangotasks/admin.py b/djangotasks/admin.py[m
[1mdeleted file mode 100644[m
[1mindex 63e39f9..0000000[m
[1m--- a/djangotasks/admin.py[m
[1m+++ /dev/null[m
[36m@@ -1,39 +0,0 @@[m
[31m-#[m
[31m-# Copyright (c) 2010 by nexB, Inc. http://www.nexb.com/ - All rights reserved.[m
[31m-# [m
[31m-# Redistribution and use in source and binary forms, with or without modification,[m
[31m-# are permitted provided that the following conditions are met:[m
[31m-# [m
[31m-#     1. Redistributions of source code must retain the above copyright notice,[m
[31m-#        this list of conditions and the following disclaimer.[m
[31m-#    [m
[31m-#     2. Redistributions in binary form must reproduce the above copyright[m
[31m-#        notice, this list of conditions and the following disclaimer in the[m
[31m-#        documentation and/or other materials provided with the distribution.[m
[31m-# [m
[31m-#     3. Neither the names of Django, nexB, Django-tasks nor the names of the contributors may be used[m
[31m-#        to endorse or promote products derived from this software without[m
[31m-#        specific prior written permission.[m
[31m-# [m
[31m-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND[m
[31m-# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED[m
[31m-# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE[m
[31m-# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR[m
[31m-# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES[m
[31m-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;[m
[31m-# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON[m
[31m-# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT[m
[31m-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS[m
[31m-# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.[m
[31m-[m
[31m-from django.contrib import admin[m
[31m-from djangotasks.models import Task[m
[31m-[m
[31m-[m
[31m-class TaskAdmin(admin.ModelAdmin):[m
[31m-    list_display = ('model', 'method', 'object_id', 'start_date', 'end_date',[m
[31m-                    'duration', 'status_for_display', 'archived',)[m
[31m-    list_filter = ('method',)[m
[31m-    search_fields = ('object_id',)[m
[31m-    [m
[31m-admin.site.register(Task, TaskAdmin)[m
[1mdiff --git a/djangotasks/admin.pyc b/djangotasks/admin.pyc[m
[1mdeleted file mode 100644[m
[1mindex c875b68..0000000[m
Binary files a/djangotasks/admin.pyc and /dev/null differ
[1mdiff --git a/djangotasks/management/__init__.py b/djangotasks/management/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex 25b7f00..0000000[m
[1m--- a/djangotasks/management/__init__.py[m
[1m+++ /dev/null[m
[36m@@ -1,27 +0,0 @@[m
[31m-#[m
[31m-# Copyright (c) 2010 by nexB, Inc. http://www.nexb.com/ - All rights reserved.[m
[31m-# [m
[31m-# Redistribution and use in source and binary forms, with or without modification,[m
[31m-# are permitted provided that the following conditions are met:[m
[31m-# [m
[31m-#     1. Redistributions of source code must retain the above copyright notice,[m
[31m-#        this list of conditions and the following disclaimer.[m
[31m-#    [m
[31m-#     2. Redistributions in binary form must reproduce the above copyright[m
[31m-#        notice, this list of conditions and the following disclaimer in the[m
[31m-#        documentation and/or other materials provided with the distribution.[m
[31m-# [m
[31m-#     3. Neither the names of Django, nexB, Django-tasks nor the names of the contributors may be used[m
[31m-#        to endorse or promote products derived from this software without[m
[31m-#        specific prior written permission.[m
[31m-# [m
[31m-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND[m
[31m-# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED[m
[31m-# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE[m
[31m-# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR[m
[31m-# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES[m
[31m-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;[m
[31m-# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON[m
[31m-# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT[m
[31m-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS[m
[31m-# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.[m
[1mdiff --git a/djangotasks/management/__init__.pyc b/djangotasks/management/__init__.pyc[m
[1mdeleted file mode 100644[m
[1mindex fede788..0000000[m
Binary files a/djangotasks/management/__init__.pyc and /dev/null differ
[1mdiff --git a/djangotasks/management/commands/__init__.py b/djangotasks/management/commands/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex 25b7f00..0000000[m
[1m--- a/djangotasks/management/commands/__init__.py[m
[1m+++ /dev/null[m
[36m@@ -1,27 +0,0 @@[m
[31m-#[m
[31m-# Copyright (c) 2010 by nexB, Inc. http://www.nexb.com/ - All rights reserved.[m
[31m-# [m
[31m-# Redistribution and use in source and binary forms, with or without modification,[m
[31m-# are permitted provided that the following conditions are met:[m
[31m-# [m
[31m-#     1. Redistributions of source code must retain the above copyright notice,[m
[31m-#        this list of conditions and the following disclaimer.[m
[31m-#    [m
[31m-#     2. Redistributions in binary form must reproduce the above copyright[m
[31m-#        notice, this list of conditions and the following disclaimer in the[m
[31m-#        documentation and/or other materials provided with the distribution.[m
[31m-# [m
[31m-#     3. Neither the names of Django, nexB, Django-tasks nor the names of the contributors may be used[m
[31m-#        to endorse or promote products derived from this software without[m
[31m-#        specific prior written permission.[m
[31m-# [m
[31m-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND[m
[31m-# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED[m
[31m-# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE[m
[31m-# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR[m
[31m-# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES[m
[31m-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;[m
[31m-# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON[m
[31m-# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT[m
[31m-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS[m
[31m-# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.[m
[1mdiff --git a/djangotasks/management/commands/__init__.pyc b/djangotasks/management/commands/__init__.pyc[m
[1mdeleted file mode 100644[m
[1mindex ccd2720..0000000[m
Binary files a/djangotasks/management/commands/__init__.pyc and /dev/null differ
[1mdiff --git a/djangotasks/management/commands/runtask.py b/djangotasks/management/commands/runtask.py[m
[1mdeleted file mode 100644[m
[1mindex ab534f8..0000000[m
[1m--- a/djangotasks/management/commands/runtask.py[m
[1m+++ /dev/null[m
[36m@@ -1,73 +0,0 @@[m
[31m-#[m
[31m-# Copyright (c) 2010 by nexB, Inc. http://www.nexb.com/ - All rights reserved.[m
[31m-# [m
[31m-# Redistribution and use in source and binary forms, with or without modification,[m
[31m-# are permitted provided that the following conditions are met:[m
[31m-# [m
[31m-#     1. Redistributions of source code must retain the above copyright notice,[m
[31m-#        this list of conditions and the following disclaimer.[m
[31m-#    [m
[31m-#     2. Redistributions in binary form must reproduce the above copyright[m
[31m-#        notice, this list of conditions and the following disclaimer in the[m
[31m-#        documentation and/or other materials provided with the distribution.[m
[31m-# [m
[31m-#     3. Neither the names of Django, nexB, Django-tasks nor the names of the contributors may be used[m
[31m-#        to endorse or promote products derived from this software without[m
[31m-#        specific prior written permission.[m
[31m-# [m
[31m-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND[m
[31m-# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED[m
[31m-# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE[m
[31m-# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR[m
[31m-# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES[m
[31m-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;[m
[31m-# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON[m
[31m-# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT[m
[31m-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS[m
[31m-# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.[m
[31m-[m
[31m-import os[m
[31m-import sys[m
[31m-import logging[m
[31m-[m
[31m-from django.core.management.base import BaseCommand[m
[31m-[m
[31m-class Command(BaseCommand):[m
[31m-    args = "task_id"[m
[31m-    [m
[31m-    def handle(self, *args, **options):[m
[31m-        if len(args) != 1:[m
[31m-            self.print_help(sys.argv[0], sys.argv[1])[m
[31m-            return[m
[31m-            [m
[31m-        if 'DJANGOTASKS_TESTING' in os.environ:[m
[31m-            # In tests, we make sure that we are using the right database connection[m
[31m-            # This code is heavily inspired by BaseDatabaseCreation._create_test_db in django/db/backends/creation.py[m
[31m-            # (why doesn't Django provides this as a public method ??)[m
[31m-            from django.db import connections[m
[31m-            for alias in connections:[m
[31m-                connection = connections[alias][m
[31m-                connection.close()[m
[31m-                if connection.settings_dict['TEST_NAME']:[m
[31m-                    test_database_name = connection.settings_dict['TEST_NAME'][m
[31m-                else:[m
[31m-                    from django.db.backends.creation import TEST_DATABASE_PREFIX[m
[31m-                    test_database_name = TEST_DATABASE_PREFIX + connection.settings_dict['NAME'][m
[31m-                    [m
[31m-                connection.settings_dict["NAME"] = test_database_name[m
[31m-                if hasattr(connection.creation, '_rollback_works'):[m
[31m-                    # needed in Django 1.2, but not anymore in 1.3[m
[31m-                    can_rollback = connection.creation._rollback_works()[m
[31m-                    connection.settings_dict["SUPPORTS_TRANSACTIONS"] = can_rollback[m
[31m-[m
[31m-            # Also register the test model[m
[31m-            from djangotasks import tests[m
[31m-[m
[31m-        from djangotasks.models import Task, LOG[m
[31m-        # Ensure that task log messages will be sent to the standard output[m
[31m-        # thus caught in the task's log[m
[31m-        LOG.addHandler(logging.StreamHandler())[m
[31m-        LOG.setLevel(logging.INFO)[m
[31m-[m
[31m-        return Task.objects.exec_task(*args)[m
[31m-        [m
[1mdiff --git a/djangotasks/management/commands/runtask.pyc b/djangotasks/management/commands/runtask.pyc[m
[1mdeleted file mode 100644[m
[1mindex 855cf5b..0000000[m
Binary files a/djangotasks/management/commands/runtask.pyc and /dev/null differ
[1mdiff --git a/djangotasks/management/commands/taskd.py b/djangotasks/management/commands/taskd.py[m
[1mdeleted file mode 100644[m
[1mindex 9c0d48b..0000000[m
[1m--- a/djangotasks/management/commands/taskd.py[m
[1m+++ /dev/null[m
[36m@@ -1,168 +0,0 @@[m
[31m-#[m
[31m-# Copyright (c) 2010 by nexB, Inc. http://www.nexb.com/ - All rights reserved.[m
[31m-# [m
[31m-# Redistribution and use in source and binary forms, with or without modification,[m
[31m-# are permitted provided that the following conditions are met:[m
[31m-# [m
[31m-#     1. Redistributions of source code must retain the above copyright notice,[m
[31m-#        this list of conditions and the following disclaimer.[m
[31m-#    [m
[31m-#     2. Redistributions in binary form must reproduce the above copyright[m
[31m-#        notice, this list of conditions and the following disclaimer in the[m
[31m-#        documentation and/or other materials provided with the distribution.[m
[31m-# [m
[31m-#     3. Neither the names of Django, nexB, Django-tasks nor the names of the contributors may be used[m
[31m-#        to endorse or promote products derived from this software without[m
[31m-#        specific prior written permission.[m
[31m-# [m
[31m-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND[m
[31m-# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED[m
[31m-# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE[m
[31m-# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR[m
[31m-# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES[m
[31m-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;[m
[31m-# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON[m
[31m-# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT[m
[31m-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS[m
[31m-# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.[m
[31m-#[m
[31m-[m
[31m-import sys, time, os, atexit[m
[31m-import logging[m
[31m-from signal import SIGTERM[m
[31m-[m
[31m-[m
[31m-from django.core.management.base import BaseCommand[m
[31m-[m
[31m-from django.utils.daemonize import become_daemon[m
[31m-[m
[31m-LOG_FORMAT = '%(asctime)s %(process)d:%(name)s %(levelname)s: %(message)s'[m
[31m-LOG_DATEFMT = '%Y-%m-%d %H:%M:%S %Z'[m
[31m-[m
[31m-def _log_file():[m
[31m-    from django.conf import settings[m
[31m-    if hasattr(settings, 'TASKS_LOG_FILE'):[m
[31m-        return settings.TASKS_LOG_FILE[m
[31m-    else:[m
[31m-        return '/tmp/django-tasks.log'[m
[31m-[m
[31m-[m
[31m-[m
[31m-#[m
[31m-# This class is inspired by http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/ ,[m
[31m-# which was been put in the public domain by its author, Sander Marechal (http://www.jejik.com),[m
[31m-# see http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/#c6[m
[31m-# [m
[31m-#[m
[31m-[m
[31m-class Daemon:[m
[31m-    def __init__(self, pidfile):[m
[31m-        self.pidfile = pidfile[m
[31m-[m
[31m-    def daemonize(self):[m
[31m-        sys.stdout.flush()[m
[31m-        sys.stderr.flush()[m
[31m-        # TODO: give feedback to the user, on whether the daemon was started successfully,[m
[31m-        # i.e. verify that the daemon was started correctly.[m
[31m-        # This needs to be done in the *parent* process:[m
[31m-        # it  probably requires patching become_daemon, since we would have [m
[31m-        # to add some processing *before* the sys.exit() for the parent.[m
[31m-        # This processing (a callback function ?) would likely wait for a few seconds while checking for the creation of the pidfile,[m
[31m-        # then wait another few seconds that the pid actually continues existing: if it doesn't continue existing, [m
[31m-        # it would simply print an error.       [m
[31m-        become_daemon()[m
[31m-[m
[31m-        atexit.register(self._delpid)[m
[31m-        self._setpid()[m
[31m-[m
[31m-    def _delpid(self):[m
[31m-        try:[m
[31m-            os.remove(self.pidfile)[m
[31m-        except:[m
[31m-            pass[m
[31m-[m
[31m-    def _setpid(self):[m
[31m-        file(self.pidfile,'w+').write("%d\n" % os.getpid())[m
[31m-        [m
[31m-    def _getpid(self):[m
[31m-        try:[m
[31m-            pf = file(self.pidfile,'r')[m
[31m-            pid = int(pf.read().strip())[m
[31m-            pf.close()[m
[31m-        except IOError:[m
[31m-            pid = None[m
[31m-        return pid[m
[31m-[m
[31m-    def start(self):[m
[31m-        pid = self._getpid()[m
[31m-        if pid:[m
[31m-            try:[m
[31m-                os.getsid(pid)[m
[31m-                sys.stderr.write("Daemon already running.\n")[m
[31m-            except:[m
[31m-                sys.stderr.write("pidfile %s already exists, but daemon is not running. Delete pidfile and retry.\n" % self.pidfile)[m
[31m-            sys.exit(1)[m
[31m-    [m
[31m-        self.daemonize()[m
[31m-        self.run()[m
[31m-[m
[31m-    def stop(self):[m
[31m-        pid = self._getpid()[m
[31m-        if not pid:[m
[31m-            sys.stderr.write("pidfile %s does not exist, cannot stop daemon.\n" % self.pidfile)[m
[31m-            return # not an error in a restart[m
[31m-[m
[31m-        # TODO: maybe give feedback to the user, on whether the daemon was stopped successfully ?[m
[31m-        try:[m
[31m-            while 1:[m
[31m-                os.kill(pid, SIGTERM)[m
[31m-                time.sleep(0.1)[m
[31m-        except OSError, err:[m
[31m-            err = str(err)[m
[31m-            if err.find("No such process") > 0:[m
[31m-                if os.path.exists(self.pidfile):[m
[31m-                    os.remove(self.pidfile)[m
[31m-            else:[m
[31m-                print str(err)[m
[31m-                sys.exit(1)[m
[31m-[m
[31m-    def restart(self):[m
[31m-        self.stop()[m
[31m-        self.start()[m
[31m-[m
[31m-    def run(self):[m
[31m-        pass[m
[31m-[m
[31m-class TaskDaemon(Daemon):[m
[31m-    def run(self):[m
[31m-        from djangotasks.models import Task[m
[31m-        for handler in list(logging.getLogger().handlers):[m
[31m-            logging.getLogger().removeHandler(handler)[m
[31m-[m
[31m-        if _log_file():[m
[31m-            logging.basicConfig(level=logging.INFO,[m
[31m-                                format=LOG_FORMAT,[m
[31m-                                datefmt=LOG_DATEFMT,[m
[31m-                                filename=_log_file())[m
[31m-        else:[m
[31m-            logging.basicConfig(level=logging.INFO)[m
[31m-[m
[31m-        Task.objects.scheduler()[m
[31m-[m
[31m-class Command(BaseCommand):[m
[31m-    def handle(self, *args, **options):[m
[31m-        if len(args) == 1 and args[0] in ['start', 'stop', 'restart', 'run']:[m
[31m-[m
[31m-            if args[0] in ['start', 'restart']:[m
[31m-                if _log_file():[m
[31m-                    print "Logging to %s" % _log_file()[m
[31m-            elif args[0] == 'run':[m
[31m-                # when running, force logging to console only[m
[31m-                from django.conf import settings[m
[31m-                settings.TASKS_LOG_FILE = ''[m
[31m-                [m
[31m-            daemon = TaskDaemon(os.path.join(os.getenv('TEMP') if (os.name == 'nt') else '/tmp',[m
[31m-                                             'django-taskd.pid'))[m
[31m-            getattr(daemon, args[0])()[m
[31m-        else:[m
[31m-            return "Usage: %s %s start|stop|restart|run\n" % (sys.argv[0], sys.argv[1])[m
[1mdiff --git a/djangotasks/management/commands/taskd.pyc b/djangotasks/management/commands/taskd.pyc[m
[1mdeleted file mode 100644[m
[1mindex 0911400..0000000[m
Binary files a/djangotasks/management/commands/taskd.pyc and /dev/null differ
[1mdiff --git a/djangotasks/management/commands/taskstatus.py b/djangotasks/management/commands/taskstatus.py[m
[1mdeleted file mode 100644[m
[1mindex f3219bf..0000000[m
[1m--- a/djangotasks/management/commands/taskstatus.py[m
[1m+++ /dev/null[m
[36m@@ -1,42 +0,0 @@[m
[31m-#[m
[31m-# Copyright (c) 2010 by nexB, Inc. http://www.nexb.com/ - All rights reserved.[m
[31m-# [m
[31m-# Redistribution and use in source and binary forms, with or without modification,[m
[31m-# are permitted provided that the following conditions are met:[m
[31m-# [m
[31m-#     1. Redistributions of source code must retain the above copyright notice,[m
[31m-#        this list of conditions and the following disclaimer.[m
[31m-#    [m
[31m-#     2. Redistributions in binary form must reproduce the above copyright[m
[31m-#        notice, this list of conditions and the following disclaimer in the[m
[31m-#        documentation and/or other materials provided with the distribution.[m
[31m-# [m
[31m-#     3. Neither the names of Django, nexB, Django-tasks nor the names of the contributors may be used[m
[31m-#        to endorse or promote products derived from this software without[m
[31m-#        specific prior written permission.[m
[31m-# [m
[31m-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND[m
[31m-# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED[m
[31m-# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE[m
[31m-# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR[m
[31m-# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES[m
[31m-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;[m
[31m-# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON[m
[31m-# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT[m
[31m-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS[m
[31m-# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.[m
[31m-#[m
[31m-[m
[31m-import logging[m
[31m-[m
[31m-from django.core.management.base import BaseCommand[m
[31m-[m
[31m-class Command(BaseCommand):[m
[31m-    def handle(self, *args, **options):[m
[31m-[m
[31m-        from djangotasks.models import Task, LOG[m
[31m-[m
[31m-        LOG.addHandler(logging.StreamHandler())[m
[31m-        LOG.setLevel(logging.INFO)[m
[31m-        for t in Task.objects.filter(status__in=['scheduled', 'running'], archived=False):[m
[31m-            LOG.info('Task with id %s (%s) is %s' % (t.pk, t.method, t.status))[m
[1mdiff --git a/djangotasks/migrations/0001_initial.py b/djangotasks/migrations/0001_initial.py[m
[1mdeleted file mode 100644[m
[1mindex 8477a28..0000000[m
[1m--- a/djangotasks/migrations/0001_initial.py[m
[1m+++ /dev/null[m
[36m@@ -1,51 +0,0 @@[m
[31m-# encoding: utf-8[m
[31m-import datetime[m
[31m-from south.db import db[m
[31m-from south.v2 import SchemaMigration[m
[31m-from django.db import models[m
[31m-[m
[31m-class Migration(SchemaMigration):[m
[31m-[m
[31m-    def forwards(self, orm):[m
[31m-        [m
[31m-        # Adding model 'Task'[m
[31m-        db.create_table('djangotasks_task', ([m
[31m-            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),[m
[31m-            ('model', self.gf('django.db.models.fields.CharField')(max_length=200)),[m
[31m-            ('method', self.gf('django.db.models.fields.CharField')(max_length=200)),[m
[31m-            ('object_id', self.gf('django.db.models.fields.CharField')(max_length=200)),[m
[31m-            ('pid', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),[m
[31m-            ('start_date', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),[m
[31m-            ('end_date', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),[m
[31m-            ('status', self.gf('django.db.models.fields.CharField')(default='defined', max_length=200)),[m
[31m-            ('description', self.gf('django.db.models.fields.CharField')(default='', max_length=100, null=True, blank=True)),[m
[31m-            ('log', self.gf('django.db.models.fields.TextField')(default='', null=True, blank=True)),[m
[31m-            ('archived', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),[m
[31m-        ))[m
[31m-        db.send_create_signal('djangotasks', ['Task'])[m
[31m-[m
[31m-[m
[31m-    def backwards(self, orm):[m
[31m-        [m
[31m-        # Deleting model 'Task'[m
[31m-        db.delete_table('djangotasks_task')[m
[31m-[m
[31m-[m
[31m-    models = {[m
[31m-        'djangotasks.task': {[m
[31m-            'Meta': {'object_name': 'Task'},[m
[31m-            'archived': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),[m
[31m-            'description': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),[m
[31m-            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),[m
[31m-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),[m
[31m-            'log': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),[m
[31m-            'method': ('django.db.models.fields.CharField', [], {'max_length': '200'}),[m
[31m-            'model': ('django.db.models.fields.CharField', [], {'max_length': '200'}),[m
[31m-            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '200'}),[m
[31m-            'pid': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),[m
[31m-            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),[m
[31m-            'status': ('django.db.models.fields.CharField', [], {'default': "'defined'", 'max_length': '200'})[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    complete_apps = ['djangotasks'][m
[1mdiff --git a/djangotasks/migrations/0002_auto__add_functiontask.py b/djangotasks/migrations/0002_auto__add_functiontask.py[m
[1mdeleted file mode 100644[m
[1mindex 971e6b2..0000000[m
[1m--- a/djangotasks/migrations/0002_auto__add_functiontask.py[m
[1m+++ /dev/null[m
[36m@@ -1,45 +0,0 @@[m
[31m-# encoding: utf-8[m
[31m-import datetime[m
[31m-from south.db import db[m
[31m-from south.v2 import SchemaMigration[m
[31m-from django.db import models[m
[31m-[m
[31m-class Migration(SchemaMigration):[m
[31m-[m
[31m-    def forwards(self, orm):[m
[31m-        [m
[31m-        # Adding model 'FunctionTask'[m
[31m-        db.create_table('djangotasks_functiontask', ([m
[31m-            ('function_name', self.gf('django.db.models.fields.CharField')(max_length=400, primary_key=True)),[m
[31m-        ))[m
[31m-        db.send_create_signal('djangotasks', ['FunctionTask'])[m
[31m-[m
[31m-[m
[31m-    def backwards(self, orm):[m
[31m-        [m
[31m-        # Deleting model 'FunctionTask'[m
[31m-        db.delete_table('djangotasks_functiontask')[m
[31m-[m
[31m-[m
[31m-    models = {[m
[31m-        'djangotasks.functiontask': {[m
[31m-            'Meta': {'object_name': 'FunctionTask'},[m
[31m-            'function_name': ('django.db.models.fields.CharField', [], {'max_length': '400', 'primary_key': 'True'})[m
[31m-        },[m
[31m-        'djangotasks.task': {[m
[31m-            'Meta': {'object_name': 'Task'},[m
[31m-            'archived': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),[m
[31m-            'description': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),[m
[31m-            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),[m
[31m-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),[m
[31m-            'log': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),[m
[31m-            'method': ('django.db.models.fields.CharField', [], {'max_length': '200'}),[m
[31m-            'model': ('django.db.models.fields.CharField', [], {'max_length': '200'}),[m
[31m-            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '200'}),[m
[31m-            'pid': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),[m
[31m-            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),[m
[31m-            'status': ('django.db.models.fields.CharField', [], {'default': "'defined'", 'max_length': '200'})[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    complete_apps = ['djangotasks'][m
[1mdiff --git a/djangotasks/migrations/0003_auto__chg_field_functiontask_function_name.py b/djangotasks/migrations/0003_auto__chg_field_functiontask_function_name.py[m
[1mdeleted file mode 100644[m
[1mindex 4500141..0000000[m
[1m--- a/djangotasks/migrations/0003_auto__chg_field_functiontask_function_name.py[m
[1m+++ /dev/null[m
[36m@@ -1,42 +0,0 @@[m
[31m-# encoding: utf-8[m
[31m-import datetime[m
[31m-from south.db import db[m
[31m-from south.v2 import SchemaMigration[m
[31m-from django.db import models[m
[31m-[m
[31m-class Migration(SchemaMigration):[m
[31m-[m
[31m-    def forwards(self, orm):[m
[31m-        [m
[31m-        # Changing field 'FunctionTask.function_name'[m
[31m-        db.alter_column('djangotasks_functiontask', 'function_name', self.gf('django.db.models.fields.CharField')(max_length=255, primary_key=True))[m
[31m-[m
[31m-[m
[31m-    def backwards(self, orm):[m
[31m-        [m
[31m-        # Changing field 'FunctionTask.function_name'[m
[31m-        db.alter_column('djangotasks_functiontask', 'function_name', self.gf('django.db.models.fields.CharField')(max_length=400, primary_key=True))[m
[31m-[m
[31m-[m
[31m-    models = {[m
[31m-        'djangotasks.functiontask': {[m
[31m-            'Meta': {'object_name': 'FunctionTask'},[m
[31m-            'function_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'primary_key': 'True'})[m
[31m-        },[m
[31m-        'djangotasks.task': {[m
[31m-            'Meta': {'object_name': 'Task'},[m
[31m-            'archived': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),[m
[31m-            'description': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),[m
[31m-            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),[m
[31m-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),[m
[31m-            'log': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),[m
[31m-            'method': ('django.db.models.fields.CharField', [], {'max_length': '200'}),[m
[31m-            'model': ('django.db.models.fields.CharField', [], {'max_length': '200'}),[m
[31m-            'object_id': ('django.db.models.fields.CharField', [], {'max_length': '200'}),[m
[31m-            'pid': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),[m
[31m-            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),[m
[31m-            'status': ('django.db.models.fields.CharField', [], {'default': "'defined'", 'max_length': '200'})[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    complete_apps = ['djangotasks'][m
[1mdiff --git a/djangotasks/migrations/__init__.py b/djangotasks/migrations/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex e69de29..0000000[m
[1mdiff --git a/djangotasks/models.py b/djangotasks/models.py[m
[1mdeleted file mode 100644[m
[1mindex 4a3fee2..0000000[m
[1m--- a/djangotasks/models.py[m
[1m+++ /dev/null[m
[36m@@ -1,553 +0,0 @@[m
[31m-#[m
[31m-# Copyright (c) 2010 by nexB, Inc. http://www.nexb.com/ - All rights reserved.[m
[31m-# [m
[31m-# Redistribution and use in source and binary forms, with or without modification,[m
[31m-# are permitted provided that the following conditions are met:[m
[31m-# [m
[31m-#     1. Redistributions of source code must retain the above copyright notice,[m
[31m-#        this list of conditions and the following disclaimer.[m
[31m-#    [m
[31m-#     2. Redistributions in binary form must reproduce the above copyright[m
[31m-#        notice, this list of conditions and the following disclaimer in the[m
[31m-#        documentation and/or other materials provided with the distribution.[m
[31m-# [m
[31m-#     3. Neither the names of Django, nexB, Django-tasks nor the names of the contributors may be used[m
[31m-#        to endorse or promote products derived from this software without[m
[31m-#        specific prior written permission.[m
[31m-# [m
[31m-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND[m
[31m-# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED[m
[31m-# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE[m
[31m-# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR[m
[31m-# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES[m
[31m-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;[m
[31m-# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON[m
[31m-# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT[m
[31m-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS[m
[31m-# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.[m
[31m-[m
[31m-import os[m
[31m-import time[m
[31m-import sys[m
[31m-import time[m
[31m-import subprocess[m
[31m-import logging[m
[31m-[m
[31m-from hyz import apihelper[m
[31m-[m
[31m-[m
[31m-from django.db import models[m
[31m-from django.conf import settings[m
[31m-from datetime import datetime[m
[31m-from os.path import join, exists, dirname, abspath[m
[31m-from collections import defaultdict[m
[31m-from django.db import transaction, connection[m
[31m-from django.utils.encoding import smart_unicode[m
[31m-[m
[31m-from djangotasks import signals[m
[31m-[m
[31m-LOG = logging.getLogger("djangotasks")[m
[31m-[m
[31m-def _get_model_name(model_class):[m
[31m-    return smart_unicode(model_class._meta)[m
[31m-[m
[31m-def _get_model_class(model_name):[m
[31m-    #print '__doc__',models.get_model.__doc__[m
[31m-    model = models.get_model(*model_name.split("."))[m
[31m-    if model == None:[m
[31m-        raise Exception("%s is not a registered model, cannot use this task" % model_name)[m
[31m-    return model[m
[31m-[m
[31m-[m
[31m-class TaskManager(models.Manager):[m
[31m-    '''The TaskManager class is not for public use. [m
[31m-[m
[31m-[m
[31m-    The package-level API should be sufficient to use django-tasks.[m
[31m-    '''[m
[31m-[m
[31m-[m
[31m-    # The only real role of DEFINED_TASKS, in fact, is to keep track of the *current* list of dependent tasks for each task.[m
[31m-    # If we were to accept the fact that, when upgrading application code and changing the dependencies of tasks,[m
[31m-    # it is acceptable that the tasks that already exist in the DB will still use the "old" set of dependencies,[m
[31m-    # then we could store the list of dependencies as a field in the Task object, [m
[31m-    # and DEFINED_TASKS wouldn't be needed anymore. I'm still hesitating a little between the two solutions.[m
[31m-    DEFINED_TASKS = defaultdict(list)[m
[31m-[m
[31m-    # When executing a task, the current task being executed. [m
[31m-    # Since only one task is executed per process, this can be a static.[m
[31m-    current_task = None[m
[31m-[m
[31m-    def register_task(self, method, documentation, *required_methods):[m
[31m-        import inspect[m
[31m-        if not inspect.ismethod(method):[m
[31m-            raise Exception(repr(method) + " is not a class method")[m
[31m-        model = _get_model_name(method.im_class)[m
[31m-        if len(required_methods) == 1 and required_methods[0].__class__ in [list, tuple]:[m
[31m-            required_methods = required_methods[0][m
[31m-[m
[31m-        for required_method in required_methods:[m
[31m-            if not inspect.ismethod(required_method):[m
[31m-                raise Exception(repr(required_method) + " is not a class method")[m
[31m-            if required_method.im_func.__name__ not in [method_name for method_name, _, _ in TaskManager.DEFINED_TASKS[model]]:[m
[31m-                raise Exception(repr(required_method) + " is not registered as a task method for model " + model)[m
[31m-            [m
[31m-        TaskManager.DEFINED_TASKS[model].append((method.im_func.__name__, [m
[31m-                                                 documentation if documentation else '',[m
[31m-                                                 ','.join(required_method.im_func.__name__ [m
[31m-                                                          for required_method in required_methods)))[m
[31m-        print 'TaskManager.DEFINED_TASKS.__len__:',len(TaskManager.DEFINED_TASKS)[m
[31m-[m
[31m-    def task_for_object(self, the_class, object_id, method, status_in=None):[m
[31m-        model = _get_model_name(the_class)[m
[31m-        #print '\n---------------------------------models.py---task_for_object() is start---'[m
[31m-        #print ' models.task_for_object.model:',model[m
[31m-        #print ' models.task_for_object.the_class:',the_class[m
[31m-[m
[31m-        if method not in [m for m, _, _ in TaskManager.DEFINED_TASKS[model]]:[m
[31m-            raise Exception("Method '%s' not registered for model '%s'" % (method, model))[m
[31m-[m
[31m-        taskdef = [taskdef for taskdef in TaskManager.DEFINED_TASKS[model] [m
[31m-                   if taskdef[0] == method][0][m
[31m-[m
[31m-        if not status_in:[m
[31m-            status_in = dict(STATUS_TABLE).keys()[m
[31m-            [m
[31m-        from django.core.exceptions import MultipleObjectsReturned[m
[31m-        '''print '----model:',model[m
[31m-        print '----method:',method[m
[31m-        print '----object_id:',object_id[m
[31m-        print '----status__in:',status_in'''[m
[31m-        try:[m
[31m-            task, created = self.get_or_create(model=model, [m
[31m-                                               method=method,[m
[31m-                                               object_id=str(object_id),[m
[31m-                                               status__in=status_in,[m
[31m-                                               archived=False)[m
[31m-        except MultipleObjectsReturned, e:[m
[31m-            LOG.exception("Integrity error: multiple non-archived tasks, should not occur. Attempting recovery by archiving all tasks for this object and method, and recreating them")[m
[31m-            objects = self.filter(model=model, [m
[31m-                                  method=method,[m
[31m-                                  object_id=str(object_id),[m
[31m-                                  status__in=status_in,[m
[31m-                                  archived=False).update(archived=True)[m
[31m-            task, created = self.get_or_create(model=model, [m
[31m-                                               method=method,[m
[31m-                                               object_id=str(object_id),[m
[31m-                                               status__in=status_in,[m
[31m-                                               archived=False)[m
[31m-[m
[31m-        if created:[m
[31m-            self.filter(pk=task.pk).update(description=taskdef[1])[m
[31m-[m
[31m-        LOG.debug("Created task %d on model=%s, method=%s, object_id=%s", task.id, model, method, object_id)[m
[31m-        #print '\n---------------------------------models.py---task_for_object() is end---'[m
[31m-        return self.get(pk=task.pk)[m
[31m-[m
[31m-    def tasks_for_object(self, the_class, object_id):[m
[31m-        model = _get_model_name(the_class)[m
[31m-[m
[31m-        return [self.task_for_object(the_class, object_id, method)[m
[31m-                for method, _, _ in TaskManager.DEFINED_TASKS[model]][m
[31m-            [m
[31m-    def task_for_function(self, function):[m
[31m-        function_name = _to_function_name(function)[m
[31m-        function_task = FunctionTask.objects.get_or_create(function_name=function_name)[m
[31m-        return self.task_for_object(FunctionTask, function_name,[m
[31m-                                    FunctionTask.run_function_task.func_name)[m
[31m-[m
[31m-    def run_task(self, pk):[m
[31m-        task = self.get(pk=pk)[m
[31m-        self._run_required_tasks(task)[m
[31m-        if task.status in ["scheduled", "running"]:[m
[31m-            return task[m
[31m-        if task.status in ["requested_cancel"]:        [m
[31m-            raise Exception("Task currently being cancelled, cannot run again")[m
[31m-        if task.status in ["cancelled", "successful", "unsuccessful"]:[m
[31m-            task = self._create_task(task.model, [m
[31m-                                     task.method, [m
[31m-                                     task.object_id)[m
[31m-            [m
[31m-        self.filter(pk=task.pk).update(status="scheduled")[m
[31m-        return self.get(pk=task.pk)[m
[31m-[m
[31m-    def _run_required_tasks(self, task):[m
[31m-        for required_task in task.get_required_tasks():[m
[31m-            self._run_required_tasks(required_task)[m
[31m-[m
[31m-            if required_task.status in ['scheduled', 'successful', 'running']:[m
[31m-                continue[m
[31m-            [m
[31m-            if required_task.status == 'requested_cancel':[m
[31m-                raise Exception("Required task being cancelled, please try again")[m
[31m-[m
[31m-            if required_task.status in ['cancelled', 'unsuccessful']:[m
[31m-                # re-run it[m
[31m-                required_task = self._create_task(required_task.model, [m
[31m-                                                  required_task.method, [m
[31m-                                                  required_task.object_id)[m
[31m-[m
[31m-            required_task.status = "scheduled"[m
[31m-            required_task.save()[m
[31m-            [m
[31m-    def cancel_task(self, pk):[m
[31m-        task = self.get(pk=pk)[m
[31m-        if task.status not in ["scheduled", "running"]:[m
[31m-            raise Exception("Cannot cancel task that has not been scheduled or is not running")[m
[31m-[m
[31m-        # If the task is still scheduled, mark it requested for cancellation also:[m
[31m-        # if it is currently starting, that's OK, it'll stay marked as "requested_cancel" in mark_start[m
[31m-        self._set_status(pk, "requested_cancel", ["scheduled", "running"])[m
[31m-[m
[31m-[m
[31m-    # The methods below are for internal use on the server. Don't use them directly.[m
[31m-    def _create_task(self, model, method, object_id):[m
[31m-        return Task.objects.task_for_object(_get_model_class(model), object_id, method, [m
[31m-                                            ["defined", "scheduled", "running", "requested_cancel"])[m
[31m-[m
[31m-    def append_log(self, pk, log):[m
[31m-        if log:[m
[31m-            # not possible to make it completely atomic in Django, it seems[m
[31m-            rowcount = self.filter(pk=pk).update(log=(self.get(pk=pk).log + log))[m
[31m-            if rowcount == 0:[m
[31m-                raise Exception(("Failed to save log for task %d, task does not exist; log was:\n" % pk) + log)[m
[31m-[m
[31m-    def mark_start(self, pk, pid):[m
[31m-        # Set the start information in all cases: That way, if it has been set[m
[31m-        # to "requested_cancel" already, it will be cancelled at the next loop of the scheduler[m
[31m-        rowcount = self.filter(pk=pk).update(pid=pid, start_date=datetime.now())[m
[31m-        if rowcount == 0:[m
[31m-            raise Exception("Failed to mark task with ID %d as started, task does not exist" % pk)[m
[31m-[m
[31m-    def _set_status(self, pk, new_status, existing_status):[m
[31m-        if isinstance(existing_status, str):[m
[31m-            existing_status = [ existing_status ][m
[31m-            [m
[31m-        if existing_status:[m
[31m-            rowcount = self.filter(pk=pk).filter(status__in=existing_status).update(status=new_status)[m
[31m-        else:[m
[31m-            rowcount = self.filter(pk=pk).update(status=new_status)[m
[31m-        if rowcount == 0:[m
[31m-            LOG.warning('Failed to change status from %s to "%s" for task %s',[m
[31m-                        "or".join('"' + status + '"' for status in existing_status) if existing_status else '(any)',[m
[31m-                        new_status, pk)[m
[31m-[m
[31m-        return rowcount != 0[m
[31m-[m
[31m-    def mark_finished(self, pk, new_status, existing_status):[m
[31m-        rowcount = self.filter(pk=pk).filter(status=existing_status).update(status=new_status, end_date=datetime.now())[m
[31m-        if rowcount == 0:[m
[31m-            LOG.warning('Failed to mark tasked as finished, from status "%s" to "%s" for task %s. May have been finished in a different thread already.',[m
[31m-                        existing_status, new_status, pk)[m
[31m-        else:[m
[31m-            LOG.info('Task %s finished with status "%s"', pk, new_status)[m
[31m-            # Sending a task completion Signal including the task and the object[m
[31m-            task = self.get(pk=pk)[m
[31m-            object = _get_model_class(task.model).objects.get(pk=task.object_id)[m
[31m-            signals.task_completed.send(sender=self, task=task, object=object)[m
[31m-    [m
[31m-    # This is for use in the scheduler only. Don't use it directly.[m
[31m-    def exec_task(self, task_id):[m
[31m-        if self.current_task:[m
[31m-            raise Exception("Task already running running in process")[m
[31m-        try:[m
[31m-            self.current_task = self.get(pk=task_id)[m
[31m-[m
[31m-            the_class = _get_model_class(self.current_task.model)[m
[31m-            object = the_class.objects.get(pk=self.current_task.object_id)[m
[31m-            the_method =  getattr(object, self.current_task.method)[m
[31m-[m
[31m-            the_method()[m
[31m-        finally:[m
[31m-            import sys[m
[31m-            sys.stdout.flush()[m
[31m-            sys.stderr.flush()[m
[31m-    [m
[31m-    # This is for use in the scheduler only. Don't use it directly[m
[31m-    def scheduler(self):[m
[31m-        # Run once to ensure exiting if something is wrong[m
[31m-        try:[m
[31m-            self._do_schedule()[m
[31m-        except:[m
[31m-            LOG.fatal("Failed to start scheduler due to exception", exc_info=1)[m
[31m-            return[m
[31m-[m
[31m-        LOG.info("Scheduler started")[m
[31m-        while True:[m
[31m-            # Loop time must be enough to let the threads that may have be started call mark_start[m
[31m-            time.sleep(5)[m
[31m-            try:[m
[31m-                self._do_schedule()[m
[31m-            except:[m
[31m-                LOG.exception("Scheduler exception")[m
[31m-[m
[31m-    def _do_schedule(self):[m
[31m-        # First cancel any task that needs to be cancelled...[m
[31m-        tasks = self.filter(status="requested_cancel",[m
[31m-                            archived=False)[m
[31m-        for task in tasks:[m
[31m-            LOG.info("Cancelling task %d...", task.pk)[m
[31m-            task._do_cancel()[m
[31m-            LOG.info("...Task %d cancelled.", task.pk)[m
[31m-[m
[31m-        # ... Then start any new task[m
[31m-        tasks = self.filter(status="scheduled",[m
[31m-                            archived=False)[m
[31m-        for task in tasks:[m
[31m-            # only run if all the required tasks have been successful[m
[31m-            if any(required_task.status == "unsuccessful"[m
[31m-                   for required_task in task.get_required_tasks()):[m
[31m-                task.status = "unsuccessful"[m
[31m-                task.save()[m
[31m-                continue[m
[31m-[m
[31m-            if all(required_task.status == "successful"[m
[31m-                   for required_task in task.get_required_tasks()):[m
[31m-                LOG.info("Starting task %s...", task.pk)[m
[31m-                task.do_run()[m
[31m-                LOG.info("...Task %s started.", task.pk)[m
[31m-                # only start one task at a time[m
[31m-                break[m
[31m-[m
[31m-STATUS_TABLE = [('defined', 'ready to run'),[m
[31m-                ('scheduled', 'scheduled'),[m
[31m-                ('running', 'in progress',),[m
[31m-                ('requested_cancel', 'cancellation requested'),[m
[31m-                ('cancelled', 'cancelled'),[m
[31m-                ('successful', 'finished successfully'),[m
[31m-                ('unsuccessful', 'failed'),[m
[31m-                ][m
[31m-[m
[31m-          [m
[31m-class Task(models.Model):[m
[31m-[m
[31m-    model = models.CharField(max_length=200)[m
[31m-    method = models.CharField(max_length=200)[m
[31m-    [m
[31m-    object_id = models.CharField(max_length=200)[m
[31m-    pid = models.IntegerField(null=True, blank=True)[m
[31m-[m
[31m-    start_date = models.DateTimeField(null=True, blank=True)[m
[31m-    end_date = models.DateTimeField(null=True, blank=True)[m
[31m-[m
[31m-    status = models.CharField(max_length=200,[m
[31m-                              default="defined",[m
[31m-                              choices=STATUS_TABLE,[m
[31m-                              )[m
[31m-    description = models.CharField(max_length=100, default='', null=True, blank=True)[m
[31m-    log = models.TextField(default='', null=True, blank=True)[m
[31m-[m
[31m-    archived = models.BooleanField(default=False) # for history[m
[31m-[m
[31m-    def __unicode__(self):[m
[31m-        return u'%s - %s.%s.%s' % (self.id, self.model.split('.')[-1], self.object_id, self.method)[m
[31m-[m
[31m-    def status_string(self):[m
[31m-        return dict(STATUS_TABLE)[self.status][m
[31m-[m
[31m-    def status_for_display(self):[m
[31m-        return '<span class="%s">%s</span>' % (self.status, self.status_string())[m
[31m-[m
[31m-    status_for_display.allow_tags = True[m
[31m-    status_for_display.admin_order_field = 'status'[m
[31m-    status_for_display.short_description = 'Status'[m
[31m-[m
[31m-    def complete_log(self, directly_required_only=False):[m
[31m-        return '\n'.join([required_task.formatted_log() [m
[31m-                          for required_task in self._unique_required_tasks(directly_required_only)])[m
[31m-[m
[31m-    def get_required_tasks(self):[m
[31m-        taskdef = self._get_task_definition()[m
[31m-        return [Task.objects.task_for_object(_get_model_class(self.model), self.object_id, method)[m
[31m-                for method in taskdef[2].split(',') if method] if taskdef else [][m
[31m-    [m
[31m-    def can_run(self):[m
[31m-        return self.status not in ["scheduled", "running", "requested_cancel", ] #"successful"[m
[31m-[m
[31m-    def formatted_log(self):[m
[31m-        from django.utils.dateformat import format[m
[31m-        FORMAT = "N j, Y \\a\\t P T"[m
[31m-        if self.status in ['cancelled', 'successful', 'unsuccessful']:[m
[31m-            return (self.description + ' started' + ((' on ' + format(self.start_date, FORMAT)) if self.start_date else '') +[m
[31m-                    (("\n" + self.log) if self.log else "") + "\n" +[m
[31m-                    self.description + ' ' + self.status_string() + ((' on ' + format(self.end_date, FORMAT)) if self.end_date else '') +[m
[31m-                    (' (%s)' % self.duration if self.duration else ''))[m
[31m-        elif self.status in ['running', 'requested_cancel']:[m
[31m-            return (self.description + ' started' + ((' on ' + format(self.start_date, FORMAT)) if self.start_date else '') +[m
[31m-                    (("\n" + self.log) if self.log else "") + "\n" +[m
[31m-                    self.description + ' ' + self.status_string())[m
[31m-        else:[m
[31m-            return self.description + ' ' +  self.status_string()[m
[31m-                    [m
[31m-    # Only for use by the manager: do not call directly, except in tests[m
[31m-    def do_run(self):[m
[31m-        if self.status != "scheduled":[m
[31m-            raise Exception("Task not scheduled, cannot run again")[m
[31m-[m
[31m-        def exec_thread():[m
[31m-            returncode = -1[m
[31m-            try:[m
[31m-                # Do not start if it's not marked as scheduled[m
[31m-                # This ensures that we can have multiple schedulers[m
[31m-                if not Task.objects._set_status(self.pk, "running", "scheduled"):[m
[31m-                    return[m
[31m-                # execute the managemen utility, with the same python path as the current process[m
[31m-                env = dict(os.environ)[m
[31m-                env['PYTHONPATH'] = os.pathsep.join(sys.path)[m
[31m-                proc = subprocess.Popen([sys.executable, [m
[31m-                                         '-c',[m
[31m-                                         'from django.core.management import ManagementUtility; ManagementUtility().execute()',[m
[31m-                                         'runtask', [m
[31m-                                         str(self.pk),[m
[31m-                                         ],[m
[31m-                                        stdout=subprocess.PIPE,[m
[31m-                                        stderr=subprocess.STDOUT,[m
[31m-                                        close_fds=(os.name != 'nt'), [m
[31m-                                        env=env)[m
[31m-                Task.objects.mark_start(self.pk, proc.pid)[m
[31m-                buf = ''[m
[31m-                t = time.time()[m
[31m-                while proc.poll() is None:[m
[31m-                    line = proc.stdout.readline()[m
[31m-                    buf += line[m
[31m-[m
[31m-                    if (time.time() - t > 1): # Save the log once every second max[m
[31m-                        Task.objects.append_log(self.pk, buf)[m
[31m-                        buf = ''[m
[31m-                        t = time.time()[m
[31m-                Task.objects.append_log(self.pk, buf)[m
[31m-                [m
[31m-                # Need to continue reading for a while: sometimes we miss some output[m
[31m-                buf = ''[m
[31m-                while True:[m
[31m-                    line = proc.stdout.readline()[m
[31m-                    if not line:[m
[31m-                        break[m
[31m-                    buf += line[m
[31m-                Task.objects.append_log(self.pk, buf)[m
[31m-[m
[31m-                returncode = proc.returncode[m
[31m-[m
[31m-            except Exception, e:[m
[31m-                LOG.exception("Exception in calling thread for task %s", self.pk)[m
[31m-                import traceback[m
[31m-                stack = traceback.format_exc()[m
[31m-                try:[m
[31m-                    Task.objects.append_log(self.pk, "Exception in calling thread: " + str(e) + "\n" + stack)[m
[31m-                except Exception, ee:[m
[31m-                    LOG.exception("Second exception while trying to save the first exception to the log for task %s!", self.pk)[m
[31m-[m
[31m-            Task.objects.mark_finished(self.pk,[m
[31m-                                       "successful" if returncode == 0 else "unsuccessful",[m
[31m-                                       "running")[m
[31m-            [m
[31m-        import thread[m
[31m-        thread.start_new_thread(exec_thread, ())[m
[31m-[m
[31m-    def _do_cancel(self):[m
[31m-        if self.status != "requested_cancel":[m
[31m-            raise Exception("Cannot cancel task if not requested")[m
[31m-[m
[31m-        try:[m
[31m-            if not self.pid:[m
[31m-                # This can happen if the task was only scheduled when it was cancelled.[m
[31m-                # There could be risk that the task starts *while* we are cancelling it, [m
[31m-                # and we will mark it as cancelled, but in fact the process will not have been killed/[m
[31m-                # However, it won't happen because (in the scheduler loop) we *wait* after starting tasks, [m
[31m-                # and before cancelling them. So no need it'll happen synchronously.[m
[31m-                return[m
[31m-                [m
[31m-            import signal[m
[31m-            os.kill(self.pid, signal.SIGTERM)[m
[31m-        except OSError, e:[m
[31m-            # could happen if the process *just finished*. Fail cleanly[m
[31m-            raise Exception('Failed to cancel task model=%s, method=%s, object=%s: %s' % (self.model, self.method, self.object_id, str(e)))[m
[31m-        finally:[m
[31m-            Task.objects.mark_finished(self.pk, "cancelled", "requested_cancel")[m
[31m-[m
[31m-    def _unique_required_tasks(self, directly_required_only=False):[m
[31m-        unique_required_tasks = [][m
[31m-        for required_task in self.get_required_tasks():[m
[31m-            if directly_required_only:[m
[31m-                if required_task not in unique_required_tasks:[m
[31m-                    unique_required_tasks.append(required_task)[m
[31m-            else:[m
[31m-                for unique_required_task in required_task._unique_required_tasks():[m
[31m-                    if unique_required_task not in unique_required_tasks:[m
[31m-                        unique_required_tasks.append(unique_required_task)[m
[31m-        if self not in unique_required_tasks:[m
[31m-            unique_required_tasks.append(self)[m
[31m-        return unique_required_tasks[m
[31m-[m
[31m-    def save(self, *args, **kwargs):[m
[31m-        if not self.pk:[m
[31m-            self._find_method() # will raise an exception if the method of this task is not registered[m
[31m-            [m
[31m-            # time to archive the old ones[m
[31m-            Task.objects.filter(model=self.model, [m
[31m-                                method=self.method,[m
[31m-                                object_id=self.object_id,[m
[31m-                                archived=False).update(archived=True)[m
[31m-[m
[31m-        super(Task, self).save(*args, **kwargs)[m
[31m-[m
[31m-    def _get_task_definition(self):[m
[31m-        if self.model not in TaskManager.DEFINED_TASKS:[m
[31m-            LOG.warning("A task on model=%s exists in the database, but is not defined in the code", self.model)[m
[31m-            return None[m
[31m-        taskdefs = [taskdef for taskdef in TaskManager.DEFINED_TASKS[self.model] if taskdef[0] == self.method][m
[31m-        if len(taskdefs) == 0:[m
[31m-            LOG.debug("A task on model=%s and method=%s exists in the database, but is not defined in the code", self.model, self.method)[m
[31m-            return None[m
[31m-        return taskdefs[0][m
[31m-[m
[31m-    def _find_method(self):[m
[31m-        the_class = _get_model_class(self.model)[m
[31m-        object = the_class.objects.get(pk=self.object_id)[m
[31m-        return getattr(object, self.method)[m
[31m-[m
[31m-    def _compute_duration(self):[m
[31m-        if self.start_date and self.end_date:[m
[31m-            delta = self.end_date - self.start_date[m
[31m-            min, sec = divmod((delta.days * 86400) + delta.seconds, 60)[m
[31m-            hour, min = divmod(min, 60)[m
[31m-            str = ((hour, 'hour'), (min, 'minute'), (sec, 'second'))[m
[31m-            return ', '.join(['%d %s%s' % (x[0], x[1],'s' if x[0] > 1 else '')[m
[31m-                              for x in str if (x[0] > 0)])[m
[31m-[m
[31m-    duration = property(_compute_duration)[m
[31m-            [m
[31m-    objects = TaskManager()[m
[31m-[m
[31m-def _to_function_name(function):[m
[31m-    import inspect[m
[31m-    if not inspect.isfunction(function):[m
[31m-        raise Exception(repr(function) + " is not a function")[m
[31m-    return function.__module__ + '.' + function.__name__[m
[31m-[m
[31m-[m
[31m-def _to_function(function_name):[m
[31m-    module_segments = function_name.split('.')[m
[31m-    module = __import__('.'.join(module_segments[:-1]))[m
[31m-    for segment in module_segments[1:]:[m
[31m-        module = getattr(module, segment)[m
[31m-    return module[m
[31m-[m
[31m-[m
[31m-class FunctionTask(models.Model):[m
[31m-    function_name = models.CharField(max_length=255,[m
[31m-                                     primary_key=True)[m
[31m-    def run_function_task(self):[m
[31m-        function = _to_function(self.function_name)[m
[31m-        return function()[m
[31m-[m
[31m-Task.objects.register_task(FunctionTask.run_function_task, "Run a function task")[m
[31m-[m
[31m-[m
[31m-if 'DJANGOTASK_DAEMON_THREAD' in dir(settings) and settings.DJANGOTASK_DAEMON_THREAD:[m
[31m-    import logging[m
[31m-    logging.getLogger().addHandler(logging.StreamHandler())[m
[31m-    logging.getLogger().setLevel(logging.INFO)[m
[31m-[m
[31m-    import thread[m
[31m-    thread.start_new_thread(Task.objects.scheduler, ())[m
[1mdiff --git a/djangotasks/models.pyc b/djangotasks/models.pyc[m
[1mdeleted file mode 100644[m
[1mindex d115186..0000000[m
Binary files a/djangotasks/models.pyc and /dev/null differ
[1mdiff --git a/djangotasks/signals.py b/djangotasks/signals.py[m
[1mdeleted file mode 100644[m
[1mindex 833ed93..0000000[m
[1m--- a/djangotasks/signals.py[m
[1m+++ /dev/null[m
[36m@@ -1,31 +0,0 @@[m
[31m-#[m
[31m-# Copyright (c) 2011 by nexB, Inc. http://www.nexb.com/ - All rights reserved.[m
[31m-# [m
[31m-# Redistribution and use in source and binary forms, with or without modification,[m
[31m-# are permitted provided that the following conditions are met:[m
[31m-# [m
[31m-#     1. Redistributions of source code must retain the above copyright notice,[m
[31m-#        this list of conditions and the following disclaimer.[m
[31m-#    [m
[31m-#     2. Redistributions in binary form must reproduce the above copyright[m
[31m-#        notice, this list of conditions and the following disclaimer in the[m
[31m-#        documentation and/or other materials provided with the distribution.[m
[31m-# [m
[31m-#     3. Neither the names of Django, nexB, Django-tasks nor the names of the contributors may be used[m
[31m-#        to endorse or promote products derived from this software without[m
[31m-#        specific prior written permission.[m
[31m-# [m
[31m-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND[m
[31m-# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED[m
[31m-# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE[m
[31m-# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR[m
[31m-# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES[m
[31m-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;[m
[31m-# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON[m
[31m-# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT[m
[31m-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS[m
[31m-# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.[m
[31m-[m
[31m-from django.dispatch import Signal[m
[31m-[m
[31m-task_completed = Signal(providing_args=["task", "object"])[m
[1mdiff --git a/djangotasks/signals.pyc b/djangotasks/signals.pyc[m
[1mdeleted file mode 100644[m
[1mindex 179f830..0000000[m
Binary files a/djangotasks/signals.pyc and /dev/null differ
[1mdiff --git a/djangotasks/tests.py b/djangotasks/tests.py[m
[1mdeleted file mode 100644[m
[1mindex a393f25..0000000[m
[1m--- a/djangotasks/tests.py[m
[1m+++ /dev/null[m
[36m@@ -1,695 +0,0 @@[m
[31m-#[m
[31m-# Copyright (c) 2010 by nexB, Inc. http://www.nexb.com/ - All rights reserved.[m
[31m-# [m
[31m-# Redistribution and use in source and binary forms, with or without modification,[m
[31m-# are permitted provided that the following conditions are met:[m
[31m-# [m
[31m-#     1. Redistributions of source code must retain the above copyright notice,[m
[31m-#        this list of conditions and the following disclaimer.[m
[31m-#    [m
[31m-#     2. Redistributions in binary form must reproduce the above copyright[m
[31m-#        notice, this list of conditions and the following disclaimer in the[m
[31m-#        documentation and/or other materials provided with the distribution.[m
[31m-# [m
[31m-#     3. Neither the names of Django, nexB, Django-tasks nor the names of the contributors may be used[m
[31m-#        to endorse or promote products derived from this software without[m
[31m-#        specific prior written permission.[m
[31m-# [m
[31m-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND[m
[31m-# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED[m
[31m-# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE[m
[31m-# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR[m
[31m-# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES[m
[31m-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;[m
[31m-# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON[m
[31m-# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT[m
[31m-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS[m
[31m-# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.[m
[31m-[m
[31m-from __future__ import with_statement [m
[31m-[m
[31m-import sys[m
[31m-import StringIO[m
[31m-import os[m
[31m-import unittest[m
[31m-import tempfile[m
[31m-import time[m
[31m-import inspect[m
[31m-import logging[m
[31m-from os.path import join, dirname, basename, exists, join[m
[31m-[m
[31m-import re[m
[31m-DATETIME_REGEX = re.compile('([a-zA-Z]+[.]? \d+\, \d\d\d\d at \d+(\:\d+)? [ap]\.m\. [A-Z]{1,5})|( \((\d+ hour(s)?(, )?)?(\d+ minute(s)?(, )?)?(\d+ second(s)?(, )?)?\))')[m
[31m-[m
[31m-from django.db import models[m
[31m-[m
[31m-import djangotasks[m
[31m-from djangotasks import Task[m
[31m-[m
[31m-class LogCheck(object):[m
[31m-    def __init__(self, test, expected_log = None, fail_if_different=True):[m
[31m-        self.test = test[m
[31m-        self.expected_log = expected_log or ''[m
[31m-        self.fail_if_different = fail_if_different[m
[31m-        [m
[31m-    def __enter__(self):[m
[31m-        from djangotasks.models import LOG[m
[31m-        self.loghandlers = LOG.handlers[m
[31m-        LOG.handlers = [][m
[31m-        self.log = StringIO.StringIO()[m
[31m-        test_handler = logging.StreamHandler(self.log)[m
[31m-        test_handler.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))[m
[31m-        LOG.addHandler(test_handler)[m
[31m-        [m
[31m-    def __exit__(self, type, value, traceback):[m
[31m-        # Restore state[m
[31m-        from djangotasks.models import LOG[m
[31m-[m
[31m-        self.loghandlers = LOG.handlers[m
[31m-[m
[31m-        # Check the output only if no exception occured (to avoid "eating" test failures)[m
[31m-        if type:[m
[31m-            return[m
[31m-        [m
[31m-        if self.fail_if_different:[m
[31m-            self.test.assertEquals(self.expected_log, self.log.getvalue())[m
[31m-[m
[31m-[m
[31m-class TestModel(models.Model):[m
[31m-[m
[31m-    key = models.CharField([m
[31m-        unique=True,[m
[31m-        primary_key=True,[m
[31m-        max_length = 90,[m
[31m-    )[m
[31m-[m
[31m-[m
[31m-    def _run(self, trigger_name, sleep=0.2):[m
[31m-        print "running %s" % trigger_name[m
[31m-        sys.stdout.flush()[m
[31m-        time.sleep(sleep)[m
[31m-        self._trigger(trigger_name)[m
[31m-[m
[31m-    def run_something_long(self, msg=''):[m
[31m-        self._run("run_something_long_1", 0.0) # trigger right away, [m
[31m-        time.sleep(0.2) # then sleep[m
[31m-        self._run("run_something_long_2")[m
[31m-        return "finished"[m
[31m-    [m
[31m-    def run_something_else(self):[m
[31m-        pass[m
[31m-[m
[31m-    def run_something_failing(self):[m
[31m-        self._run("run_something_failing")[m
[31m-        raise Exception("Failed !")[m
[31m-[m
[31m-    def run_something_with_required(self):[m
[31m-        self._run("run_something_with_required")[m
[31m-        return "finished required"[m
[31m-[m
[31m-    def run_something_with_required_failing(self):[m
[31m-        self._run("run_something_with_required")[m
[31m-        return "finished required"[m
[31m-[m
[31m-    def run_something_with_two_required(self):[m
[31m-        self._run("run_something_with_two_required")[m
[31m-        return "finished run_something_with_two_required"[m
[31m-[m
[31m-    def run_something_with_required_with_two_required(self):[m
[31m-        self._run("run_something_with_required_with_two_required")[m
[31m-        return "finished required with required"[m
[31m-[m
[31m-    def run_a_method_that_is_not_registered(self):[m
[31m-        # not called in the tests[m
[31m-        pass[m
[31m-[m
[31m-    def run_something_fast(self):[m
[31m-        self._run("run_something_fast", 0.1)[m
[31m-[m
[31m-    def check_database_settings(self):[m
[31m-        from django.db import connection[m
[31m-        print connection.settings_dict["NAME"][m
[31m-        time.sleep(0.1)[m
[31m-        self._trigger("check_database_settings")[m
[31m-[m
[31m-    def _trigger(self, event):[m
[31m-        open(self.pk + event, 'w').writelines(["."])[m
[31m-[m
[31m-TESTMODEL_NAME = unicode(TestModel._meta)[m
[31m-[m
[31m-def _start_message(task):[m
[31m-    return "INFO: Starting task " + str(task.pk) + "...\nINFO: ...Task " + str(task.pk) + " started.\n" [m
[31m-    [m
[31m-def _test_function():[m
[31m-    print "running _test_function"[m
[31m-[m
[31m-TEST_DEFINED_TASKS = [[m
[31m-    ('run_something_long', "Run a successful task", ''),[m
[31m-    ('run_something_else', "Run an empty task", ''),[m
[31m-    ('run_something_failing', "Run a failing task", ''),[m
[31m-    ('run_something_with_required', "Run a task with a required task", 'run_something_long'),[m
[31m-    ('run_something_with_two_required', "Run a task with two required task", 'run_something_long,run_something_with_required'),[m
[31m-    ('run_something_fast', "Run a fast task", ''),[m
[31m-    ('run_something_with_required_failing', "Run a task with a required task that fails", 'run_something_failing'),[m
[31m-    ('run_something_with_required_with_two_required', "Run a task with a required task that has a required task", "run_something_with_two_required"),[m
[31m-    ('check_database_settings', "Checks the database settings", ''),[m
[31m-    ][m
[31m-[m
[31m-class TasksTestCase(unittest.TestCase):[m
[31m-    def failUnlessRaises(self, excClassOrInstance, callableObj, *args, **kwargs):[m
[31m-        # improved method compared to unittest.TestCase.failUnlessRaises:[m
[31m-        # also check the content of the exception[m
[31m-        if inspect.isclass(excClassOrInstance):[m
[31m-            return unittest.TestCase.failUnlessRaises(self, excClassOrInstance, callableObj, *args, **kwargs)[m
[31m-[m
[31m-        excClass = excClassOrInstance.__class__[m
[31m-        try:[m
[31m-            callableObj(*args, **kwargs)[m
[31m-        except excClass, e:[m
[31m-            self.assertEquals(str(excClassOrInstance), str(e))[m
[31m-        else:[m
[31m-            if hasattr(excClass,'__name__'): excName = excClass.__name__[m
[31m-            else: excName = str(excClass)[m
[31m-            raise self.failureException, "%s not raised" % excName[m
[31m-[m
[31m-    assertRaises = failUnlessRaises[m
[31m-[m
[31m-    def setUp(self):[m
[31m-        from djangotasks.models import TaskManager[m
[31m-        TaskManager.DEFINED_TASKS['djangotasks.testmodel'] = TEST_DEFINED_TASKS[m
[31m-        [m
[31m-        import tempfile[m
[31m-        self.tempdir = tempfile.mkdtemp()[m
[31m-        import os[m
[31m-        os.environ['DJANGOTASKS_TESTING'] = "YES"[m
[31m-[m
[31m-    def tearDown(self):[m
[31m-        from djangotasks.models import TaskManager[m
[31m-        del TaskManager.DEFINED_TASKS['djangotasks.testmodel'][m
[31m-        for task in Task.objects.filter(model='djangotasks.testmodel'):[m
[31m-            task.delete()[m
[31m-        import shutil[m
[31m-        shutil.rmtree(self.tempdir)[m
[31m-        import os[m
[31m-        del os.environ['DJANGOTASKS_TESTING'][m
[31m-        [m
[31m-    #  This may be needed for databases that can't share transactions (connections) accross threads (sqlite in particular):[m
[31m-    #  the tests tasks may need to be commited before the execution thread is started, which require transaction.commit to actually *do* the commit --[m
[31m-    #  and the original "_fixture_setup" causes "transaction.commit" to be transformed into a "nop" !!![m
[31m-    #def _fixture_setup(self):[m
[31m-    #    pass[m
[31m-    #def _fixture_teardown(self):[m
[31m-    #    pass[m
[31m-[m
[31m-    def test__to_function_name(self):[m
[31m-        from djangotasks.models import _to_function_name[m
[31m-        self.assertEquals('djangotasks.tests._test_function', _to_function_name(_test_function))[m
[31m-[m
[31m-    def test__to_function(self):[m
[31m-        from djangotasks.models import _to_function[m
[31m-        self.assertEquals(_test_function, _to_function('djangotasks.tests._test_function'))[m
[31m-[m
[31m-    def test_run_task_function(self):[m
[31m-        task = djangotasks.task_for_function(_test_function)[m
[31m-        task = djangotasks.run_task(task)[m
[31m-        self.assertEquals("scheduled", task.status)[m
[31m-        with LogCheck(self, _start_message(task)):[m
[31m-            Task.objects._do_schedule()[m
[31m-        i = 0[m
[31m-        while i < 100: # 20 seconds should be enough[m
[31m-            i += 1[m
[31m-            time.sleep(0.2)[m
[31m-            task = Task.objects.get(pk=task.pk)[m
[31m-            if task.status == "successful":[m
[31m-                break[m
[31m-[m
[31m-        self.assertEquals("successful", task.status)[m
[31m-        self.assertEquals("running _test_function\n", task.log)[m
[31m-        [m
[31m-[m
[31m-    def test__get_model_class(self):[m
[31m-        from djangotasks.models import _get_model_class[m
[31m-        self.assertEquals(TestModel, _get_model_class('djangotasks.testmodel'))[m
[31m-[m
[31m-    def test__get_model_name(self):[m
[31m-        from djangotasks.models import _get_model_name[m
[31m-        self.assertEquals('djangotasks.testmodel', _get_model_name(TestModel))[m
[31m-[m
[31m-    def _tasks_for_object(self, object_id):        [m
[31m-        key = join(self.tempdir, object_id)[m
[31m-        object, _ = TestModel.objects.get_or_create(pk=key)[m
[31m-        return djangotasks.tasks_for_object(object)[m
[31m-[m
[31m-[m
[31m-    def _task_for_object(self, method, object_id):[m
[31m-        key = join(self.tempdir, object_id)[m
[31m-        object, _ = method.im_class.objects.get_or_create(pk=key)[m
[31m-        return djangotasks.task_for_object(getattr(object, method.func_name))[m
[31m-[m
[31m-    def test_tasks_invalid_method(self):[m
[31m-        self.assertRaises(Exception("Method 'run_a_method_that_is_not_registered' not registered for model '%s'" % TESTMODEL_NAME),[m
[31m-                          self._task_for_object, TestModel.run_a_method_that_is_not_registered, 'key1')[m
[31m-[m
[31m-        class NotAValidModel(object):[m
[31m-            def a_method(self):[m
[31m-                pass[m
[31m-        self.assertRaises(Exception("type object 'NotAValidModel' has no attribute 'objects'"), [m
[31m-                          self._task_for_object, NotAValidModel.a_method, 'key1')[m
[31m-            [m
[31m-    def test_tasks_register(self):[m
[31m-        class MyClass(object):[m
[31m-            _meta = "djangotasks.myclass"[m
[31m-            def mymethod1(self):[m
[31m-                pass[m
[31m-[m
[31m-            def mymethod2(self):[m
[31m-                pass[m
[31m-            [m
[31m-            def mymethod3(self):[m
[31m-                pass[m
[31m-                [m
[31m-            def mymethod4(self):[m
[31m-                pass[m
[31m-[m
[31m-            def mymethod5(self):[m
[31m-                pass[m
[31m-                [m
[31m-        from djangotasks.models import TaskManager[m
[31m-        try:[m
[31m-            djangotasks.register_task(MyClass.mymethod1, '''Some documentation''')[m
[31m-            djangotasks.register_task(MyClass.mymethod2, '''Some other documentation''', MyClass.mymethod1)[m
[31m-            djangotasks.register_task(MyClass.mymethod3, None, MyClass.mymethod1, MyClass.mymethod2)[m
[31m-            djangotasks.register_task(MyClass.mymethod4, None, [MyClass.mymethod1, MyClass.mymethod2])[m
[31m-            djangotasks.register_task(MyClass.mymethod5, None, (MyClass.mymethod1, MyClass.mymethod2))[m
[31m-            self.assertEquals([('mymethod1', 'Some documentation', ''), [m
[31m-                               ('mymethod2', 'Some other documentation', 'mymethod1'),[m
[31m-                               ('mymethod3', '', 'mymethod1,mymethod2'),[m
[31m-                               ('mymethod4', '', 'mymethod1,mymethod2'),[m
[31m-                               ('mymethod5', '', 'mymethod1,mymethod2'),                               [m
[31m-                              ],[m
[31m-                              TaskManager.DEFINED_TASKS['djangotasks.myclass'])[m
[31m-        finally:[m
[31m-            del TaskManager.DEFINED_TASKS['djangotasks.myclass'][m
[31m-[m
[31m-    def _wait_until(self, key, event):[m
[31m-        max = 20 # 20 seconds; on slow, loaded machines (especially Macs), a lower value doesn't seem to be enough[m
[31m-        while not exists(join(self.tempdir, key + event)) and max:[m
[31m-            time.sleep(0.1)[m
[31m-            max -= 0.1[m
[31m-        if not max:[m
[31m-            self.fail("Timeout on key=%s, event=%s" % (key, event))[m
[31m-        [m
[31m-    def _reset(self, key, event):[m
[31m-        os.remove(join(self.tempdir, key + event))[m
[31m-[m
[31m-    def _assert_status(self, expected_status, task):[m
[31m-        task = Task.objects.get(pk=task.pk)[m
[31m-        self.assertEquals(expected_status, task.status)[m
[31m-[m
[31m-    def test_tasks_run_successful(self):[m
[31m-        task = self._task_for_object(TestModel.run_something_long, 'key1')[m
[31m-        djangotasks.run_task(task)[m
[31m-        self._check_running('key1', task, None, 'run_something_long_2',[m
[31m-                            u'running run_something_long_1\nrunning run_something_long_2\n')[m
[31m-[m
[31m-    def test_tasks_run_check_database(self):[m
[31m-        task = self._task_for_object(TestModel.check_database_settings, 'key1')[m
[31m-        djangotasks.run_task(task)[m
[31m-        from django.db import connection[m
[31m-        self._check_running('key1', task, None, 'check_database_settings', [m
[31m-                            connection.settings_dict["NAME"] + u'\n') # May fail if your Django settings define a different test database for each run: in which case you should modify it, to ensure it's always the same.[m
[31m-[m
[31m-    def test_tasks_run_with_space_fast(self):[m
[31m-        task = self._task_for_object(TestModel.run_something_fast, 'key with space')[m
[31m-        djangotasks.run_task(task)[m
[31m-        self._check_running('key with space', task, None, 'run_something_fast', [m
[31m-                            u'running run_something_fast\n')[m
[31m-[m
[31m-    def test_tasks_run_cancel_running(self):[m
[31m-        task = self._task_for_object(TestModel.run_something_long, 'key1')[m
[31m-        djangotasks.run_task(task)[m
[31m-        with LogCheck(self, _start_message(task)):[m
[31m-            Task.objects._do_schedule()[m
[31m-        self._wait_until('key1', "run_something_long_1")[m
[31m-        djangotasks.cancel_task(task)[m
[31m-        output_check = LogCheck(self, fail_if_different=False)[m
[31m-        with output_check:[m
[31m-            Task.objects._do_schedule()[m
[31m-            time.sleep(0.3)[m
[31m-        self.assertTrue(("Cancelling task " + str(task.pk) + "...") in output_check.log.getvalue())[m
[31m-        self.assertTrue("cancelled.\n" in output_check.log.getvalue())[m
[31m-        #self.assertTrue('INFO: failed to mark tasked as finished, from status "running" to "unsuccessful" for task 3. May have been finished in a different thread already.\n'[m
[31m-        #                in output_check.log.getvalue())[m
[31m-[m
[31m-        new_task = Task.objects.get(pk=task.pk)[m
[31m-        self.assertEquals("cancelled", new_task.status)[m
[31m-        self.assertTrue(u'running run_something_long_1' in new_task.log)[m
[31m-        self.assertFalse(u'running run_something_long_2' in new_task.log)[m
[31m-        self.assertFalse('finished' in new_task.log)[m
[31m-[m
[31m-    def test_tasks_run_cancel_scheduled(self):[m
[31m-        task = self._task_for_object(TestModel.run_something_long, 'key1')[m
[31m-        with LogCheck(self):[m
[31m-            Task.objects._do_schedule()[m
[31m-        djangotasks.run_task(task)[m
[31m-        djangotasks.cancel_task(task)[m
[31m-        with LogCheck(self, "INFO: Cancelling task " + str(task.pk) + "...\nINFO: Task " + str(task.pk) + " finished with status \"cancelled\"\nINFO: ...Task " + str(task.pk) + " cancelled.\n"):[m
[31m-            Task.objects._do_schedule()[m
[31m-        new_task = Task.objects.get(pk=task.pk)[m
[31m-        self.assertEquals("cancelled", new_task.status)            [m
[31m-        self.assertEquals("", new_task.log)[m
[31m-[m
[31m-    def test_tasks_run_failing(self):[m
[31m-        task = self._task_for_object(TestModel.run_something_failing, 'key1')[m
[31m-        djangotasks.run_task(task)[m
[31m-        with LogCheck(self, _start_message(task)):[m
[31m-            Task.objects._do_schedule()[m
[31m-        self._wait_until('key1', "run_something_failing")[m
[31m-        time.sleep(0.5)[m
[31m-        new_task = Task.objects.get(pk=task.pk)[m
[31m-        self.assertEquals("unsuccessful", new_task.status)[m
[31m-        self.assertTrue(u'running run_something_failing' in new_task.log)[m
[31m-        self.assertTrue(u'raise Exception("Failed !")' in new_task.log)[m
[31m-        self.assertTrue(u'Exception: Failed !' in new_task.log)[m
[31m-    [m
[31m-    def test_tasks_get_tasks_for_object(self):[m
[31m-        tasks = self._tasks_for_object('key2')[m
[31m-        self.assertEquals(len(TEST_DEFINED_TASKS), len(tasks))[m
[31m-        self.assertEquals('defined', tasks[0].status)[m
[31m-        self.assertEquals('defined', tasks[1].status)[m
[31m-        self.assertEquals('run_something_long', tasks[0].method)[m
[31m-        self.assertEquals('run_something_else', tasks[1].method)[m
[31m-[m
[31m-    def test_tasks_get_task_for_object(self):[m
[31m-        task = self._task_for_object(TestModel.run_something_long, 'key2')[m
[31m-        self.assertEquals('defined', task.status)[m
[31m-        self.assertEquals('run_something_long', task.method)[m
[31m-[m
[31m-    def test_tasks_get_task_for_object_required(self):[m
[31m-        task = self._task_for_object(TestModel.run_something_with_two_required, 'key-more')[m
[31m-        self.assertEquals(['run_something_long', 'run_something_with_required'], [m
[31m-                          [required_task.method for required_task in task.get_required_tasks()])[m
[31m-        [m
[31m-    def test_tasks_archive_task(self):[m
[31m-        tasks = self._tasks_for_object('key3')[m
[31m-        task = tasks[0][m
[31m-        self.assertTrue(task.pk)[m
[31m-        task.status = 'successful'[m
[31m-        task.save()[m
[31m-        self.assertEquals(False, task.archived)[m
[31m-        new_task = djangotasks.run_task(task)[m
[31m-        [m
[31m-        self.assertTrue(new_task.pk)[m
[31m-        self.assertTrue(task.pk != new_task.pk)[m
[31m-        old_task = Task.objects.get(pk=task.pk)[m
[31m-        self.assertEquals(True, old_task.archived, "Task should have been archived once a new one has been created")[m
[31m-[m
[31m-    def test_tasks_get_required_tasks(self):[m
[31m-        task = self._task_for_object(TestModel.run_something_with_required, 'key1')[m
[31m-        self.assertEquals(['run_something_long'],[m
[31m-                          [required_task.method for required_task in task.get_required_tasks()])[m
[31m-        [m
[31m-        [m
[31m-        task = self._task_for_object(TestModel.run_something_with_two_required, 'key1')[m
[31m-        self.assertEquals(['run_something_long', 'run_something_with_required'],[m
[31m-                          [required_task.method for required_task in task.get_required_tasks()])[m
[31m-[m
[31m-    def _check_running(self, key, current_task, previous_task, task_name, expected_log=None):[m
[31m-        self._assert_status("scheduled", current_task)[m
[31m-        with LogCheck(self, _start_message(current_task)):[m
[31m-            Task.objects._do_schedule()[m
[31m-        time.sleep(0.1)[m
[31m-        self._assert_status("running", current_task)[m
[31m-        if previous_task:[m
[31m-            self._assert_status("successful", previous_task)[m
[31m-        self._wait_until(key, task_name)[m
[31m-        time.sleep(0.5)[m
[31m-        self._assert_status("successful", current_task)[m
[31m-        if expected_log != None:[m
[31m-            self.assertEquals(expected_log, [m
[31m-                              Task.objects.get(pk=current_task.pk).log)[m
[31m-[m
[31m-    def test_tasks_run_required_task_successful(self):[m
[31m-        required_task = self._task_for_object(TestModel.run_something_long, 'key1')[m
[31m-        task = self._task_for_object(TestModel.run_something_with_required, 'key1')[m
[31m-        self.assertEquals("defined", required_task.status)[m
[31m-[m
[31m-        djangotasks.run_task(task)[m
[31m-        self._assert_status("scheduled", task)[m
[31m-        self._assert_status("scheduled", required_task)[m
[31m-[m
[31m-        self._check_running('key1', required_task, None, 'run_something_long_2')[m
[31m-        self._check_running('key1', task, required_task, 'run_something_with_required')[m
[31m-[m
[31m-        task = Task.objects.get(pk=task.pk)[m
[31m-        complete_log, _ = DATETIME_REGEX.subn('', task.complete_log())[m
[31m-[m
[31m-        self.assertEquals(u'Run a successful task started on \n' + [m
[31m-                          u'running run_something_long_1\n' + [m
[31m-                          u'running run_something_long_2\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a successful task finished successfully on \n' + [m
[31m-                          u'Run a task with a required task started on \n' + [m
[31m-                          u'running run_something_with_required\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a task with a required task finished successfully on ', complete_log)[m
[31m-[m
[31m-        complete_log_direct, _ = DATETIME_REGEX.subn('', task.complete_log(True))[m
[31m-[m
[31m-        self.assertEquals(u'Run a successful task started on \n' + [m
[31m-                          u'running run_something_long_1\n' + [m
[31m-                          u'running run_something_long_2\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a successful task finished successfully on \n' + [m
[31m-                          u'Run a task with a required task started on \n' + [m
[31m-                          u'running run_something_with_required\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a task with a required task finished successfully on ', complete_log_direct)[m
[31m-[m
[31m-    def test_tasks_run_two_required_tasks_successful(self):[m
[31m-        key = 'key2'[m
[31m-        required_task = self._task_for_object(TestModel.run_something_long, key)[m
[31m-        with_required_task = self._task_for_object(TestModel.run_something_with_required, key)[m
[31m-        task = self._task_for_object(TestModel.run_something_with_two_required, key)[m
[31m-        self.assertEquals("defined", required_task.status)[m
[31m-[m
[31m-        djangotasks.run_task(task)[m
[31m-        self._assert_status("scheduled", task)[m
[31m-        self._assert_status("scheduled", required_task)[m
[31m-[m
[31m-        self._check_running(key, required_task, None, 'run_something_long_2')[m
[31m-        self._check_running(key, with_required_task, required_task, 'run_something_with_required')[m
[31m-        self._check_running(key, task, with_required_task, 'run_something_with_two_required')[m
[31m-[m
[31m-        task = Task.objects.get(pk=task.pk)[m
[31m-        complete_log, _ = DATETIME_REGEX.subn('', task.complete_log())[m
[31m-[m
[31m-        self.assertEquals(u'Run a successful task started on \n' + [m
[31m-                          u'running run_something_long_1\n' + [m
[31m-                          u'running run_something_long_2\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a successful task finished successfully on \n' + [m
[31m-                          u'Run a task with a required task started on \n' + [m
[31m-                          u'running run_something_with_required\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a task with a required task finished successfully on \n' + [m
[31m-                          u'Run a task with two required task started on \n' + [m
[31m-                          u'running run_something_with_two_required\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a task with two required task finished successfully on ',[m
[31m-                          complete_log)[m
[31m-[m
[31m-        complete_log_direct, _ = DATETIME_REGEX.subn('', task.complete_log(True))[m
[31m-[m
[31m-        self.assertEquals(u'Run a successful task started on \n' + [m
[31m-                          u'running run_something_long_1\n' + [m
[31m-                          u'running run_something_long_2\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a successful task finished successfully on \n' + [m
[31m-                          u'Run a task with a required task started on \n' + [m
[31m-                          u'running run_something_with_required\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a task with a required task finished successfully on \n' + [m
[31m-                          u'Run a task with two required task started on \n' + [m
[31m-                          u'running run_something_with_two_required\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a task with two required task finished successfully on ',[m
[31m-                          complete_log_direct)[m
[31m-[m
[31m-    def test_tasks_run_required_with_two_required_tasks_successful(self):[m
[31m-        key = 'key3'[m
[31m-        required_task = self._task_for_object(TestModel.run_something_long, key)[m
[31m-        with_required_task = self._task_for_object(TestModel.run_something_with_required, key)[m
[31m-        with_two_required_task = self._task_for_object(TestModel.run_something_with_two_required, key)[m
[31m-        task = self._task_for_object(TestModel.run_something_with_required_with_two_required, key)[m
[31m-        self.assertEquals("defined", required_task.status)[m
[31m-[m
[31m-        djangotasks.run_task(task)[m
[31m-[m
[31m-        self._assert_status("scheduled", task)[m
[31m-        self._assert_status("scheduled", with_required_task)[m
[31m-        self._assert_status("scheduled", with_two_required_task)[m
[31m-        self._assert_status("scheduled", required_task)[m
[31m-[m
[31m-        self._check_running(key, required_task, None, 'run_something_long_2')[m
[31m-        self._check_running(key, with_required_task, required_task, "run_something_with_required")[m
[31m-        self._check_running(key, with_two_required_task, with_required_task, "run_something_with_two_required")[m
[31m-        self._check_running(key, task, with_two_required_task, "run_something_with_required_with_two_required")[m
[31m-[m
[31m-        task = Task.objects.get(pk=task.pk)[m
[31m-        complete_log, _ = DATETIME_REGEX.subn('', task.complete_log())[m
[31m-[m
[31m-        self.assertEquals(u'Run a successful task started on \n' + [m
[31m-                          u'running run_something_long_1\n' + [m
[31m-                          u'running run_something_long_2\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a successful task finished successfully on \n' + [m
[31m-                          u'Run a task with a required task started on \n' + [m
[31m-                          u'running run_something_with_required\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a task with a required task finished successfully on \n' + [m
[31m-                          u'Run a task with two required task started on \n' + [m
[31m-                          u'running run_something_with_two_required\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a task with two required task finished successfully on \n' + [m
[31m-                          u'Run a task with a required task that has a required task started on \n' + [m
[31m-                          u'running run_something_with_required_with_two_required\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a task with a required task that has a required task finished successfully on ',[m
[31m-                          complete_log)[m
[31m-[m
[31m-        complete_log_direct, _ = DATETIME_REGEX.subn('', task.complete_log(True))[m
[31m-[m
[31m-        self.assertEquals(u'Run a task with two required task started on \n' + [m
[31m-                          u'running run_something_with_two_required\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a task with two required task finished successfully on \n' + [m
[31m-                          u'Run a task with a required task that has a required task started on \n' + [m
[31m-                          u'running run_something_with_required_with_two_required\n' + [m
[31m-                          u'\n' + [m
[31m-                          u'Run a task with a required task that has a required task finished successfully on ',[m
[31m-                          complete_log_direct)[m
[31m-[m
[31m-    def test_tasks_run_required_task_failing(self):[m
[31m-        required_task = self._task_for_object(TestModel.run_something_failing, 'key1')[m
[31m-        task = self._task_for_object(TestModel.run_something_with_required_failing, 'key1')[m
[31m-        self.assertEquals("defined", required_task.status)[m
[31m-[m
[31m-        djangotasks.run_task(task)[m
[31m-        self._assert_status("scheduled", task)[m
[31m-        self._assert_status("scheduled", required_task)[m
[31m-[m
[31m-        with LogCheck(self, _start_message(required_task)):[m
[31m-            Task.objects._do_schedule()[m
[31m-        time.sleep(0.5)[m
[31m-        self._assert_status("scheduled", task)[m
[31m-        self._assert_status("running", required_task)[m
[31m-[m
[31m-        self._wait_until('key1', 'run_something_failing')[m
[31m-        time.sleep(0.5)[m
[31m-        self._assert_status("scheduled", task)[m
[31m-        self._assert_status("unsuccessful", required_task)[m
[31m-[m
[31m-        with LogCheck(self):[m
[31m-            Task.objects._do_schedule()[m
[31m-        time.sleep(0.5)[m
[31m-        self._assert_status("unsuccessful", task)[m
[31m-        task = Task.objects.get(pk=task.pk)[m
[31m-[m
[31m-        complete_log, _ = DATETIME_REGEX.subn('', task.complete_log())[m
[31m-        self.assertTrue(complete_log.startswith('Run a failing task started on \nrunning run_something_failing\nTraceback (most recent call last):'))[m
[31m-        self.assertTrue(complete_log.endswith(u', in run_something_failing\n    raise Exception("Failed !")\nException: Failed !\n\n' + [m
[31m-                                              u'Run a failing task failed on \n' + [m
[31m-                                              u'Run a task with a required task that fails started\n' + [m
[31m-                                              u'Run a task with a required task that fails failed'))[m
[31m-        complete_log_direct, _ = DATETIME_REGEX.subn('', task.complete_log(True))[m
[31m-        self.assertTrue(complete_log_direct.startswith('Run a failing task started on \nrunning run_something_failing\nTraceback (most recent call last):'))[m
[31m-        self.assertTrue(complete_log_direct.endswith(u', in run_something_failing\n    raise Exception("Failed !")\nException: Failed !\n\n' + [m
[31m-                                                     u'Run a failing task failed on \n' + [m
[31m-                                                     u'Run a task with a required task that fails started\n' + [m
[31m-                                                     u'Run a task with a required task that fails failed'))[m
[31m-        self.assertEquals("unsuccessful", task.status)[m
[31m-[m
[31m-    def test_tasks_run_again(self):[m
[31m-        tasks = self._tasks_for_object('key1')[m
[31m-        task = tasks[5][m
[31m-        self.assertEquals('run_something_fast', task.method)[m
[31m-        djangotasks.run_task(task)[m
[31m-        with LogCheck(self, _start_message(task)):[m
[31m-            Task.objects._do_schedule()[m
[31m-        self._wait_until('key1', "run_something_fast")[m
[31m-        time.sleep(0.5)[m
[31m-        self._reset('key1', "run_something_fast")[m
[31m-        self._assert_status("successful", task)[m
[31m-        djangotasks.run_task(task)[m
[31m-        output_check = LogCheck(self, fail_if_different=False)[m
[31m-        with output_check:[m
[31m-            Task.objects._do_schedule()[m
[31m-        self._wait_until('key1', "run_something_fast")[m
[31m-        time.sleep(0.5)[m
[31m-        import re[m
[31m-        pks = re.findall(r'(\d+)', output_check.log.getvalue())[m
[31m-        new_task = Task.objects.get(pk=int(pks[0]))[m
[31m-        self.assertEquals(_start_message(new_task) + 'INFO: Task ' + str(new_task.pk) + ' finished with status "successful"\n', [m
[31m-                          output_check.log.getvalue())[m
[31m-        self.assertTrue(new_task.pk != task.pk)[m
[31m-        self.assertEquals("successful", new_task.status)[m
[31m-        tasks = self._tasks_for_object('key1')[m
[31m-        self.assertEquals(new_task.pk, tasks[5].pk)[m
[31m-        [m
[31m-[m
[31m-    def test_tasks_exception_in_thread(self):[m
[31m-        task = self._task_for_object(TestModel.run_something_long, 'key1')[m
[31m-        djangotasks.run_task(task)[m
[31m-        task = self._task_for_object(TestModel.run_something_long, 'key1')[m
[31m-        task_delete = self._task_for_object(TestModel.run_something_long, 'key1')[m
[31m-        task_delete.delete()[m
[31m-        try:[m
[31m-            Task.objects.get(pk=task.pk)[m
[31m-            self.fail("Should throw an exception")[m
[31m-        except Exception, e:[m
[31m-            self.assertEquals("Task matching query does not exist.", str(e))[m
[31m-            [m
[31m-        with LogCheck(self, 'WARNING: Failed to change status from "scheduled" to "running" for task %d\n' % task.pk):[m
[31m-            task.do_run()[m
[31m-            time.sleep(0.5)[m
[31m-[m
[31m-    def test_compute_duration(self):[m
[31m-        from datetime import datetime[m
[31m-        task = self._tasks_for_object('key1')[0][m
[31m-        task.start_date = datetime(2010, 10, 7, 14, 22, 17, 848801)[m
[31m-        task.end_date = datetime(2010, 10, 7, 17, 23, 43, 933740)[m
[31m-        self.assertEquals('3 hours, 1 minute, 26 seconds', task.duration)[m
[31m-        task.end_date = datetime(2010, 10, 7, 15, 12, 18, 933740)[m
[31m-        self.assertEquals('50 minutes, 1 second', task.duration)[m
[31m-        task.end_date = datetime(2010, 10, 7, 15, 22, 49, 933740)[m
[31m-        self.assertEquals('1 hour, 32 seconds', task.duration)[m
[31m-        task.end_date = datetime(2010, 10, 7, 14, 22, 55, 933740)[m
[31m-        self.assertEquals('38 seconds', task.duration)[m
[31m-[m
[31m-    def test_MultipleObjectsReturned_in_tasks(self):[m
[31m-        task = self._task_for_object(TestModel.run_something_long, 'key1')[m
[31m-        task.pk = None[m
[31m-        super(Task, task).save()[m
[31m-        task = self._task_for_object(TestModel.run_something_long, 'key1')[m
[31m-[m
[31m-    def test_send_signal_on_task_completed(self):[m
[31m-        from djangotasks.models import TaskManager[m
[31m-        from djangotasks.signals import task_completed[m
[31m-        [m
[31m-        def receiver(sender, **kwargs):[m
[31m-            task = kwargs['task'][m
[31m-            self.assertEqual(TaskManager, sender.__class__)[m
[31m-            self.assertEqual(Task, task.__class__)[m
[31m-            self.assertEqual(TestModel, kwargs['object'].__class__)[m
[31m-            self.assertEqual('successful', task.status)[m
[31m-            # Ensure that this function was called by the Signal[m
[31m-            task.log = "Text added from the signal receiver"[m
[31m-            task.save()[m
[31m-        [m
[31m-        task_completed.connect(receiver)[m
[31m-        task = self._task_for_object(TestModel.run_something_fast, 'key1')[m
[31m-        djangotasks.run_task(task)[m
[31m-        self._check_running('key1', task, None, 'run_something_fast',[m
[31m-                            u'Text added from the signal receiver')[m
[31m-        task_completed.disconnect()[m
[1mdiff --git a/djs.bat b/djs.bat[m
[1mdeleted file mode 100644[m
[1mindex 8d23771..0000000[m
[1m--- a/djs.bat[m
[1m+++ /dev/null[m
[36m@@ -1,6 +0,0 @@[m
[31m-[m
[31m-[m
[31m-[m
[31m-e:[m
[31m-cd E:\Cloud360\sync\src\django_project\quickblog[m
[31m-python manage.py runserver[m
\ No newline at end of file[m
[1mdiff --git a/proxy_cron/__init__.py b/proxy_cron/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex e69de29..0000000[m
[1mdiff --git a/proxy_cron/__init__.pyc b/proxy_cron/__init__.pyc[m
[1mdeleted file mode 100644[m
[1mindex 72a6df2..0000000[m
Binary files a/proxy_cron/__init__.pyc and /dev/null differ
[1mdiff --git a/proxy_cron/admin.py b/proxy_cron/admin.py[m
[1mdeleted file mode 100644[m
[1mindex 8c38f3f..0000000[m
[1m--- a/proxy_cron/admin.py[m
[1m+++ /dev/null[m
[36m@@ -1,3 +0,0 @@[m
[31m-from django.contrib import admin[m
[31m-[m
[31m-# Register your models here.[m
[1mdiff --git a/proxy_cron/admin.pyc b/proxy_cron/admin.pyc[m
[1mdeleted file mode 100644[m
[1mindex a907efc..0000000[m
Binary files a/proxy_cron/admin.pyc and /dev/null differ
[1mdiff --git "a/proxy_cron/cron(\345\206\262\347\252\201\346\227\266\347\232\204\346\226\207\344\273\266\345\244\207\344\273\2752014-03-05 21-24-00).pyc" "b/proxy_cron/cron(\345\206\262\347\252\201\346\227\266\347\232\204\346\226\207\344\273\266\345\244\207\344\273\2752014-03-05 21-24-00).pyc"[m
[1mdeleted file mode 100644[m
[1mindex 0a69b5b..0000000[m
Binary files "a/proxy_cron/cron(\345\206\262\347\252\201\346\227\266\347\232\204\346\226\207\344\273\266\345\244\207\344\273\2752014-03-05 21-24-00).pyc" and /dev/null differ
[1mdiff --git a/proxy_cron/cron.py b/proxy_cron/cron.py[m
[1mdeleted file mode 100644[m
[1mindex 4bdf053..0000000[m
[1m--- a/proxy_cron/cron.py[m
[1m+++ /dev/null[m
[36m@@ -1,49 +0,0 @@[m
[31m-# coding=gbk[m
[31m-#encoding = utf-8[m
[31m-[m
[31m-import sys[m
[31m-sys.path.append("../")[m
[31m-sys.path.append("../blog/proxy")[m
[31m-from django_cron import cronScheduler, Job[m
[31m-[m
[31m-# This is a function I wrote to check a feedback email address[m
[31m-# and add it to our database. Replace with your own imports[m
[31m-#from MyMailFunctions import check_feedback_mailbox[m
[31m-import proxyUpdate as proxy[m
[31m-debug = 0[m
[31m-[m
[31m-class ProxyUpdate(Job):[m
[31m-    """[m
[31m-    Cron Job that checks the lgr users mailbox and adds any [m
[31m-    approved senders' attachments to the db[m
[31m-    """[m
[31m-[m
[31m-    # print '--class.checknews()'[m
[31m-    # run every 60 seconds (1 minutes)[m
[31m-    # run_every = 60*0.05 [m
[31m-    run_every = 60*60*24    #Ã¿Ìì¼ì²éÒ»´Î[m
[31m-    #run_every=60*0.1[m
[31m-        [m
[31m-    def job(self):[m
[31m-        # This will be executed every 5 minutes[m
[31m-        if debug: print '--class.ProxyUpdate.job()'[m
[31m-        #sourcelink.test()[m
[31m-        proxy.main()[m
[31m-        #sourcelink.test()[m
[31m-[m
[31m-#print '--cronScheduler.register is start.'[m
[31m-cronScheduler.register(ProxyUpdate)[m
[31m-#cronScheduler.execute()[m
[31m-[m
[31m-[m
[31m-'''[m
[31m-from dateutil.tz import tzlocal[m
[31m-localtimezone = tzlocal.get_localzone()[m
[31m-print '--localtimezone:',localtimezone[m
[31m-'''[m
[31m-[m
[31m-#import time[m
[31m-#print '--',time.timezone[m
[31m-#print '--','Etc/GMT%+d' % (time.timezone / 3600)[m
[31m-#offsetHour = time.timezone / 3600[m
[31m-#return 'Etc/GMT%+d' % offsetHour[m
[1mdiff --git a/proxy_cron/cron.pyc b/proxy_cron/cron.pyc[m
[1mdeleted file mode 100644[m
[1mindex 0a69b5b..0000000[m
Binary files a/proxy_cron/cron.pyc and /dev/null differ
[1mdiff --git a/proxy_cron/models.py b/proxy_cron/models.py[m
[1mdeleted file mode 100644[m
[1mindex 71a8362..0000000[m
[1m--- a/proxy_cron/models.py[m
[1m+++ /dev/null[m
[36m@@ -1,3 +0,0 @@[m
[31m-from django.db import models[m
[31m-[m
[31m-# Create your models here.[m
[1mdiff --git a/proxy_cron/models.pyc b/proxy_cron/models.pyc[m
[1mdeleted file mode 100644[m
[1mindex 4bd27ad..0000000[m
Binary files a/proxy_cron/models.pyc and /dev/null differ
[1mdiff --git a/proxy_cron/proxyUpdate.py b/proxy_cron/proxyUpdate.py[m
[1mdeleted file mode 100644[m
[1mindex c8418d5..0000000[m
[1m--- a/proxy_cron/proxyUpdate.py[m
[1m+++ /dev/null[m
[36m@@ -1,1222 +0,0 @@[m
[31m-# coding=utf-8[m
[31m-# vi:ts=4:et[m
[31m-	[m
[31m-"""[m
[31m-Ä¿Ç°³ÌÐòÄÜ´ÓÏÂÁÐÍøÕ¾×¥È¡´úÀíÁÐ±í[m
[31m-[m
[31m-http://www.cybersyndrome.net/[m
[31m-http://www.pass-e.com/[m
[31m-http://www.cnproxy.com/[m
[31m-http://www.proxylists.net/[m
[31m-http://www.my-proxy.com/[m
[31m-http://www.samair.ru/proxy/[m
[31m-http://proxy4free.com/[m
[31m-http://proxylist.sakura.ne.jp/[m
[31m-http://www.ipfree.cn/[m
[31m-http://www.publicproxyservers.com/[m
[31m-http://www.digitalcybersoft.com/[m
[31m-http://www.checkedproxylists.com/[m
[31m-[m
[31m-ÎÊ:ÔõÑù²ÅÄÜÌí¼Ó×Ô¼ºµÄÐÂÍøÕ¾£¬²¢×Ô¶¯ÈÃ³ÌÐòÈ¥×¥È¡?[m
[31m-´ð:[m
[31m-[m
[31m-Çë×¢ÒâÔ´´úÂëÖÐÒÔÏÂº¯ÊýµÄ¶¨Òå.´Óº¯ÊýÃûµÄ×îºóÒ»¸öÊý×Ö´Ó1¿ªÊ¼µÝÔö£¬Ä¿Ç°ÒÑ¾­µ½ÁË13    [m
[31m-[m
[31m-def build_list_urls_1(page=5):[m
[31m-def parse_page_2(html=''):[m
[31m-[m
[31m-def build_list_urls_2(page=5):[m
[31m-def parse_page_2(html=''):[m
[31m-[m
[31m-.......[m
[31m-[m
[31m-def build_list_urls_13(page=5):[m
[31m-def parse_page_13(html=''):[m
[31m-[m
[31m-[m
[31m-ÄãÒª×öµÄ¾ÍÊÇÌí¼Ó build_list_urls_14 ºÍ parse_page_14 ÕâÁ½¸öº¯Êý[m
[31m-±ÈÈçÄãÒª´Ó www.somedomain.com ×¥È¡ [m
[31m-    /somepath/showlist.asp?page=1[m
[31m-    ...  µ½[m
[31m-    /somepath/showlist.asp?page=8  ¼ÙÉè¹²8Ò³[m
[31m-[m
[31m-ÄÇÃ´ build_list_urls_14 ¾ÍÓ¦¸ÃÕâÑù¶¨Òå[m
[31m-Òª¶¨ÒåÕâ¸öpageÕâ¸ö²ÎÊýµÄÄ¬ÈÏÖµÎªÄãÒª×¥È¡µÄÒ³ÃæÊý8£¬ÕâÑù²ÅÄÜÕýÈ·µ½×¥µ½8¸öÒ³Ãæ[m
[31m-def build_list_urls_14(page=8):   [m
[31m-    ..... [m
[31m-    return [        #·µ»ØµÄÊÇÒ»¸öÒ»Î¬Êý×é£¬Êý×éÃ¿¸öÔªËØ¶¼ÊÇÄãÒª×¥È¡µÄÒ³ÃæµÄ¾ø¶ÔµØÖ·[m
[31m-    	'http://www.somedomain.com/somepath/showlist.asp?page=1',[m
[31m-        'http://www.somedomain.com/somepath/showlist.asp?page=2',[m
[31m-        'http://www.somedomain.com/somepath/showlist.asp?page=3',[m
[31m-        ....[m
[31m-        'http://www.somedomain.com/somepath/showlist.asp?page=8'[m
[31m-    ][m
[31m-[m
[31m-½ÓÏÂÀ´ÔÙÐ´Ò»¸öº¯Êý parse_page_14(html='')ÓÃÀ´·ÖÎöÉÏÃæÄÇ¸öº¯Êý·µ»ØµÄÄÇÐ©Ò³ÃæhtmlµÄÄÚÈÝ[m
[31m-²¢´ÓhtmlÖÐÌáÈ¡´úÀíµØÖ·[m
[31m-×¢Òâ£º Õâ¸öº¯Êý»áÑ­»·´¦Àí parse_page_14 ÖÐµÄËùÓÐÒ³Ãæ£¬´«ÈëµÄhtml¾ÍÊÇÄÇÐ©Ò³ÃæµÄhtmlÎÄ±¾[m
[31m-[m
[31m-ip:   ±ØÐëÎª xxx.xxx.xxx.xxx Êý×Öip¸ñÊ½£¬²»ÄÜÎª www.xxx.com ¸ñÊ½[m
[31m-port: ±ØÐëÎª 2-5Î»µÄÊý×Ö[m
[31m-type: ±ØÐëÎª Êý×Ö 2,1,0,-1 ÖÐµÄÆäÖÐÒ»¸ö¡£ÕâÐ©Êý×Ö´ú±í´úÀí·þÎñÆ÷µÄÀàÐÍ[m
[31m-      2:¸ß¶ÈÄäÃû´úÀí  1: ÆÕÍ¨ÄäÃû´úÀí  0:Í¸Ã÷´úÀí    -1: ÎÞ·¨È·¶¨µÄ´úÀíÀàÐÍ[m
[31m- #area: ´úÀíËùÔÚ¹ú¼Ò»òÕßµØÇø£¬ ±ØÐë×ª»¯Îª utf8±àÂë¸ñÊ½  [m
[31m-[m
[31m-def parse_page_14(html=''):[m
[31m-    ....[m
[31m-	return [[m
[31m-        [ip,port,type,area]         [m
[31m-        [ip,port,type,area]         [m
[31m-        .....                      [m
[31m-        ....                       [m
[31m-        [ip,port,type,area]        [m
[31m-    ][m
[31m-[m
[31m-×îºó£¬×îÖØÒªµÄÒ»µã:ÐÞ¸ÄÈ«¾Ö±äÁ¿ web_site_countµÄÖµ£¬ÈÃËû¼ÓµÝÔö1  web_site_count=14[m
[31m-[m
[31m-[m
[31m-[m
[31m-ÎÊ£ºÎÒÒÑ¾­°´ÕÕÉÏÃæµÄËµÃ÷³É¹¦µÄÌí¼ÓÁËÒ»¸ö×Ô¶¨ÒåÕ¾µã£¬ÎÒÒªÔÙÌí¼ÓÒ»¸ö£¬ÔõÃ´°ì?[m
[31m-´ð£º¼ÈÈ»ÒÑ¾­ÖªµÀÔõÃ´Ìí¼Ó build_list_urls_14 ºÍ parse_page_14ÁË[m
[31m-[m
[31m-ÄÇÃ´¾Í°´ÕÕÍ¬ÑùµÄ°ì·¨Ìí¼Ó[m
[31m-def build_list_urls_15(page=5):[m
[31m-def parse_page_15(html=''):[m
[31m-[m
[31m-ÕâÁ½¸öº¯Êý£¬²¢ ¸üÐÂÈ«¾Ö±äÁ¿   web_site_count=15[m
[31m-[m
[31m-"""[m
[31m-[m
[31m-[m
[31m-import urllib,time,random,re,threading,string, sys,os, datetime, thread[m
[31m-from time import sleep[m
[31m-[m
[31m-[m
[31m-web_site_count=14   #Òª×¥È¡µÄÍøÕ¾ÊýÄ¿[m
[31m-day_keep=2          #É¾³ýÊý¾Ý¿âÖÐ±£´æÊ±¼ä´óÓÚday_keepÌìµÄ ÎÞÐ§´úÀí[m
[31m-indebug=0        [m
[31m-daemonSubTimeOut = 60    #´Ë´¦Îª×ÓÏß³ÌµÄÉú´æÊ±ÏÞ£¬Í³Ò»Îª´Ë´¦ÉèÖÃ[m
[31m-[m
[31m-thread_num=100                   # ¿ª thread_num ¸öÏß³Ì¼ì²é´úÀí[m
[31m-check_in_one_call=thread_num*10  # ±¾´Î³ÌÐòÔËÐÐÊ± ×î¶à¼ì²éµÄ´úÀí¸öÊý[m
[31m-[m
[31m-[m
[31m-skip_check_in_hour=8    # ÔÚÊ±¼ä skip_check_in_hourÄÚ,²»¶ÔÍ¬Ò»¸ö´úÀíµØÖ·ÔÙ´ÎÑéÖ¤[m
[31m-skip_get_in_hour=24      # Ã¿´Î²É¼¯ÐÂ´úÀíµÄ×îÉÙÊ±¼ä¼ä¸ô (Ð¡Ê±)[m
[31m-[m
[31m-proxy_array=[]          # Õâ¸öÊý×é±£´æ½«ÒªÌí¼Óµ½Êý¾Ý¿âµÄ´úÀíÁÐ±í [m
[31m-update_array=[]         # Õâ¸öÊý×é±£´æ½«Òª¸üÐÂµÄ´úÀíµÄÊý¾Ý [m
[31m-[m
[31m-db=None                 #Êý¾Ý¿âÈ«¾Ö¶ÔÏó[m
[31m-conn=None[m
[31m-[m
[31m-#cur_path = os.path.dirname(__file__)[m
[31m-#dbfile= cur_path.replace('proxy_cron','blog')+'/proxy/proxier0224.db'     #Êý¾Ý¿âÎÄ¼þÃû[m
[31m-#print dbfile[m
[31m-[m
[31m-#target_url="http://www.baidu.com/"   # ÑéÖ¤´úÀíµÄÊ±ºòÍ¨¹ý´úÀí·ÃÎÊÕâ¸öµØÖ·[m
[31m-#target_string="030173"               # Èç¹û·µ»ØµÄhtmlÖÐ°üº¬Õâ¸ö×Ö·û´®£¬°Ù¶È±Øº¬×Ö¶Î£º¾©ICPÖ¤030173ºÅ[m
[31m-[m
[31m-target_url="http://www.douban.com/"   [m
[31m-target_string="0110418"[m
[31m-[m
[31m-target_timeout=10                    # ²¢ÇÒÏìÓ¦Ê±¼äÐ¡ÓÚ target_timeout Ãë [m
[31m-                                     #ÄÇÃ´ÎÒÃÇ¾ÍÈÏÎªÕâ¸ö´úÀíÊÇÓÐÐ§µÄ [m
[31m-[m
[31m-[m
[31m-[m
[31m-#µ½´¦´úÀíÊý¾ÝµÄÎÄ¼þ¸ñÊ½£¬Èç¹û²»Ïëµ¼³öÊý¾Ý£¬ÇëÈÃÕâ¸ö±äÁ¿Îª¿Õ  output_type=''[m
[31m-[m
[31m-output_type='xml'                   #ÒÔÏÂ¸ñÊ½¿ÉÑ¡,  Ä¬ÈÏxml[m
[31m-                                    # xml[m
[31m-                                    # htm           [m
[31m-                                    # tab         ÖÆ±í·û·Ö¸ô, ¼æÈÝ excel[m
[31m-                                    # csv         ¶ººÅ·Ö¸ô,   ¼æÈÝ excel[m
[31m-                                    # txt         xxx.xxx.xxx.xxx:xx ¸ñÊ½[m
[31m-[m
[31m-# Êä³öÎÄ¼þÃû Çë±£Ö¤Õâ¸öÊý×éº¬ÓÐÁù¸öÔªËØ[m
[31m-output_filename=[                          [m
[31m-            'uncheck',             # ¶ÔÓÚÎ´¼ì²éµÄ´úÀí,±£´æµ½Õâ¸öÎÄ¼þ[m
[31m-            'checkfail',           # ÒÑ¾­¼ì²é£¬µ«ÊÇ±»±ê¼ÇÎªÎÞÐ§µÄ´úÀí,±£´æµ½Õâ¸öÎÄ¼þ[m
[31m-            'ok_high_anon',        # ¸ßÄä´úÀí(ÇÒÓÐÐ§)µÄ´úÀí,°´speedÅÅÐò£¬×î¿éµÄ·ÅÇ°Ãæ[m
[31m-            'ok_anonymous',        # ÆÕÍ¨ÄäÃû(ÇÒÓÐÐ§)µÄ´úÀí,°´speedÅÅÐò£¬×î¿éµÄ·ÅÇ°Ãæ[m
[31m-            'ok_transparent',      # Í¸Ã÷´úÀí(ÇÒÓÐÐ§)µÄ´úÀí,°´speedÅÅÐò£¬×î¿éµÄ·ÅÇ°Ãæ[m
[31m-            'ok_other'             # ÆäËûÎ´ÖªÀàÐÍ(ÇÒÓÐÐ§)µÄ´úÀí,°´speedÅÅÐò[m
[31m-            ][m
[31m-[m
[31m-[m
[31m-#Êä³öÊý¾ÝµÄ¸ñÊ½  Ö§³ÖµÄÊý¾ÝÁÐÓÐ  [m
[31m-# _ip_ , _port_ , _type_ , _status_ , _active_ ,[m
[31m-#_time_added_, _time_checked_ ,_time_used_ ,  _speed_, _area_[m
[31m-                                        [m
[31m-output_head_string=''             # Êä³öÎÄ¼þµÄÍ·²¿×Ö·û´®[m
[31m-output_format=''                  # ÎÄ¼þÊý¾ÝµÄ¸ñÊ½    [m
[31m-output_foot_string=''             # Êä³öÎÄ¼þµÄµ×²¿×Ö·û´®[m
[31m-[m
[31m-[m
[31m-[m
[31m-if   output_type=='xml':[m
[31m-    output_head_string="<?xml version='1.0' encoding='gb2312'?><proxylist>\n" [m
[31m-    output_format="""<item>[m
[31m-            <ip>_ip_</ip>[m
[31m-            <port>_port_</port>[m
[31m-            <speed>_speed_</speed>[m
[31m-            <last_check>_time_checked_</last_check>[m
[31m-            <area>_area_</area>[m
[31m-        </item>[m
[31m-            """[m
[31m-    output_foot_string="</proxylist>"[m
[31m-elif output_type=='htm':[m
[31m-    output_head_string="""<table border=1 width='100%'>[m
[31m-        <tr><td>´úÀí</td><td>×îºó¼ì²é</td><td>ËÙ¶È</td><td>µØÇø</td></tr>[m
[31m-        """[m
[31m-    output_format="""<tr>[m
[31m-    <td>_ip_:_port_</td><td>_time_checked_</td><td>_speed_</td><td>_area_</td>[m
[31m-    </tr>[m
[31m-    """[m
[31m-    output_foot_string="</table>"[m
[31m-else: [m
[31m-    output_head_string=''[m
[31m-    output_foot_string=''[m
[31m-[m
[31m-if output_type=="csv":[m
[31m-    output_format="_ip_, _port_, _type_,  _speed_, _time_checked_,  _area_\n"[m
[31m-[m
[31m-if output_type=="tab":[m
[31m-    output_format="_ip_\t_port_\t_speed_\t_time_checked_\t_area_\n"[m
[31m-[m
[31m-if output_type=="txt":[m
[31m-    output_format="_ip_:_port_\n"[m
[31m-[m
[31m-[m
[31m-# Êä³öÎÄ¼þµÄº¯Êý[m
[31m-def output_file():[m
[31m-    print ' start output_file()...'[m
[31m-    global output_filename,output_head_string,output_foot_string,output_type[m
[31m-    if output_type=='':[m
[31m-        return[m
[31m-    fnum=len(output_filename)[m
[31m-    content=[][m
[31m-    for i in range(fnum):[m
[31m-        content.append([output_head_string])[m
[31m-    [m
[31m-    conn.execute("select * from `proxier` order by `active`,`type`,`speed` asc")[m
[31m-    rs=conn.fetchall()[m
[31m-    [m
[31m-    for item in rs:[m
[31m-        type,active=item[2],item[4][m
[31m-        if   active is None:[m
[31m-            content[0].append(formatline(item))   #Î´¼ì²é[m
[31m-        elif active==0:[m
[31m-            content[1].append(formatline(item))   #·Ç·¨µÄ´úÀí[m
[31m-        elif active==1 and type==2:[m
[31m-            content[2].append(formatline(item))   #¸ßÄä   [m
[31m-        elif active==1 and type==1:[m
[31m-            content[3].append(formatline(item))   #ÆÕÍ¨ÄäÃû  [m
[31m-        elif active==1 and type==0:[m
[31m-            content[4].append(formatline(item))   #Í¸Ã÷´úÀí             [m
[31m-        elif active==1 and type==-1:[m
[31m-            content[5].append(formatline(item))   #Î´ÖªÀàÐÍµÄ´úÀí[m
[31m-        else:[m
[31m-            pass[m
[31m-[m
[31m-    for i in range(fnum):[m
[31m-        content[i].append(output_foot_string)[m
[31m-        f=open('proxy/' + output_filename[i]+"."+output_type,'w')[m
[31m-        f.write(string.join(content[i],''))[m
[31m-        f.close()[m
[31m-[m
[31m-#¸ñÊ½»¯Êä³öÃ¿Ìõ¼ÇÂ¼[m
[31m-def formatline(item):[m
[31m-    global output_format[m
[31m-    arr=['_ip_','_port_','_type_','_status_','_active_',[m
[31m-        '_time_added_','_time_checked_','_time_used_',[m
[31m-        '_speed_','_area_'][m
[31m-    s=output_format[m
[31m-    for i  in range(len(arr)):[m
[31m-        s=string.replace(s,arr[i],str(formatitem(item[i],i)))[m
[31m-    return s [m
[31m-[m
[31m-[m
[31m-#¶ÔÓÚÊý¾Ý¿âÖÐµÄÃ¿¸ö²»Í¬×Ö¶Î£¬Òª´¦ÀíÒ»ÏÂ£¬ÖÐÎÄÒª±àÂë£¬ÈÕÆÚ×Ö¶ÎÒª×ª»¯[m
[31m-def formatitem(value,colnum):[m
[31m-    global output_type[m
[31m-    if (colnum==9):[m
[31m-        value=value.encode('cp936')[m
[31m-    elif value is None:[m
[31m-        value=''[m
[31m-[m
[31m-    if colnum==5 or colnum==6 or colnum==7:      #time_xxxed[m
[31m-        value=string.atof(value)[m
[31m-        if value<1:[m
[31m-            value=''[m
[31m-        else:[m
[31m-            value=formattime(value)[m
[31m-[m
[31m-    if value=='' and output_type=='htm':value='&#160;'[m
[31m-    return value[m
[31m-[m
[31m-[m
[31m-[m
[31m-def check_one_proxy(ip,port):[m
[31m-    global update_array[m
[31m-    global check_in_one_call[m
[31m-    global target_url,target_string,target_timeout[m
[31m-    [m
[31m-    url=target_url[m
[31m-    checkstr=target_string[m
[31m-    timeout=target_timeout[m
[31m-    ip=string.strip(ip)[m
[31m-    proxy=ip+':'+str(port)[m
[31m-	proxies = {'http': 'http://'+proxy+'/'}[m
[31m-	opener = urllib.FancyURLopener(proxies)[m
[31m-	'''opener.addheaders = [[m
[31m-        ('User-agent','Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)')[m
[31m-        ]'''[m
[31m-        [m
[31m-    opener.addheaders = [[m
[31m-        ('User-agent','Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)')[m
[31m-        ][m
[31m-	t1=time.time()[m
[31m-[m
[31m-	if (url.find("?")==-1):[m
[31m-		url=url+'?rnd='+str(random.random())[m
[31m-	else:[m
[31m-		url=url+'&rnd='+str(random.random())[m
[31m-[m
[31m-	try:[m
[31m-		f = opener.open(url)[m
[31m-		s= f.read()	[m
[31m-        #print s[m
[31m-		pos=s.find(checkstr)[m
[31m-	except:[m
[31m-		pos=-1[m
[31m-		pass[m
[31m-	t2=time.time()	[m
[31m-	timeused=t2-t1[m
[31m-	if (timeused<timeout and pos>0):[m
[31m-        active=1[m
[31m-    else:[m
[31m-        active=0    [m
[31m-    update_array.append([ip,port,active,timeused])[m
[31m-    #print '-- proxyUpdate.py > ',len(update_array),' of ',check_in_one_call," ",ip,':',port,'--',str(int(timeused))+'s', '<',active,'>'[m
[31m-[m
[31m-[m
[31m-def get_html(url=''):[m
[31m-	opener = urllib.FancyURLopener({})      #²»Ê¹ÓÃ´úÀí[m
[31m-	#www.my-proxy.com ÐèÒªÏÂÃæÕâ¸öCookie²ÅÄÜÕý³£×¥È¡[m
[31m-	opener.addheaders = [[m
[31m-            ('User-agent','Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)'),[m
[31m-            ('Cookie','permission=1')[m
[31m-            ][m
[31m-	t=time.time()[m
[31m-	if (url.find("?")==-1):[m
[31m-		url=url+'?rnd='+str(random.random())[m
[31m-	else:[m
[31m-		url=url+'&rnd='+str(random.random())[m
[31m-	try:[m
[31m-		f = opener.open(url)[m
[31m-		return f.read()		[m
[31m-	except:[m
[31m-		return ''	[m
[31m-[m
[31m-[m
[31m-    [m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-def build_list_urls_1(page=5):[m
[31m-	page=page+1[m
[31m-	ret=[][m
[31m-	for i in range(1,page):[m
[31m-		ret.append('http://proxy4free.com/page%(num)01d.html'%{'num':i})[m
[31m-	return ret[m
[31m-[m
[31m-def parse_page_1(html=''):[m
[31m-	matches=re.findall(r'''[m
[31m-            <td>([\d\.]+)<\/td>[\s\n\r]*   #ip[m
[31m-            <td>([\d]+)<\/td>[\s\n\r]*     #port[m
[31m-            <td>([^\<]*)<\/td>[\s\n\r]*    #type [m
[31m-            <td>([^\<]*)<\/td>             #area [m
[31m-            ''',html,re.VERBOSE)[m
[31m-	ret=[][m
[31m-	for match in matches:[m
[31m-		ip=match[0][m
[31m-		port=match[1][m
[31m-		type=match[2][m
[31m-		area=match[3][m
[31m-		if (type=='anonymous'):[m
[31m-			type=1[m
[31m-		elif (type=='high anonymity'):[m
[31m-			type=2[m
[31m-		elif (type=='transparent'):[m
[31m-			type=0[m
[31m-		else:[m
[31m-			type=-1[m
[31m-		ret.append([ip,port,type,area])[m
[31m-        if indebug:print '1',ip,port,type,area[m
[31m-	return ret[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-[m
[31m-def build_list_urls_2(page=1):[m
[31m-	return ['http://www.digitalcybersoft.com/ProxyList/fresh-proxy-list.shtml'][m
[31m-[m
[31m-def parse_page_2(html=''):[m
[31m-	matches=re.findall(r'''[m
[31m-        ((?:[\d]{1,3}\.){3}[\d]{1,3})\:([\d]+)      #ip:port[m
[31m-        \s+(Anonymous|Elite Proxy)[+\s]+            #type[m
[31m-        (.+)\r?\n                                   #area[m
[31m-        ''',html,re.VERBOSE)[m
[31m-	ret=[][m
[31m-	for match in matches:[m
[31m-		ip=match[0][m
[31m-		port=match[1][m
[31m-		type=match[2][m
[31m-		area=match[3][m
[31m-		if (type=='Anonymous'):[m
[31m-			type=1[m
[31m-		else:[m
[31m-			type=2[m
[31m-		ret.append([ip,port,type,area])[m
[31m-        if indebug:print '2',ip,port,type,area[m
[31m-	return ret[m
[31m-[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-[m
[31m-def build_list_urls_3(page=15):[m
[31m-	page=page+1[m
[31m-	ret=[][m
[31m-	for i in range(1,page):[m
[31m-		ret.append('http://www.samair.ru/proxy/proxy-%(num)02d.htm'%{'num':i})		[m
[31m-	return ret[m
[31m-[m
[31m-def parse_page_3(html=''):[m
[31m-	matches=re.findall(r'''[m
[31m-        <tr><td><span\sclass\="\w+">(\d{1,3})<\/span>\. #ip(part1)[m
[31m-        <span\sclass\="\w+">                            [m
[31m-        (\d{1,3})<\/span>                               #ip(part2)[m
[31m-        (\.\d{1,3}\.\d{1,3})                            #ip(part3,part4)[m
[31m-[m
[31m-        \:\r?\n(\d{2,5})<\/td>                          #port[m
[31m-        <td>([^<]+)</td>                                #type[m
[31m-        <td>[^<]+<\/td>                                [m
[31m-        <td>([^<]+)<\/td>                               #area[m
[31m-        <\/tr>''',html,re.VERBOSE)	[m
[31m-	ret=[][m
[31m-	for match in matches:[m
[31m-		ip=match[0]+"."+match[1]+match[2][m
[31m-		port=match[3][m
[31m-		type=match[4][m
[31m-		area=match[5][m
[31m-		if (type=='anonymous proxy server'):[m
[31m-			type=1[m
[31m-		elif (type=='high-anonymous proxy server'):[m
[31m-			type=2[m
[31m-		elif (type=='transparent proxy'):[m
[31m-			type=0[m
[31m-		else:[m
[31m-			type=-1[m
[31m-		ret.append([ip,port,type,area])[m
[31m-        if indebug:print '3',ip,port,type,area[m
[31m-	return ret[m
[31m-[m
[31m-[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-def build_list_urls_4(page=3):[m
[31m-	page=page+1[m
[31m-	ret=[][m
[31m-	for i in range(1,page):[m
[31m-		ret.append('http://www.pass-e.com/proxy/index.php?page=%(n)01d'%{'n':i})		[m
[31m-	return ret[m
[31m-[m
[31m-def parse_page_4(html=''):[m
[31m-	matches=re.findall(r"""[m
[31m-        list[m
[31m-        \('(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'        #ip[m
[31m-        \,'(\d{2,5})'                                   #port[m
[31m-        \,'(\d)'                                        #type[m
[31m-        \,'([^']+)'\)                                   #area[m
[31m-        \;\r?\n""",html,re.VERBOSE)	[m
[31m-	ret=[][m
[31m-	for match in matches:[m
[31m-		ip=match[0][m
[31m-		port=match[1][m
[31m-		type=match[2][m
[31m-		area=match[3][m
[31m-		if (type=='1'):      #typeµÄÅÐ¶Ï¿ÉÒÔ²é¿´×¥»ØÀ´µÄÍøÒ³µÄjavascript²¿·Ö[m
[31m-			type=1[m
[31m-		elif (type=='3'):[m
[31m-			type=2[m
[31m-		elif (type=='2'):[m
[31m-			type=0[m
[31m-		else:[m
[31m-			type=-1[m
[31m-        if indebug:print '4',ip,port,type,area            [m
[31m-        #area=unicode(area, 'cp936') [m
[31m-        #area=area.encode('utf8')             [m
[31m-		ret.append([ip,port,type,area])[m
[31m-	return ret[m
[31m-[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-[m
[31m-def build_list_urls_5(page=12):[m
[31m-	page=page+1[m
[31m-	ret=[][m
[31m-	for i in range(1,page):[m
[31m-		ret.append('http://www.ipfree.cn/index2.asp?page=%(num)01d'%{'num':i})		[m
[31m-	return ret[m
[31m-[m
[31m-def parse_page_5(html=''):[m
[31m-	matches=re.findall(r"<font color=black>([^<]*)</font>",html)	[m
[31m-	ret=[][m
[31m-	for index, match in enumerate(matches):[m
[31m-		if (index%3==0):[m
[31m-			ip=matches[index+1][m
[31m-			port=matches[index+2][m
[31m-			type=-1      #¸ÃÍøÕ¾Î´Ìá¹©´úÀí·þÎñÆ÷ÀàÐÍ[m
[31m-            if indebug:print '5',ip,port,type,match [m
[31m-            #area=unicode(match, 'cp936') [m
[31m-            #area=area.encode('utf8') [m
[31m-			ret.append([ip,port,type,area])			[m
[31m-		else:[m
[31m-			continue[m
[31m-	return ret[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-[m
[31m-def build_list_urls_6(page=3):[m
[31m-	page=page+1[m
[31m-	ret=[][m
[31m-	for i in range(1,page):[m
[31m-		ret.append('http://www.cnproxy.com/proxy%(num)01d.html'%{'num':i})		[m
[31m-	return ret[m
[31m-[m
[31m-def parse_page_6(html=''):[m
[31m-	matches=re.findall(r'''<tr>[m
[31m-        <td>([^&]+)                     #ip[m
[31m-        &#8204&#8205[m
[31m-        \:([^<]+)                       #port[m
[31m-        </td>[m
[31m-        <td>HTTP</td>[m
[31m-        <td>[^<]+</td>[m
[31m-        <td>([^<]+)</td>                #area[m
[31m-        </tr>''',html,re.VERBOSE)	[m
[31m-	ret=[][m
[31m-	for match in matches:[m
[31m-		ip=match[0][m
[31m-		port=match[1][m
[31m-		type=-1          #¸ÃÍøÕ¾Î´Ìá¹©´úÀí·þÎñÆ÷ÀàÐÍ[m
[31m-		area=match[2][m
[31m-        if indebug:print '6',ip,port,type,area[m
[31m-        #area=unicode(area, 'cp936') [m
[31m-        #area=area.encode('utf8') [m
[31m-		ret.append([ip,port,type,area])[m
[31m-[m
[31m-	return ret[m
[31m-[m
[31m-[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-def build_list_urls_7(page=1):[m
[31m-	return ['http://www.proxylists.net/http_highanon.txt'][m
[31m-[m
[31m-def parse_page_7(html=''):[m
[31m-    matches=re.findall(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:(\d{2,5})',html)	[m
[31m-	ret=[][m
[31m-	for match in matches:[m
[31m-		ip=match[0][m
[31m-		port=match[1][m
[31m-		type=2         [m
[31m-		area='--'[m
[31m-		ret.append([ip,port,type,area])[m
[31m-        if indebug:print '7',ip,port,type,area[m
[31m-	return ret[m
[31m-[m
[31m-[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-def build_list_urls_8(page=1):[m
[31m-	return ['http://www.proxylists.net/http.txt'][m
[31m-[m
[31m-def parse_page_8(html=''):[m
[31m-    matches=re.findall(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:(\d{2,5})',html)	[m
[31m-	ret=[][m
[31m-	for match in matches:[m
[31m-		ip=match[0][m
[31m-		port=match[1][m
[31m-		type=-1         [m
[31m-		area='--'[m
[31m-		ret.append([ip,port,type,area])[m
[31m-        if indebug:print '8',ip,port,type,area[m
[31m-	return ret[m
[31m-[m
[31m-[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-[m
[31m-def build_list_urls_9(page=6):[m
[31m-	page=page+1[m
[31m-	ret=[][m
[31m-	for i in range(0,page):[m
[31m-		ret.append('http://proxylist.sakura.ne.jp/index.htm?pages=%(n)01d'%{'n':i})		[m
[31m-	return ret[m
[31m-[m
[31m-def parse_page_9(html=''):[m
[31m-    matches=re.findall(r'''[m
[31m-        (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})        #ip[m
[31m-        \:(\d{2,5})                                 #port[m
[31m-        <\/TD>[\s\r\n]*[m
[31m-        <TD>([^<]+)</TD>                            #area[m
[31m-        [\s\r\n]*[m
[31m-        <TD>([^<]+)</TD>                            #type[m
[31m-    ''',html,re.VERBOSE)	[m
[31m-	ret=[][m
[31m-	for match in matches:[m
[31m-		ip=match[0][m
[31m-		port=match[1][m
[31m-		type=match[3]         [m
[31m-		area=match[2][m
[31m-        if (type=='Anonymous'):[m
[31m-            type=1[m
[31m-        else:[m
[31m-            type=-1[m
[31m-		ret.append([ip,port,type,area])[m
[31m-        if indebug:print '9',ip,port,type,area[m
[31m-	return ret[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-def build_list_urls_10(page=5):[m
[31m-	page=page+1[m
[31m-	ret=[][m
[31m-	for i in range(1,page):[m
[31m-		ret.append('http://www.publicproxyservers.com/page%(n)01d.html'%{'n':i})		[m
[31m-	return ret[m
[31m-[m
[31m-def parse_page_10(html=''):[m
[31m-    matches=re.findall(r'''[m
[31m-        (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})    #ip[m
[31m-        <\/td>[\s\r\n]*[m
[31m-        <td[^>]+>(\d{2,5})<\/td>                #port[m
[31m-        [\s\r\n]*[m
[31m-        <td>([^<]+)<\/td>                       #type[m
[31m-        [\s\r\n]*[m
[31m-        <td>([^<]+)<\/td>                       #area[m
[31m-        ''',html,re.VERBOSE)[m
[31m-	ret=[][m
[31m-	for match in matches:[m
[31m-		ip=match[0][m
[31m-		port=match[1][m
[31m-		type=match[2]         [m
[31m-		area=match[3][m
[31m-        if (type=='high anonymity'):[m
[31m-            type=2[m
[31m-        elif (type=='anonymous'):[m
[31m-            type=1[m
[31m-        elif (type=='transparent'):[m
[31m-            type=0[m
[31m-        else:[m
[31m-            type=-1[m
[31m-		ret.append([ip,port,type,area])[m
[31m-        if indebug:print '10',ip,port,type,area[m
[31m-	return ret[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-def build_list_urls_11(page=10):[m
[31m-	page=page+1[m
[31m-	ret=[][m
[31m-	for i in range(1,page):[m
[31m-		ret.append('http://www.my-proxy.com/list/proxy.php?list=%(n)01d'%{'n':i})[m
[31m-[m
[31m-    ret.append('http://www.my-proxy.com/list/proxy.php?list=s1')	[m
[31m-    ret.append('http://www.my-proxy.com/list/proxy.php?list=s2')	[m
[31m-    ret.append('http://www.my-proxy.com/list/proxy.php?list=s3')	    [m
[31m-	return ret[m
[31m-[m
[31m-def parse_page_11(html=''):[m
[31m-    matches=re.findall(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:(\d{2,5})',html)	[m
[31m-	ret=[]    [m
[31m-[m
[31m-    if (html.find('(Level 1)')>0):[m
[31m-        type=2[m
[31m-    elif (html.find('(Level 2)')>0):[m
[31m-        type=1[m
[31m-    elif (html.find('(Level 3)')>0):[m
[31m-        type=0[m
[31m-    else:[m
[31m-        type=-1[m
[31m-[m
[31m-	for match in matches:[m
[31m-		ip=match[0][m
[31m-		port=match[1][m
[31m-		area='--'        [m
[31m-		ret.append([ip,port,type,area])[m
[31m-        if indebug:print '11',ip,port,type,area[m
[31m-	return ret[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-def build_list_urls_12(page=4):[m
[31m-	ret=[][m
[31m-    ret.append('http://www.cybersyndrome.net/plr4.html')[m
[31m-    ret.append('http://www.cybersyndrome.net/pla4.html')[m
[31m-    ret.append('http://www.cybersyndrome.net/pld4.html')[m
[31m-    ret.append('http://www.cybersyndrome.net/pls4.html')[m
[31m-	return ret[m
[31m-[m
[31m-def parse_page_12(html=''):[m
[31m-    matches=re.findall(r'''[m
[31m-        onMouseOver\=[m
[31m-        "s\(\'(\w\w)\'\)"                           #area[m
[31m-        \sonMouseOut\="d\(\)"\s?c?l?a?s?s?\=?"?[m
[31m-        (\w?)                                       #type    [m
[31m-        "?>[m
[31m-        (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})        #ip[m
[31m-        \:(\d{2,5})                                 #port[m
[31m-        ''',html,re.VERBOSE)	[m
[31m-	ret=[]    [m
[31m-	for match in matches:[m
[31m-		ip=match[2][m
[31m-		port=match[3][m
[31m-		area=match[0][m
[31m-        type=match[1][m
[31m-        if (type=='A'):[m
[31m-            type=2[m
[31m-        elif (type=='B'):[m
[31m-            type=1[m
[31m-        else:[m
[31m-            type=0[m
[31m-		ret.append([ip,port,type,area])[m
[31m-        if indebug:print '12',ip,port,type,area[m
[31m-	return ret[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-[m
[31m-def build_list_urls_13(page=3):[m
[31m-    url='http://www.checkedproxylists.com/'[m
[31m-    html=get_html(url)    [m
[31m-    matchs=re.findall(r"""[m
[31m-        href\='([^']+)'>(?:high_anonymous|anonymous|transparent)[m
[31m-        \sproxy\slist<\/a>""",html,re.VERBOSE)    [m
[31m-	return map(lambda x: url+x, matchs)[m
[31m-[m
[31m-def parse_page_13(html=''):[m
[31m-    html_matches=re.findall(r"eval\(unescape\('([^']+)'\)",html)	[m
[31m-    if (len(html_matches)>0):[m
[31m-        conent=urllib.unquote(html_matches[0])[m
[31m-    matches=re.findall(r"""<td>(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})<\/td>[m
[31m-            <td>(\d{2,5})<\/td><\/tr>""",conent,re.VERBOSE)        [m
[31m-    ret=[][m
[31m-    if   (html.find('<title>Checked Proxy Lists - proxylist_high_anonymous_')>0):[m
[31m-        type=2[m
[31m-    elif (html.find('<title>Checked Proxy Lists - proxylist_anonymous_')>0):                     [m
[31m-        type=1[m
[31m-    elif (html.find('<title>Checked Proxy Lists - proxylist_transparent_')>0):[m
[31m-        type=0[m
[31m-    else:[m
[31m-        type=-1[m
[31m-[m
[31m-	for match in matches:[m
[31m-		ip=match[0][m
[31m-		port=match[1][m
[31m-		area='--'[m
[31m-    	ret.append([ip,port,type,area])[m
[31m-        if indebug:print '13',ip,port,type,area[m
[31m-	return ret[m
[31m-[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by xwake[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-def build_list_urls_14(page=9):[m
[31m-	ret=[][m
[31m-	for i in range(1,page+1):[m
[31m-		ret.append('http://www.cnproxy.com/proxy%(n)01d.html'%{'n':i})		[m
[31m-    ret.append('http://www.cnproxy.com/proxy10.html')	[m
[31m-	return ret[m
[31m-[m
[31m-def parse_page_14(html=''):[m
[31m-[m
[31m-    matches = re.findall(r'''[m
[31m-        (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})    #ip[m
[31m-        .*\+(\S{3,9})\)                         #port[m
[31m-        .*<td>.*<td>.*<td>(.*)</td>             #area[m
[31m-        ''',html,re.VERBOSE)[m
[31m-[m
[31m-	ret=[][m
[31m-    #print '   matches:' + str(len(matches))[m
[31m-	for match in matches:[m
[31m-		ip=match[0][m
[31m-		port=match[1][m
[31m-		#type=match[2] [m
[31m-        type= -1 [m
[31m-		area=match[2][m
[31m-[m
[31m-        port = port.replace('+','').replace('c','1').replace('a','2').replace('v','3').replace('m','4').replace('b','5')[m
[31m-        port = port.replace('w','6').replace('i','7').replace('r','8').replace('l','9').replace('q','0')[m
[31m-		ret.append([ip,port,type,area])[m
[31m-        if indebug: print '10',ip,port,type,area[m
[31m-	return ret[m
[31m-[m
[31m-[m
[31m-################################################################################[m
[31m-#[m
[31m-##        by Go_Rush(°¢Ë´) from http://ashun.cnblogs.com/[m
[31m-#[m
[31m-################################################################################[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-#Ïß³ÌÀà[m
[31m-[m
[31m-class TEST(threading.Thread):[m
[31m-    def __init__(self,action,index=None,checklist=None):[m
[31m-        threading.Thread.__init__(self)[m
[31m-        self.index =index[m
[31m-        self.action=action[m
[31m-        self.checklist=checklist[m
[31m-[m
[31m-    def run(self):[m
[31m-        if (self.action=='getproxy'):[m
[31m-            get_proxy_one_website(self.index)[m
[31m-        else:[m
[31m-            check_proxy(self.index,self.checklist)[m
[31m-         [m
[31m-        thread.exit()[m
[31m-[m
[31m-def check_proxy(index,checklist=[]):[m
[31m-    start = datetime.datetime.now()[m
[31m-    for item in checklist:[m
[31m-        check_one_proxy(item[0],item[1])[m
[31m-    end = datetime.datetime.now()[m
[31m-    import thread[m
[31m-    format_start = '%s:%s.%s'%(start.minute,start.second,start.microsecond)[m
[31m-    format_end = '%s:%s.%s'%(end.minute,end.second,end.microsecond)[m
[31m-    #sleep(10)[m
[31m-    #print '--proxyUpdate.py > ºÄ',(end-start),'s', threading.active_count(),'(',thread.get_ident(),')',format_start,'-',format_end[m
[31m-[m
[31m-#ÊØ»¤×ÓÏß³Ì£¬ÓÐ¹æ¶¨µÄ½áÊøÊ±¼ä£¬ÈÃÆäËùÓÐËïÏß³ÌËæÖ®½áÊø[m
[31m-def daemonSub (tHandles,timeout=30):[m
[31m-    print '--proxyUpdate.py > daemonSub() is start.',threading.active_count(),'/',datetime.datetime.now()[m
[31m-    [m
[31m-    for thi in tHandles:[m
[31m-        thi.daemon = True[m
[31m-        thi.start()[m
[31m-    [m
[31m-    #for t in tHandles:[m
[31m-    #    t.join(1)[m
[31m-    [m
[31m-    #sleep(timeout)[m
[31m-    print '--proxyUpdate.py > daemonSub() is finish.',threading.active_count(),'/',datetime.datetime.now()[m
[31m-[m
[31m-def patch_check_proxy(threadCount,action=''):[m
[31m-    global check_in_one_call,skip_check_in_hour,conn[m
[31m-    threads=[][m
[31m-    if   (action=='checknew'):        #¼ì²éËùÓÐÐÂ¼ÓÈë£¬²¢ÇÒ´ÓÎ´±»¼ì²é¹ýµÄ[m
[31m-        orderby=' `time_added` desc '[m
[31m-        strwhere=' `active` is null '[m
[31m-    elif (action=='checkok'):         #ÔÙ´Î¼ì²é ÒÔÇ°ÒÑ¾­ÑéÖ¤³É¹¦µÄ ´úÀí[m
[31m-        orderby=' `time_checked` asc '[m
[31m-        strwhere=' `active`=1 '[m
[31m-    elif (action=='checkfail'):       #ÔÙ´Î¼ì²éÒÔÇ°ÑéÖ¤Ê§°ÜµÄ´úÀí[m
[31m-        orderby=' `time_checked` asc '[m
[31m-        strwhere=' `active`=0 '           [m
[31m-    else:                            #¼ì²éËùÓÐµÄ [m
[31m-        orderby=' `time_checked` asc '[m
[31m-        strwhere=' 1=1 '           [m
[31m-    sql="""[m
[31m-           select `ip`,`port` FROM `proxier` where[m
[31m-                 `time_checked` < (strftime('%s','now')-""" + str(skip_check_in_hour*3600) + """) [m
[31m-                 and """ + strwhere + """ [m
[31m-            	 order by """+orderby+""" [m
[31m-            	 limit """+str(check_in_one_call)+""" [m
[31m-        """[m
[31m-    #print '--proxyUpdate.py > ',sql[m
[31m-    conn.execute(sql)[m
[31m-    rows = conn.fetchall()   [m
[31m-[m
[31m-    check_in_one_call=len(rows)[m
[31m-    [m
[31m-    #¼ÆËãÃ¿¸öÏß³Ì½«Òª¼ì²éµÄ´úÀí¸öÊý[m
[31m-    if len(rows)>=threadCount:[m
[31m-        num_in_one_thread=len(rows)/threadCount   [m
[31m-    else:[m
[31m-        num_in_one_thread=1[m
[31m-[m
[31m-    threadCount=threadCount+1[m
[31m-    print "--proxyUpdate.py > ÏÖÔÚ¿ªÊ¼ÑéÖ¤ÒÔÏÂ´úÀí·þÎñÆ÷....."[m
[31m-    for index in range(14,threadCount):        [m
[31m-     #·ÖÅäÃ¿¸öÏß³ÌÒª¼ì²éµÄchecklist,²¢°ÑÄÇÐ©Ê£ÓàÈÎÎñÁô¸ø×îºóÒ»¸öÏß³Ì               [m
[31m-        checklist=rows[(index-1)*num_in_one_thread:index*num_in_one_thread]     [m
[31m-        if (index+1==threadCount):              [m
[31m-            checklist=rows[(index-1)*num_in_one_thread:][m
[31m-[m
[31m-        t=TEST(action,index,checklist)[m
[31m-        #t.setDaemon(True)[m
[31m-        #t.start()[m
[31m-        threads.append((t))[m
[31m-    [m
[31m-    daemonThread = threading.Thread(target = daemonSub, args = (threads,1))[m
[31m-    daemonThread.start()[m
[31m-    daemonThread.join(daemonSubTimeOut)    [m
[31m-    print '--proxyUpdate.py > daemonThread.alive:',daemonThread.is_alive(),'/',daemonThread.ident,threading.active_count(),datetime.datetime.now()[m
[31m-    tcount = 0[m
[31m-    fcount = 0[m
[31m-    for th in threads:[m
[31m-        if th.isAlive() == True:[m
[31m-            tcount += 1[m
[31m-        else:[m
[31m-            fcount += 1[m
[31m-        [m
[31m-    print '--proxyUpdate.py > alive:',tcount,'+',fcount,'=',len(threads)[m
[31m-    print '--proxyUpdate.py > ·ÖÅä¼ì²éÏß³ÌÍê³É'[m
[31m-    '''[m
[31m-    for thread in threads:[m
[31m-        import datetime[m
[31m-        #print '--proxyUpdate.py >', datetime.datetime.now(),thread[m
[31m-        start = datetime.datetime.now()[m
[31m-        thread.join(2)    [m
[31m-        end = datetime.datetime.now()[m
[31m-        #print '--proxyUpdate.py >', datetime.datetime.now(),thread[m
[31m-    print '--proxyUpdate.py > join()Ïß³ÌÍê³É'[m
[31m-    '''[m
[31m-    #time.sleep(5)[m
[31m-    update_proxies()            #°ÑËùÓÐµÄ¼ì²é½á¹û¸üÐÂµ½Êý¾Ý¿â[m
[31m-    [m
[31m-[m
[31m-def get_proxy_one_website(index):[m
[31m-    global proxy_array[m
[31m-    func='build_list_urls_'+str(index)[m
[31m-    parse_func=eval('parse_page_'+str(index))[m
[31m-    urls=eval(func+'()')[m
[31m-    print '--proxyUpdate.py > get_proxy_one_website.urls.size: ' +  str(len(urls)) +'-'+ str(index)[m
[31m-[m
[31m-    for url in urls:[m
[31m-        html=get_html(url)[m
[31m-        #print '   url:' + url[m
[31m-        #print '   html:'+html[m
[31m-        proxylist=parse_func(html)[m
[31m-        for proxy in proxylist:[m
[31m-            ip=string.strip(proxy[0])[m
[31m-            port=string.strip(proxy[1])[m
[31m-            if (re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$").search(ip)):[m
[31m-                type=str(proxy[2])[m
[31m-                area=string.strip(proxy[3])[m
[31m-                proxy_array.append([ip,port,type,area])[m
[31m-[m
[31m-[m
[31m-def get_all_proxies():[m
[31m-    global web_site_count,conn,skip_get_in_hour[m
[31m-[m
[31m-    #¼ì²é×î½üÌí¼Ó´úÀíÊÇÊ²Ã´Ê±ºò£¬±ÜÃâ¶ÌÊ±¼äÄÚ¶à´Î×¥È¡[m
[31m-    rs=conn.execute("select max(`time_added`) from `proxier` limit 1")[m
[31m-    last_add=rs.fetchone()[0][m
[31m-    if (last_add and my_unix_timestamp()-last_add<skip_get_in_hour*3600):   [m
[31m-        print """[m
[31m- ·ÅÆú×¥È¡´úÀíÁÐ±í![m
[31m- ÒòÎª×î½üÒ»´Î×¥È¡´úÀíµÄÊ±¼äÊÇ: %(t)1s[m
[31m- Õâ¸öÊ±¼ä¾àÀëÏÖÔÚµÄÊ±¼äÐ¡ÓÚ×¥È¡´úÀíµÄ×îÐ¡Ê±¼ä¼ä¸ô: %(n)1d Ð¡Ê±[m
[31m- Èç¹ûÒ»¶¨ÒªÏÖÔÚ×¥È¡´úÀí£¬ÇëÐÞ¸ÄÈ«¾Ö±äÁ¿: skip_get_in_hour µÄÖµ[m
[31m-            """%{'t':formattime(last_add),'n':skip_get_in_hour}[m
[31m-        return[m
[31m-    [m
[31m-    print "--proxyUpdate.py > ÏÖÔÚ¿ªÊ¼´ÓÒÔÏÂ"+str(web_site_count)+"¸öÍøÕ¾×¥È¡´úÀíÁÐ±í...."[m
[31m-    threads=[][m
[31m-    count=web_site_count+1[m
[31m-    # 20140218 ²»ÔÙÈ¡ÒÔÇ°µÄÍøÕ¾[m
[31m-    # for index in range(1,count):[m
[31m-    for index in range(13,count):[m
[31m-        t=TEST('getproxy',index)[m
[31m-        #t.setDaemon(True)[m
[31m-        #t.start()[m
[31m-        threads.append((t))[m
[31m-[m
[31m-    daemonThread = threading.Thread(target = daemonSub, args = (threads,1))[m
[31m-    daemonThread.start()[m
[31m-    daemonThread.join(daemonSubTimeOut)    [m
[31m-    print '--proxyUpdate.py > daemonThread.alive:',daemonThread.is_alive(),'/',daemonThread.ident,threading.active_count(),datetime.datetime.now()[m
[31m-    tcount = 0[m
[31m-    fcount = 0[m
[31m-    for th in threads:[m
[31m-        if th.isAlive() == True:[m
[31m-            tcount += 1[m
[31m-        else:[m
[31m-            fcount += 1[m
[31m-        [m
[31m-    print '--proxyUpdate.py > alive:',tcount,'+',fcount,'=',len(threads)[m
[31m-    print '--proxyUpdate.py > ·ÖÅä¼ì²éÏß³ÌÍê³É'[m
[31m-[m
[31m-[m
[31m-    add_proxies_to_db()[m
[31m-[m
[31m-def add_proxies_to_db():[m
[31m-    global proxy_array[m
[31m-    count=len(proxy_array)[m
[31m-    for i in range(count):[m
[31m-        item=proxy_array[i][m
[31m-        sql="""insert into `proxier` (`ip`,`port`,`type`,`time_added`,`area`) values[m
[31m-        ('"""+item[0]+"',"+item[1]+","+item[2]+",strftime('%s','now'),'"+clean_string(item[3])+"')"[m
[31m-        sql = unicode(sql,"gbk")[m
[31m-        try:[m
[31m-            conn.execute(sql)[m
[31m-            #if indebug == 1 : print "%(num)2.1f\%\t"%{'num':100*(i+1)/count},item[0],":",item[1][m
[31m-        except:[m
[31m-            pass [m
[31m-[m
[31m-[m
[31m-def update_proxies():[m
[31m-    global update_array[m
[31m-    i = 0[m
[31m-    for item in update_array:[m
[31m-        sql='''[m
[31m-             update `proxier` set `time_checked`=%(time_checked)s, [m
[31m-                `active`=%(active)01d, [m
[31m-                 `speed`=%(speed)02.3f                 [m
[31m-                 where `ip`='%(ip)01s' and `port`=%(port)01d                            [m
[31m-            '''%{'active':item[2],'speed':item[3],'ip':item[0],'port':item[1],'time_checked':"strftime('%s','now')"}[m
[31m-        #print sql[m
[31m-        #conn.execute(sql)  [m
[31m-[m
[31m-        try:[m
[31m-            conn.execute(sql)  [m
[31m-            i += 1[m
[31m-        except:[m
[31m-            print '--proxyUpdate.py > update_proxies() is error'[m
[31m-            pass[m
[31m-    print '--proxyUpdate.py > success check proxier %s rows'% i[m
[31m-[m
[31m-#sqlite ²»Ö§³Ö unix_timestampÕâ¸öº¯Êý,ËùÒÔÎÒÃÇÒª×Ô¼ºÊµÏÖ[m
[31m-def my_unix_timestamp():[m
[31m-    return int(time.time())[m
[31m-[m
[31m-def clean_string(s):[m
[31m-    tmp=re.sub(r"['\,\s\\\/]", ' ', s)[m
[31m-    return re.sub(r"\s+", ' ', tmp)[m
[31m-[m
[31m-def formattime(t):[m
[31m-    return time.strftime('%c',time.gmtime(t+8*3600))[m
[31m-[m
[31m-[m
[31m-def open_database():[m
[31m-    global db,conn,day_keep[m
[31m-    #,dbfile    [m
[31m-    [m
[31m-    try:[m
[31m-        from pysqlite2 import dbapi2 as sqlite[m
[31m-    except:[m
[31m-        print """[m
[31m-        ±¾³ÌÐòÊ¹ÓÃ sqlite ×öÊý¾Ý¿âÀ´±£´æÊý¾Ý£¬ÔËÐÐ±¾³ÌÐòÐèÒª pysqliteµÄÖ§³Ö[m
[31m-        python ·ÃÎÊ sqlite ÐèÒªµ½ÏÂÃæµØÖ·ÏÂÔØÕâ¸öÄ£¿é pysqlite,  272kb[m
[31m-        http://initd.org/tracker/pysqlite/wiki/pysqlite#Downloads[m
[31m-        ÏÂÔØ(Windows binaries for Python 2.x)[m
[31m-        """[m
[31m-        raise SystemExit[m
[31m-[m
[31m-    try:[m
[31m-        '''[m
[31m-        db = sqlite.connect(dbfile,isolation_level=None)    [m
[31m-        db.text_factory = str[m
[31m-        #print ' set db coding '[m
[31m-        #print(sys.getdefaultencoding())[m
[31m-        reload(sys)[m
[31m-        sys.setdefaultencoding('gbk')[m
[31m-        db.create_function("unix_timestamp", 0, my_unix_timestamp)  [m
[31m-        conn  = db.cursor()[m
[31m-        '''[m
[31m-        from django  import db[m
[31m-        db.text_factory = str[m
[31m-[m
[31m-        reload(sys)[m
[31m-        sys.setdefaultencoding('gbk')[m
[31m-[m
[31m-        from django.db import connection[m
[31m-        conn = connection.cursor()[m
[31m-    except:[m
[31m-        print "--proxyUpdate.py > ²Ù×÷sqliteÊý¾Ý¿âÊ§°Ü£¬ÇëÈ·±£½Å±¾ËùÔÚÄ¿Â¼¾ßÓÐÐ´È¨ÏÞ"[m
[31m-        raise SystemExit[m
[31m-[m
[31m-    sql="""[m
[31m-       /* ip:     Ö»Òª´¿ipµØÖ·(xxx.xxx.xxx.xxx)µÄ´úÀí */[m
[31m-       /* type:   ´úÀíÀàÐÍ 2:¸ßÄä 1:ÆÕÄä 0:Í¸Ã÷ -1: Î´Öª */[m
[31m-       /* status: Õâ¸ö×Ö¶Î±¾³ÌÐò»¹Ã»ÓÐÓÃµ½£¬ÁôÔÚÕâÀï×÷ÒÔºóÀ©Õ¹*/ [m
[31m-       /* active: ´úÀíÊÇ·ñ¿ÉÓÃ  1:¿ÉÓÃ  0:²»¿ÉÓÃ  */ [m
[31m-       /* speed:  ÇëÇóÏàÓ¦Ê±¼ä£¬speedÔ½Ð¡ËµÃ÷ËÙ¶ÈÔ½¿ì */ [m
[31m-[m
[31m-        CREATE TABLE IF NOT EXISTS  `proxier` ([m
[31m-          `ip` varchar(15) NOT NULL default '',    [m
[31m-          `port` int(6)  NOT NULL default '0',[m
[31m-          `type` int(11) NOT NULL default '-1',    [m
[31m-          `status` int(11) default '0',            [m
[31m-          `active` int(11) default NULL,           [m
[31m-          `time_added` int(11)  NOT NULL default '0',  [m
[31m-          `time_checked` int(11) default '0',      [m
[31m-          `time_used` int(11)  default '0',            [m
[31m-          `speed` float default NULL,             [m
[31m-          `area` varchar(120) default '--',      /*  ´úÀí·þÎñÆ÷ËùÔÚÎ»ÖÃ */[m
[31m-          PRIMARY KEY (`ip`) [m
[31m-        );[m
[31m-        /*[m
[31m-        CREATE INDEX IF NOT EXISTS `type`        ON proxier(`type`);[m
[31m-        CREATE INDEX IF NOT EXISTS `time_used`   ON proxier(`time_used`);[m
[31m-        CREATE INDEX IF NOT EXISTS `speed`       ON proxier(`speed`);[m
[31m-        CREATE INDEX IF NOT EXISTS `active`      ON proxier(`active`);[m
[31m-        */[m
[31m-        PRAGMA encoding = "utf-8";      /* Êý¾Ý¿âÓÃ utf-8±àÂë±£´æ */[m
[31m-    """[m
[31m-    conn.executescript(sql)[m
[31m-    conn.execute("""DELETE FROM `proxier`[m
[31m-                        where `time_added`< (strftime('%s','now')-?) [m
[31m-                        and `active`=0""",(day_keep*86400,))      [m
[31m-[m
[31m-    conn.execute("select count(`ip`) from `proxier`")[m
[31m-    m1=conn.fetchone()[0][m
[31m-    if m1 is None:return[m
[31m-[m
[31m-    conn.execute("""select count(`time_checked`) [m
[31m-                        from `proxier` where `time_checked`>0""")[m
[31m-    m2=conn.fetchone()[0][m
[31m-    [m
[31m-    if m2==0:[m
[31m-        m3,m4,m5=0,"ÉÐÎ´¼ì²é","ÉÐÎ´¼ì²é"[m
[31m-    else:[m
[31m-        conn.execute("select count(`active`) from `proxier` where `active`=1")[m
[31m-        m3=conn.fetchone()[0][m
[31m-        conn.execute("""select max(`time_checked`), min(`time_checked`) [m
[31m-                             from `proxier` where `time_checked`>0 limit 1""")[m
[31m-        rs=conn.fetchone()[m
[31m-        m4,m5=rs[0],rs[1][m
[31m-        m4=formattime(m4)[m
[31m-        m5=formattime(m5)[m
[31m-    print """[m
[31m-    --proxyUpdate.py > \n[m
[31m-    ¹²%(m1)1dÌõ´úÀí£¬ÆäÖÐ%(m2)1d¸ö´úÀí±»ÑéÖ¤¹ý£¬%(m3)1d¸ö´úÀíÑéÖ¤ÓÐÐ§¡£[m
[31m-            ×î½üÒ»´Î¼ì²éÊ±¼äÊÇ£º%(m4)1s[m
[31m-            ×îÔ¶Ò»´Î¼ì²éÊ±¼äÊÇ: %(m5)1s[m
[31m-    ÌáÊ¾£º¶ÔÓÚ¼ì²éÊ±¼ä³¬¹ý24Ð¡Ê±µÄ´úÀí£¬Ó¦¸ÃÖØÐÂ¼ì²éÆäÓÐÐ§ÐÔ[m
[31m-    """%{'m1':m1,'m2':m2,'m3':m3,'m4':m4,'m5':m5}[m
[31m-[m
[31m-[m
[31m-[m
[31m-def close_database():[m
[31m-    global db,conn[m
[31m-    conn.close()[m
[31m-    db.close()[m
[31m-    conn=None[m
[31m-    db=None[m
[31m-[m
[31m-if __name__ == '__main__':[m
[31m-    open_database()[m
[31m-    get_all_proxies()[m
[31m-    patch_check_proxy(thread_num)[m
[31m-    output_file() [m
[31m-    close_database()[m
[31m-    print "--proxyUpdate.py > ËùÓÐ¹¤×÷ÒÑ¾­Íê³É"[m
[31m-[m
[31m-[m
[31m-def main ():[m
[31m-    [m
[31m-    open_database()[m
[31m-    get_all_proxies()[m
[31m-    patch_check_proxy(thread_num)[m
[31m-    #output_file() [m
[31m-    #close_database()[m
[31m-    print "--proxyUpdate.py > ËùÓÐ¹¤×÷ÒÑ¾­Íê³É"[m
[31m-    [m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-    [m
[1mdiff --git a/proxy_cron/proxyUpdate.pyc b/proxy_cron/proxyUpdate.pyc[m
[1mdeleted file mode 100644[m
[1mindex 392f478..0000000[m
Binary files a/proxy_cron/proxyUpdate.pyc and /dev/null differ
[1mdiff --git a/proxy_cron/tests.py b/proxy_cron/tests.py[m
[1mdeleted file mode 100644[m
[1mindex 7ce503c..0000000[m
[1m--- a/proxy_cron/tests.py[m
[1m+++ /dev/null[m
[36m@@ -1,3 +0,0 @@[m
[31m-from django.test import TestCase[m
[31m-[m
[31m-# Create your tests here.[m
[1mdiff --git a/proxy_cron/views.py b/proxy_cron/views.py[m
[1mdeleted file mode 100644[m
[1mindex 91ea44a..0000000[m
[1m--- a/proxy_cron/views.py[m
[1m+++ /dev/null[m
[36m@@ -1,3 +0,0 @@[m
[31m-from django.shortcuts import render[m
[31m-[m
[31m-# Create your views here.[m
[1mdiff --git a/quickblog/__init__.py b/quickblog/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex 80c9654..0000000[m
[1m--- a/quickblog/__init__.py[m
[1m+++ /dev/null[m
[36m@@ -1,33 +0,0 @@[m
[31m-[m
[31m-[m
[31m-[m
[31m-from __future__ import absolute_import[m
[31m-from hyz import apihelper[m
[31m-[m
[31m-'''[m
[31m-print '----------------------------------'[m
[31m-apihelper.info(django_cron)[m
[31m-print '----------------------------------'[m
[31m-apihelper.info(django_cron.autodiscover())[m
[31m-'''[m
[31m-[m
[31m-# This will make sure the app is always imported when[m
[31m-# Django starts so that shared_task will use this app.[m
[31m-#from .celery_scheduler import CELERYBEAT_SCHEDULE as cs[m
[31m-#from .celeryInst import app as celery_app[m
[31m-[m
[31m-[m
[31m-'''[m
[31m-from celery.task.base import periodic_task[m
[31m-from django.utils.timezone import timedelta[m
[31m-[m
[31m-print '----init---'[m
[31m-@periodic_task(run_every=timedelta(seconds=2))[m
[31m-def my_background_process():[m
[31m-    # insert code[m
[31m-    print '----somethin---'[m
[31m-[m
[31m-[m
[31m-    '''[m
[31m-[m
[31m-[m
[1mdiff --git a/quickblog/__init__.pyc b/quickblog/__init__.pyc[m
[1mdeleted file mode 100644[m
[1mindex 7c4959f..0000000[m
Binary files a/quickblog/__init__.pyc and /dev/null differ
[1mdiff --git a/quickblog/cron.py b/quickblog/cron.py[m
[1mdeleted file mode 100644[m
[1mindex 089a26f..0000000[m
[1m--- a/quickblog/cron.py[m
[1m+++ /dev/null[m
[36m@@ -1,25 +0,0 @@[m
[31m-[m
[31m-import sys[m
[31m-sys.path.append("../")[m
[31m-from django_cron import cronScheduler, Job[m
[31m-[m
[31m-# This is a function I wrote to check a feedback email address[m
[31m-# and add it to our database. Replace with your own imports[m
[31m-#from MyMailFunctions import check_feedback_mailbox[m
[31m-from blog import sourcelink[m
[31m-[m
[31m-class CheckNews(Job):[m
[31m-	"""[m
[31m-	Cron Job that checks the lgr users mailbox and adds any [m
[31m-	approved senders' attachments to the db[m
[31m-	"""[m
[31m-[m
[31m-	# run every 300 seconds (5 minutes)[m
[31m-	run_every = 3[m
[31m-		[m
[31m-	def job(self):[m
[31m-		# This will be executed every 5 minutes[m
[31m-		sourcelink.test()[m
[31m-[m
[31m-print '--cronScheduler.register is start.'[m
[31m-cronScheduler.register(CheckNews)[m
\ No newline at end of file[m
[1mdiff --git a/quickblog/settings.py b/quickblog/settings.py[m
[1mdeleted file mode 100644[m
[1mindex a3bc4e2..0000000[m
[1m--- a/quickblog/settings.py[m
[1m+++ /dev/null[m
[36m@@ -1,138 +0,0 @@[m
[31m-"""[m
[31m-Django settings for quickblog project.[m
[31m-[m
[31m-For more information on this file, see[m
[31m-https://docs.djangoproject.com/en/1.6/topics/settings/[m
[31m-[m
[31m-For the full list of settings and their values, see[m
[31m-https://docs.djangoproject.com/en/1.6/ref/settings/[m
[31m-"""[m
[31m-[m
[31m-# Build paths inside the project like this: os.path.join(BASE_DIR, ...)[m
[31m-import os[m
[31m-BASE_DIR = os.path.dirname(os.path.dirname(__file__))[m
[31m-[m
[31m-[m
[31m-[m
[31m-# Quick-start development settings - unsuitable for production[m
[31m-# See https://docs.djangoproject.com/en/1.6/howto/deployment/checklist/[m
[31m-[m
[31m-# SECURITY WARNING: keep the secret key used in production secret![m
[31m-SECRET_KEY = 'vp-5#1!1k8b9adr@(d^tmom*ca4$^6bba0u_3%ps3*y5u-3*$2'[m
[31m-[m
[31m-# SECURITY WARNING: don't run with debug turned on in production![m
[31m-DEBUG = True[m
[31m-[m
[31m-TEMPLATE_DEBUG = True[m
[31m-[m
[31m-ALLOWED_HOSTS = [][m
[31m-[m
[31m-[m
[31m-# Application definition[m
[31m-[m
[31m-#import djcelery[m
[31m-#djcelery.setup_loader()[m
[31m-[m
[31m-INSTALLED_APPS = ([m
[31m-    'django.contrib.admin',[m
[31m-    'django.contrib.auth',[m
[31m-    'django.contrib.contenttypes',[m
[31m-    'django.contrib.sessions',[m
[31m-    'django.contrib.messages',[m
[31m-    'django.contrib.staticfiles',[m
[31m-    'blog',[m
[31m-    'djcelery',[m
[31m-    'celerytest',[m
[31m-    #'djangotasks',[m
[31m-    #'lambda',[m
[31m-    'kombu.transport.django',[m
[31m-    'django_cron',[m
[31m-    'proxy_cron',[m
[31m-    'checknews_cron',[m
[31m-)[m
[31m-[m
[31m-#BROKER_URL = 'django://'[m
[31m-#CELERY_IMPORTS=("celerytest.tasks","quickblog.tasks","quickblog.task3")[m
[31m-#CELERYBEAT_SCHEDULER = "djcelery.schedulers.DatabaseScheduler"[m
[31m-[m
[31m-#celery [m
[31m-#BROKER_URL = 'django://'[m
[31m-#CELERY_ACCEPT_CONTENT = ['json'][m
[31m-#CELERY_RESULT_BACKEND='db+sqlite:///results.sqlite'[m
[31m-'''celerytest.conf.update([m
[31m-    CELERY_RESULT_BACKEND='djcelery.backends.database:DatabaseBackend',[m
[31m-)'''[m
[31m-#DJANGOTASK_DAEMON_THREAD = True[m
[31m-[m
[31m-[m
[31m-[m
[31m-'''[m
[31m-from datetime import timedelta[m
[31m-CELERYBEAT_SCHEDULE = {[m
[31m-    'add-every-30-seconds': {[m
[31m-        'task': 'celerytest.tasks.add',[m
[31m-        'schedule': timedelta(seconds=3),[m
[31m-        'args': (16, 16)[m
[31m-    },[m
[31m-}[m
[31m-CELERY_APP="quickblog.celeryInst"[m
[31m-CELERY_APP="celeryInst"[m
[31m-[m
[31m-CELERY_IMPORTS=("celerytest.tasks",)[m
[31m-CELERY_IMPORTS=("tasks",)[m
[31m-[m
[31m-[m
[31m-print '--ok--',dir(djcelery)[m
[31m-print '--ok--',djcelery.__doc__[m
[31m-'''[m
[31m-[m
[31m-MIDDLEWARE_CLASSES = ([m
[31m-    'django.contrib.sessions.middleware.SessionMiddleware',[m
[31m-    'django.middleware.common.CommonMiddleware',[m
[31m-    'django.middleware.csrf.CsrfViewMiddleware',[m
[31m-    'django.contrib.auth.middleware.AuthenticationMiddleware',[m
[31m-    'django.contrib.messages.middleware.MessageMiddleware',[m
[31m-    'django.middleware.clickjacking.XFrameOptionsMiddleware',[m
[31m-)[m
[31m-[m
[31m-ROOT_URLCONF = 'quickblog.urls'[m
[31m-[m
[31m-WSGI_APPLICATION = 'quickblog.wsgi.application'[m
[31m-[m
[31m-[m
[31m-# Database[m
[31m-# https://docs.djangoproject.com/en/1.6/ref/settings/#databases[m
[31m-[m
[31m-DATABASES = {[m
[31m-    'default': {[m
[31m-        'ENGINE': 'django.db.backends.sqlite3',[m
[31m-        'NAME': os.path.join(BASE_DIR, 'blog.db.sqlite3'),[m
[31m-        'OPTIONS': {[m
[31m-        'timeout': 20,[m
[31m-    }[m
[31m-    }[m
[31m-[m
[31m-}[m
[31m-[m
[31m-# Internationalization[m
[31m-# https://docs.djangoproject.com/en/1.6/topics/i18n/[m
[31m-[m
[31m-LANGUAGE_CODE = 'cn'[m
[31m-[m
[31m-#TIME_ZONE = 'UTC'[m
[31m-TIME_ZONE = 'Asia/Shanghai'[m
[31m-[m
[31m-USE_I18N = True[m
[31m-[m
[31m-USE_L10N = True[m
[31m-[m
[31m-USE_TZ = False[m
[31m-[m
[31m-[m
[31m-# Static files (CSS, JavaScript, Images)[m
[31m-# https://docs.djangoproject.com/en/1.6/howto/static-files/[m
[31m-[m
[31m-STATIC_URL = '/static/'[m
[31m-[m
[31m-[m
[31m-[m
[1mdiff --git a/quickblog/settings.pyc b/quickblog/settings.pyc[m
[1mdeleted file mode 100644[m
[1mindex 65c9b6d..0000000[m
Binary files a/quickblog/settings.pyc and /dev/null differ
[1mdiff --git a/quickblog/urls.py b/quickblog/urls.py[m
[1mdeleted file mode 100644[m
[1mindex 3e5ebb1..0000000[m
[1m--- a/quickblog/urls.py[m
[1m+++ /dev/null[m
[36m@@ -1,17 +0,0 @@[m
[31m-from django.conf.urls import patterns, include, url[m
[31m-[m
[31m-from django.contrib import admin[m
[31m-[m
[31m-[m
[31m-urlpatterns = patterns('',[m
[31m-    # Examples:[m
[31m-    # url(r'^$', 'quickblog.views.home', name='home'),[m
[31m-    # url(r'^blog/', include('blog.urls')),[m
[31m-[m
[31m-    url(r'^admin/', include(admin.site.urls)),[m
[31m-    url(r'^blog/', include('blog.urls')),[m
[31m-    url(r'^celery/', include('celerytest.urls')),[m
[31m-[m
[31m-)[m
[31m-[m
[31m-[m
[1mdiff --git a/quickblog/urls.pyc b/quickblog/urls.pyc[m
[1mdeleted file mode 100644[m
[1mindex af9f232..0000000[m
Binary files a/quickblog/urls.pyc and /dev/null differ
[1mdiff --git a/quickblog/wsgi.py b/quickblog/wsgi.py[m
[1mdeleted file mode 100644[m
[1mindex 1da07c9..0000000[m
[1m--- a/quickblog/wsgi.py[m
[1m+++ /dev/null[m
[36m@@ -1,14 +0,0 @@[m
[31m-"""[m
[31m-WSGI config for quickblog project.[m
[31m-[m
[31m-It exposes the WSGI callable as a module-level variable named ``application``.[m
[31m-[m
[31m-For more information on this file, see[m
[31m-https://docs.djangoproject.com/en/1.6/howto/deployment/wsgi/[m
[31m-"""[m
[31m-[m
[31m-import os[m
[31m-os.environ.setdefault("DJANGO_SETTINGS_MODULE", "quickblog.settings")[m
[31m-[m
[31m-from django.core.wsgi import get_wsgi_application[m
[31m-application = get_wsgi_application()[m
[1mdiff --git a/quickblog/wsgi.pyc b/quickblog/wsgi.pyc[m
[1mdeleted file mode 100644[m
[1mindex 674a2ce..0000000[m
Binary files a/quickblog/wsgi.pyc and /dev/null differ
[1mdiff --git a/startup.bat b/startup.bat[m
[1mdeleted file mode 100644[m
[1mindex 8d23771..0000000[m
[1m--- a/startup.bat[m
[1m+++ /dev/null[m
[36m@@ -1,6 +0,0 @@[m
[31m-[m
[31m-[m
[31m-[m
[31m-e:[m
[31m-cd E:\Cloud360\sync\src\django_project\quickblog[m
[31m-python manage.py runserver[m
\ No newline at end of file[m
